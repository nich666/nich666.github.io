<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test20221231</title>
      <link href="//OI/test20221231/"/>
      <url>//OI/test20221231/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="可以问本人" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f9a55ce185b75879d46bcdfca1ca680db68523b7d096e82f53d6ac7cf0a434d7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Score of nch</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test20221228</title>
      <link href="//OI/test20221228/"/>
      <url>//OI/test20221228/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="可以问本人" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cd7fdd57f9dd8ec0320d47f01dccd4676d719b0030215a74a1d749d75b1857e9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Score of nch</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树套树</title>
      <link href="//OI/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
      <url>//OI/%E6%A0%91%E5%A5%97%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>人太菜了，只能写板子</p><span id="more"></span><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p><a href="https://www.luogu.com.cn/problem/P3834">P3834 【模板】可持久化线段树 2  </a></p><p>这是不是个主席树水题，<del>如果你说是，那你就已经吊打114514个我了</del></p><p>那如果带上修改怎么办</p><p><a href="https://www.luogu.com.cn/problem/P1908">P1908 逆序对  </a></p><p>这个大家都会做，但如果数组$a$变为两个数组怎么办,要删除又怎么办</p><p><a href="https://www.luogu.com.cn/problem/AT_chokudai_S001_h">LIS  </a></p><p>这个很容易，但如果其中有一个值会改变怎么办</p><p><a href="https://www.luogu.com.cn/problem/P4175">P4735 最大异或和  </a></p><p>这个我不会，神仙你一定会，但带上修改怎么办</p><p>对于上面这些带修,增加维度(带修就是增加了时间维度,并对时间维度进行扫描线)的问题，我们有一种解决问题的好方法–<del>CDQ分治</del>树套树</p><h2 id="树状数组-线段树-套线段树-平衡树"><a href="#树状数组-线段树-套线段树-平衡树" class="headerlink" title="树状数组(线段树)套线段树(平衡树)"></a>树状数组(线段树)套线段树(平衡树)</h2><p>一般内层是权值线段树，也可以换成平衡树，空间会从$O(nlog^{2}n)$变成$O(nlogn)$，但求第K大时由于平衡树不支持多棵树同时二分，需要在外面套二分，时间复杂度会从$O(log^{2}n)$变成$O(log^{3}n)$，而且权值线段树更好写</p><h3 id="P3437-POI2006-TET-Tetris-3D"><a href="#P3437-POI2006-TET-Tetris-3D" class="headerlink" title="P3437 [POI2006]TET-Tetris 3D  "></a><a href="https://www.luogu.com.cn/problem/P3437">P3437 [POI2006]TET-Tetris 3D  </a></h3><p>也许是板子，使用了标记永久化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,D,S;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tot,lc[N&lt;&lt;<span class="number">5</span>],rc[N&lt;&lt;<span class="number">5</span>],tag[N&lt;&lt;<span class="number">5</span>],val[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++tot;</span><br><span class="line">tag[k]=<span class="built_in">max</span>(tag[k],v);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> (<span class="type">void</span>)(val[k]=<span class="built_in">max</span>(val[k],v));</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) <span class="built_in">change</span>(lc[k],l,mid,L,R,v);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) <span class="built_in">change</span>(rc[k],mid+<span class="number">1</span>,r,L,R,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> <span class="built_in">max</span>(tag[k],val[k]);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=val[k];</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">ask</span>(lc[k],l,mid,L,R));</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">ask</span>(rc[k],mid+<span class="number">1</span>,r,L,R));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="type">int</span> rt1[N&lt;&lt;<span class="number">2</span>],rt2[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> u,<span class="type">int</span> d,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T.<span class="built_in">change</span>(rt1[k],<span class="number">1</span>,S,u,d,v);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> T.<span class="built_in">change</span>(rt2[k],<span class="number">1</span>,S,u,d,v);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)<span class="built_in">change</span>(k1,l,mid,L,R,u,d,v);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) <span class="built_in">change</span>(k2,mid+<span class="number">1</span>,r,L,R,u,d,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> u,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=T.<span class="built_in">ask</span>(rt2[k],<span class="number">1</span>,S,u,d);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> ans=<span class="built_in">max</span>(ans,T.<span class="built_in">ask</span>(rt1[k],<span class="number">1</span>,S,u,d));</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">ask</span>(k1,l,mid,L,R,u,d));</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">ask</span>(k2,mid+<span class="number">1</span>,r,L,R,u,d));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;D&gt;&gt;S&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d,s,w,x,y;</span><br><span class="line">cin&gt;&gt;d&gt;&gt;s&gt;&gt;w&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">int</span> h=<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,D,x+<span class="number">1</span>,x+d,y+<span class="number">1</span>,y+s);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,D,x+<span class="number">1</span>,x+d,y+<span class="number">1</span>,y+s,h+w);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,D,<span class="number">1</span>,D,<span class="number">1</span>,S)&lt;&lt;endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="三道很水的题"><a href="#三道很水的题" class="headerlink" title="三道很水的题"></a>三道很水的题</h3><h4 id="P2617-Dynamic-Rankings"><a href="#P2617-Dynamic-Rankings" class="headerlink" title="P2617 Dynamic Rankings"></a><a href="https://www.luogu.com.cn/problem/P2617">P2617 Dynamic Rankings</a></h4><p>我会莫队，我会整体二分，那我们强制在线</p><p><del>我会分块</del></p><p>可我们(犯贱)就想用值域线段树解决(bushi</p><p>先考虑暴力</p><p><del>一棵一棵地修改值域线段树</del></p><p><del>这样我们就得到一个修改$O(nlogn)$查询$O(logn)$的优秀算法了</del></p><p>我们先考虑静态时怎么做的，将其转化为前缀相减的形式，我们可以使用善于维护前缀和的数据结构–<del>分块</del>树状数组或者线段树</p><p>所以我们用值域线段树维护值域，树状数组或者线段树维护下标，将其嵌套就做完了</p><p>代码太丑不放了</p><h4 id="P3810-【模板】三维偏序（陌上花开）"><a href="#P3810-【模板】三维偏序（陌上花开）" class="headerlink" title="P3810 【模板】三维偏序（陌上花开）"></a><a href="https://www.luogu.com.cn/problem/P3810">P3810 【模板】三维偏序（陌上花开）</a></h4><p>三维偏序，一维排序，剩下一种树维护一个维度</p><p>代码怎么还是这么丑</p><h4 id="P3157-CQOI2011-动态逆序对"><a href="#P3157-CQOI2011-动态逆序对" class="headerlink" title="P3157 [CQOI2011]动态逆序对"></a><a href="https://www.luogu.com.cn/problem/P3157">P3157 [CQOI2011]动态逆序对</a></h4><p>要求单点修改，区间查询，板子,不过要维护两棵树，细节有点多</p><p>还有个双倍经验<a href="https://www.luogu.com.cn/problem/P1975">P1975 [国家集训队]排队  </a></p><h3 id="P3380-【模板】二逼平衡树（树套树）"><a href="#P3380-【模板】二逼平衡树（树套树）" class="headerlink" title="P3380 【模板】二逼平衡树（树套树）"></a><a href="https://www.luogu.com.cn/problem/P3380">P3380 【模板】二逼平衡树（树套树）</a></h3><p>这才是真正的模板，几乎包含了上面的操作</p><p>那讲上面干什么，为了引入<del>占字数</del></p><p>看看代码就够了，感觉写的不怎么样，没有写出应有的对称美</p><p>求前驱后继可以对每棵树求后合并统计，<del>但我太懒了</del>，所以常数巨大，总用时9.29s，内存用了364MB</p><p>树状数组套权值线段树跑了3.61s,空间95MB</p><p><del>但还是被3.2s 90MB的分块吊起来锤</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+r&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e8</span>,N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N],n,m,tot,root[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span>&#123;<span class="type">int</span> lc,rc,v;&#125;t[N*<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++tot;t[k].v+=v;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">ins</span>(t[k].lc,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ins</span>(t[k].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="keyword">return</span> <span class="built_in">rk</span>(t[k].lc,l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">rk</span>(t[k].rc,mid+<span class="number">1</span>,r,x)+t[t[k].lc].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="built_in">ins</span>(root[k],<span class="number">0</span>,M,a[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid),<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ins</span>(root[k],<span class="number">0</span>,M,val,v);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(k1,l,mid,x,val,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(k2,mid+<span class="number">1</span>,r,x,val,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt,rt[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> rt[++cnt]=root[k],<span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) <span class="built_in">find</span>(k1,l,mid,L,R);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) <span class="built_in">find</span>(k2,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) res+=<span class="built_in">rk</span>(rt[i],<span class="number">0</span>,M,k<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) tmp+=t[t[rt[i]].lc].v;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) rt[i]=t[rt[i]].lc;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">kth</span>(l,mid,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) rt[i]=t[rt[i]].rc;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">kth</span>(mid+<span class="number">1</span>,r,k-tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">rk</span>(x);</span><br><span class="line"><span class="keyword">return</span> k==<span class="number">1</span>?<span class="number">-2147483647</span>:<span class="built_in">kth</span>(<span class="number">0</span>,M,k<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">rk</span>(x+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> k==len+<span class="number">1</span>?<span class="number">2147483647</span>:<span class="built_in">kth</span>(<span class="number">0</span>,M,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> opt,l,r,k;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(opt!=<span class="number">3</span>)cin&gt;&gt;k,cnt=<span class="number">0</span>,<span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) cout&lt;&lt;<span class="built_in">rk</span>(k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) cout&lt;&lt;<span class="built_in">kth</span>(<span class="number">0</span>,M,k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,a[l],<span class="number">-1</span>),<span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,a[l]=r,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) cout&lt;&lt;<span class="built_in">pre</span>(k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">suf</span>(r-l+<span class="number">1</span>,k)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3332-ZJOI2013-K大数查询"><a href="#P3332-ZJOI2013-K大数查询" class="headerlink" title="P3332 [ZJOI2013]K大数查询"></a><a href="https://www.luogu.com.cn/problem/P3332">P3332 [ZJOI2013]K大数查询</a></h3><p>这题也是板子，但一看，区间加</p><p><del>不要慌，一个一个加</del></p><p>我们可以反过来，外层维护权值，内层维护下标，查询时在外层二分，注意要标记永久化，不然常数爆炸</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> root[N*<span class="number">4</span>],n,idx,tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v,tag;</span><br><span class="line">&#125;t[N*<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++idx;</span><br><span class="line">t[k].v+=<span class="built_in">min</span>(R,r)-<span class="built_in">max</span>(l,L)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)<span class="keyword">return</span> (<span class="type">void</span>)++t[k].tag;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) <span class="built_in">change</span>(t[k].lc,l,mid,L,R);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) <span class="built_in">change</span>(t[k].rc,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">change</span>(root[k],<span class="number">1</span>,n,L,R);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v&lt;=mid) <span class="built_in">add</span>(k1,l,mid,L,R,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(k2,mid+<span class="number">1</span>,r,L,R,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,res=t[k].tag*(<span class="built_in">min</span>(R,r)-<span class="built_in">max</span>(l,L)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) res+=<span class="built_in">query</span>(t[k].lc,l,mid,L,R);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) res+=<span class="built_in">query</span>(t[k].rc,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,tmp=<span class="built_in">query</span>(root[k2],<span class="number">1</span>,n,L,R);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=tmp) <span class="keyword">return</span> <span class="built_in">ask</span>(k2,mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(k1,l,mid,L,R,x-tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> opt,x,y,z;</span><br><span class="line">T.n=n;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) T.<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,z);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;T.<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,z)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4175-CTSC2008-网络管理"><a href="#P4175-CTSC2008-网络管理" class="headerlink" title="P4175 [CTSC2008]网络管理"></a><a href="https://www.luogu.com.cn/problem/P4175">P4175 [CTSC2008]网络管理</a></h3><p>P2617的上树版本，先来看静态的<a href="https://www.luogu.com.cn/problem/P2633">P2633 Count on a tree  </a></p><p>考虑树上差分，<del>然后就可以看题解了</del></p><p>可这题要修改，一个容易得到的结论是一个节点影响的是自己的子孙，在dfn上是一段连续区间，所以问题转化为区间修改，单点询问</p><p>$clj$神仙说把外层换成可持久化线段树可查询历史版本，但我不会</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+r&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,M=<span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n,m,top[N],root[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> dfn[N],sz[N],idx,son[N],f[N],val[N],id[N],tot,dep[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;g[x].<span class="built_in">push_back</span>(y);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> lc,rc,v;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x]=fa,dfn[++idx]=x,sz[x]=<span class="number">1</span>,id[x]=idx,dep[x]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=g[x][i];</span><br><span class="line"><span class="keyword">if</span>(y!=fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(y,x),sz[x]+=sz[y];</span><br><span class="line">            <span class="keyword">if</span>(sz[y]&gt;sz[son[x]]) son[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[x]=tp;</span><br><span class="line">    <span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x],tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span>(y!=f[x]&amp;&amp;y!=son[x]) <span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x=f[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!k) k=++tot;</span><br><span class="line">    t[k].v+=v;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">ins</span>(t[k].lc,l,mid,x,v);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">ins</span>(t[k].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> <span class="built_in">ins</span>(root[k],<span class="number">1</span>,M,x,v);;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">change</span>(k1,l,mid,L,R,x,v);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) <span class="built_in">change</span>(k2,mid+<span class="number">1</span>,r,L,R,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> &amp;cnt,<span class="type">int</span> *rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt[++cnt]=root[k];</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">find</span>(k1,l,mid,x,cnt,rt);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">find</span>(k2,mid+<span class="number">1</span>,r,x,cnt,rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">4</span>],rt[<span class="number">4</span>][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">0</span>];++i) tmp+=t[t[rt[<span class="number">0</span>][i]].rc].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">1</span>];++i) tmp+=t[t[rt[<span class="number">1</span>][i]].rc].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">2</span>];++i) tmp-=t[t[rt[<span class="number">2</span>][i]].rc].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">3</span>];++i) tmp-=t[t[rt[<span class="number">3</span>][i]].rc].v;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=tmp)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">0</span>];++i) rt[<span class="number">0</span>][i]=t[rt[<span class="number">0</span>][i]].rc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">1</span>];++i) rt[<span class="number">1</span>][i]=t[rt[<span class="number">1</span>][i]].rc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">2</span>];++i) rt[<span class="number">2</span>][i]=t[rt[<span class="number">2</span>][i]].rc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">3</span>];++i) rt[<span class="number">3</span>][i]=t[rt[<span class="number">3</span>][i]].rc;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">kth</span>(mid+<span class="number">1</span>,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">0</span>];++i) rt[<span class="number">0</span>][i]=t[rt[<span class="number">0</span>][i]].lc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">1</span>];++i) rt[<span class="number">1</span>][i]=t[rt[<span class="number">1</span>][i]].lc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">2</span>];++i) rt[<span class="number">2</span>][i]=t[rt[<span class="number">2</span>][i]].lc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">3</span>];++i) rt[<span class="number">3</span>][i]=t[rt[<span class="number">3</span>][i]].lc;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">kth</span>(l,mid,k-tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;val[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>),<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[i],id[i]+sz[i]<span class="number">-1</span>,val[i],<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> x,y,k;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;k&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(!k) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+sz[x]<span class="number">-1</span>,val[x],<span class="number">-1</span>),<span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+sz[x]<span class="number">-1</span>,val[x]=y,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> lc=<span class="built_in">lca</span>(x,y),tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) cnt[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],cnt[<span class="number">0</span>],rt[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[y],cnt[<span class="number">1</span>],rt[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[lc],cnt[<span class="number">2</span>],rt[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span>(f[lc]) <span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[f[lc]],cnt[<span class="number">3</span>],rt[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">0</span>];++i) tmp+=t[rt[<span class="number">0</span>][i]].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">1</span>];++i) tmp+=t[rt[<span class="number">1</span>][i]].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">2</span>];++i) tmp-=t[rt[<span class="number">2</span>][i]].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">3</span>];++i) tmp-=t[rt[<span class="number">3</span>][i]].v;</span><br><span class="line">    <span class="keyword">if</span>(tmp&lt;k) cout&lt;&lt;<span class="string">&quot;invalid request!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">kth</span>(<span class="number">1</span>,M,k)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h3><p>一个都不会，真的只会板子</p><p><a href="https://www.luogu.com.cn/problem/P3242">P3242 [HNOI2015] 接水果  </a></p><p><a href="https://www.luogu.com.cn/problem/P3250">P3250 [HNOI2016] 网络  </a></p><p><a href="https://www.luogu.com.cn/problem/P5445">P5445 [APIO2019] 路灯  </a></p><p><a href="https://www.luogu.com.cn/problem/P3248">P3248 [HNOI2016]树  </a></p><h2 id="线段树套Trie"><a href="#线段树套Trie" class="headerlink" title="线段树套Trie"></a>线段树套Trie</h2><p>解决区间异或的题</p><h3 id="P4585-FJOI2015-火星商店问题"><a href="#P4585-FJOI2015-火星商店问题" class="headerlink" title="P4585 [FJOI2015]火星商店问题  "></a><a href="https://www.luogu.com.cn/problem/P4585">P4585 [FJOI2015]火星商店问题  </a></h3><p>本来想练习线段树分治，<del>但我太菜做着做着就开始写树套树了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+r&gt;&gt;1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,INF=<span class="number">1e9</span>,V=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> root[N&lt;&lt;<span class="number">2</span>],a[N],n,m;</span><br><span class="line"><span class="type">int</span> ch[N*<span class="number">400</span>][<span class="number">2</span>],last[N*<span class="number">400</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=V;~i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!ch[k][c]) ch[k][c]=++tot;</span><br><span class="line">k=ch[k][c],last[k]=<span class="built_in">max</span>(last[k],t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=V;~i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=((x&gt;&gt;i)&amp;<span class="number">1</span>)^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[k][c]&amp;&amp;last[ch[k][c]]&gt;=t) k=ch[k][c],res+=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">else</span> k=ch[k][c^<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">root[k]=++tot;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="built_in">ins</span>(root[k],a[i],INF);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid);<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ins</span>(root[k],v,t);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(k1,l,mid,x,v,t);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(k2,mid+<span class="number">1</span>,r,x,v,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> <span class="built_in">ask</span>(root[k],x,t);</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k1,l,mid,L,R,x,t);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k2,mid+<span class="number">1</span>,r,L,R,x,t);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">query</span>(k1,l,mid,L,R,x,t),<span class="built_in">query</span>(k2,mid+<span class="number">1</span>,r,L,R,x,t));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> opt,l,r,x,d,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,++t);</span><br><span class="line"><span class="keyword">else</span> cin&gt;&gt;x&gt;&gt;d,cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x,t-d+<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡树套线段树"><a href="#平衡树套线段树" class="headerlink" title="平衡树套线段树"></a>平衡树套线段树</h2><p>因为改变了区间结构，外层要用支持插入删除的数据结构</p><p>不会，咕咕咕咕</p><p>但可以放个题</p><p><a href="https://www.luogu.com.cn/problem/P4278">P4278 带插入区间K小值  </a></p><p>听说可以用替罪羊树套权值线段树，<del>但会被卡</del></p><p>还有bzoj3217 替罪羊树套Trie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">ALOEXT</span><br><span class="line">题目描述</span><br><span class="line">taorunz平时最喜欢的东西就是可移动存储器了……只要看到别人的可移动存储器，他总是用尽一切办法把它里面的东西弄到手。</span><br><span class="line">突然有一天，taorunz来到了一个密室，里面放着一排可移动存储器，存储器里有非常珍贵的OI资料……不过比较特殊的是，每个存储器上都写着一个非负整数。taorunz很高兴，要把所有的存储器都拿走（taorunz的智商高达500，他一旦弄走了这里的所有存储器，在不久到来的AHOI和NOI中……你懂的）。不过这时有一个声音传来：“你只能拿走这里的一个存储器，而且还不能直接拿，你需要指定一段区间[l, r]，满足l&lt;r，然后在第l个和第r个存储器之间选一个拿走，你能获得的知识增加量等于区间[l, r]中所有存储器上写的整数的次大值与你拿走的这个存储器上写的整数作按位异或运算的结果。”</span><br><span class="line">问题是，这里的可移动存储器数量太多，而且，它们还在不断地发生变化，有时候天上会掉下来一个新的存储器，并插入到这一排存储器中，有时候某个存储器会不明原因消失，有时候某个存储器上写的整数变化了。taorunz虽然智商很高，但也无法应对如此快的变化，他指定了许多段区间，让你帮他找出如果在这个区间中拿走存储器，他能获得的最多的知识是多少。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行两个整数N、M，表示一开始的存储器数和后面发生的事件数。</span><br><span class="line">第二行N个非负整数，表示一开始从左到右每个存储器上写的数字。注意，存储器从0开始编号，也就是最左边的存储器是第0个。</span><br><span class="line">接下来M行，每行描述一个事件，有4种可能的事件。</span><br><span class="line">（1）I x y：表示天上掉下来一个写着数字y的存储器，并插入到原来的第x个存储器之前，如果x等于原来存储器的个数，则插入到末尾；</span><br><span class="line">（2）D x：表示第x个存储器消失；</span><br><span class="line">（3）C x y：表示第x个存储器上写的数字变为y；</span><br><span class="line">（4）F l r：表示taorunz指定区间[l, r]，让你告诉他最多能获得多少知识。</span><br><span class="line">注意，本题强制在线，也就是事件中出现的所有数字都进行了加密，数字s表示的真实值是</span><br><span class="line">对于I、D、C事件中的x及F事件中的l、r：(s+last_ans) mod n0；</span><br><span class="line">对于I、C事件中的y：(s+last_ans) mod 1048576。</span><br><span class="line">其中n0为目前存储器个数，last_ans为上一个F事件的结果，如果前面尚未发生F事件，则last_ans=0。</span><br><span class="line">输出格式</span><br><span class="line">对于每个F事件，输出结果。</span><br><span class="line">样例</span><br><span class="line">样例输入</span><br><span class="line">5 10</span><br><span class="line">2 6 3 8 7</span><br><span class="line">F 1 4</span><br><span class="line">I 2 1048565</span><br><span class="line">I 0 1048566</span><br><span class="line">D 3</span><br><span class="line">F 3 0</span><br><span class="line">I 3 1048569</span><br><span class="line">D 5</span><br><span class="line">C 1 1048570</span><br><span class="line">F 1 2</span><br><span class="line">F 2 1</span><br><span class="line">样例输出</span><br><span class="line">15</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">数据范围与提示1&lt;=N, M&lt;=100000。所有F事件满足l&lt;r。</span><br><span class="line">本题共有5组数据，除1组为随机数据外，其它数据均为人工构造。</span><br></pre></td></tr></table></figure><h2 id="序列分块套值域分块"><a href="#序列分块套值域分块" class="headerlink" title="序列分块套值域分块"></a>序列分块套值域分块</h2><p>分块yyds</p><p><a href="https://www.luogu.com.cn/problem/P3380">P3380 【模板】二逼平衡树（树套树）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,N1=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> n,m,block,num;</span><br><span class="line"><span class="type">int</span> a[N],bl[N],L[N1],R[N1];</span><br><span class="line"><span class="type">int</span> v[N1][N1],val[N1][N];</span><br><span class="line"><span class="type">int</span> b[N],tot;</span><br><span class="line"><span class="type">int</span> num1,L1[N1],R1[N1];</span><br><span class="line"><span class="type">int</span> belong[N];</span><br><span class="line"><span class="type">int</span> cnt1[N1],cnt[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> opt,l,r,k;</span><br><span class="line">&#125;s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>,p=bl[l],q=bl[r];</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;k) ++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) <span class="keyword">if</span>(a[i]&lt;k) ++res;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i) <span class="keyword">if</span>(a[i]&lt;k) ++res;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;belong[k];++i) res+=v[q<span class="number">-1</span>][i]-v[p][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L1[belong[k]];i&lt;k;++i) res+=val[q<span class="number">-1</span>][i]-val[p][i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=bl[l],q=bl[r];</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"> ++cnt[a[i]],++cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i)</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt1[i]) k-=cnt1[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L1[i];j&lt;=R1[i];++j)</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt[j]) k-=cnt[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">--cnt[a[i]],--cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) </span><br><span class="line">++cnt[a[i]],++cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i)</span><br><span class="line">++cnt[a[i]],++cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt1[i]+v[q<span class="number">-1</span>][i]-v[p][i]) k-=cnt1[i]+v[q<span class="number">-1</span>][i]-v[p][i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L1[i];j&lt;=R1[i];++j)</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt[j]+val[q<span class="number">-1</span>][j]-val[p][j]) k-=cnt[j]+val[q<span class="number">-1</span>][j]-val[p][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) </span><br><span class="line">--cnt[a[i]],--cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i)</span><br><span class="line">--cnt[a[i]],--cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> va,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl[x];i&lt;=num;++i)</span><br><span class="line">val[i][va]+=value,v[i][belong[va]]+=value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=bl[l],q=bl[r],res=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="keyword">if</span>(a[i]&lt;k) res=<span class="built_in">max</span>(a[i],res);</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">-2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) <span class="keyword">if</span>(a[i]&lt;k) res=<span class="built_in">max</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i) <span class="keyword">if</span>(a[i]&lt;k) res=<span class="built_in">max</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=k<span class="number">-1</span>;i&gt;=L1[belong[k]];--i)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][i]-val[p][i]) <span class="keyword">return</span> b[<span class="built_in">max</span>(res,i)];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=belong[k]<span class="number">-1</span>;i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[q<span class="number">-1</span>][i]-v[p][i])</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=R1[i];j&gt;=L1[i];--j)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][j]-val[p][j]) <span class="keyword">return</span> b[<span class="built_in">max</span>(res,j)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">-2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=bl[l],q=bl[r],res=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="keyword">if</span>(a[i]&gt;k) res=<span class="built_in">min</span>(a[i],res);</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) <span class="keyword">if</span>(a[i]&gt;k) res=<span class="built_in">min</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i) <span class="keyword">if</span>(a[i]&gt;k) res=<span class="built_in">min</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=k+<span class="number">1</span>;i&lt;=R1[belong[k]];++i)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][i]-val[p][i]) <span class="keyword">return</span> b[<span class="built_in">min</span>(res,i)];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=belong[k]+<span class="number">1</span>;i&lt;=num1;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[q<span class="number">-1</span>][i]-v[p][i])</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L1[i];j&lt;=R1[i];++j)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][j]-val[p][j]) <span class="keyword">return</span> b[<span class="built_in">min</span>(res,j)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n),num=(n<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i) L[i]=R[i<span class="number">-1</span>]+<span class="number">1</span>,R[i]=i*block;</span><br><span class="line">R[num]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[++tot]=a[i],bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s[i].opt&gt;&gt;s[i].l&gt;&gt;s[i].r;</span><br><span class="line"><span class="keyword">if</span>(s[i].opt!=<span class="number">3</span>) cin&gt;&gt;s[i].k;</span><br><span class="line"><span class="keyword">else</span> s[i].k=s[i].r,s[i].r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i].opt!=<span class="number">2</span>) b[++tot]=s[i].k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(&amp;b[<span class="number">1</span>],&amp;b[tot+<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+tot+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="keyword">if</span>(s[i].opt!=<span class="number">2</span>) s[i].k=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,s[i].k)-b;</span><br><span class="line">block=<span class="built_in">sqrt</span>(M),num1=(M<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i) L1[i]=R1[i<span class="number">-1</span>]+<span class="number">1</span>,R1[i]=i*block;</span><br><span class="line">R1[num1]=M;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num1;++j) v[i][j]=v[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j) val[i][j]=val[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[i];j&lt;=R[i];++j) ++v[i][belong[a[j]]],++val[i][a[j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i].opt==<span class="number">1</span>) cout&lt;&lt;<span class="built_in">rk</span>(s[i].l,s[i].r,s[i].k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i].opt==<span class="number">2</span>) cout&lt;&lt;b[<span class="built_in">kth</span>(s[i].l,s[i].r,s[i].k)]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i].opt==<span class="number">3</span>) <span class="built_in">change</span>(s[i].l,a[s[i].l],<span class="number">-1</span>),a[s[i].l]=s[i].k,<span class="built_in">change</span>(s[i].l,a[s[i].l],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i].opt==<span class="number">4</span>) cout&lt;&lt;<span class="built_in">pre</span>(s[i].l,s[i].r,s[i].k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">suf</span>(s[i].l,s[i].r,s[i].k)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他例题找不到了</p><h2 id="块状链表套"><a href="#块状链表套" class="headerlink" title="块状链表套???"></a>块状链表套???</h2><p>块状链表可以维护外围结构的改变，<del>但我不会块状链表</del></p><p>例题和平衡树套线段树一样</p><h2 id="优化DP"><a href="#优化DP" class="headerlink" title="优化DP"></a>优化DP</h2><p>树套树可以做到很多CDQ能做的事，<del>但不管是常数，空间都被吊打</del></p><h3 id="P4093-HEOI2016-TJOI2016-序列"><a href="#P4093-HEOI2016-TJOI2016-序列" class="headerlink" title="P4093 [HEOI2016/TJOI2016]序列  "></a><a href="https://www.luogu.com.cn/problem/P4093">P4093 [HEOI2016/TJOI2016]序列  </a></h3><p>我们不妨用$a_i,f_i,g_i,dp_i$分别表示其原本的值，变化中最大的值，变化中最小的值和以这一位结尾的最不下降子序列长度。</p><p>$dp[i]=\max\limits_{j=1,f_j\leq a_i\wedge a_j\leq g_i}^{i-1}dp[j]$</p><p>用树套树维护最大值就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> root[N],v1,v2,idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v;</span><br><span class="line">&#125;t[N*<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++idx;</span><br><span class="line">t[k].v=<span class="built_in">max</span>(t[k].v,v);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(t[k].lc,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(t[k].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=v1;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="built_in">change</span>(root[x],<span class="number">1</span>,v2,y,v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(t[k].lc,l,mid,x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(t[t[k].lc].v,<span class="built_in">query</span>(t[k].rc,mid+<span class="number">1</span>,r,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(root[x],<span class="number">1</span>,v2,y));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _v1,<span class="type">int</span> _v2)</span></span>&#123;v1=_v1,v2=_v2,idx=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="type">int</span> v1[N],v2[N],v[N],dp[N];</span><br><span class="line"><span class="type">int</span> n,m,res;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;v[i],v1[i]=v2[i]=v[i];</span><br><span class="line">T.<span class="built_in">init</span>(<span class="number">1e5</span>,<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">v1[x]=<span class="built_in">max</span>(v1[x],y),v2[x]=<span class="built_in">min</span>(v2[x],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=T.<span class="built_in">ask</span>(v2[i],v[i])+<span class="number">1</span>;res=<span class="built_in">max</span>(res,dp[i]);</span><br><span class="line">T.<span class="built_in">add</span>(v[i],v1[i],dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P2487-SDOI2011-拦截导弹"><a href="#P2487-SDOI2011-拦截导弹" class="headerlink" title="P2487 [SDOI2011]拦截导弹"></a><a href="https://www.luogu.com.cn/problem/P2487">P2487 [SDOI2011]拦截导弹</a></h3><p>还没写</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上启发式合并</title>
      <link href="//OI/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>//OI/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>树上问题都是神仙</p><span id="more"></span><p>又称$DSU on tree$</p><h3 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h3><p>会重链剖分的思想(就是只会口胡就行)</p><p>适用范围：我也不知道</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>就是对每个结点，暴力统计其子树内的信息</p><p>只不过在每个结点统计时，继承其重儿子的信息</p><p>再来口胡一下复杂度</p><p>由于只有轻链会重新统计信息，每个节点到根节点上最多有$O(logn)$条轻链</p><p>所以总时间复杂度为$O(nlognf(n)+mf’(n))$</p><p>($f(n)$为单次修改的代价，$f’(m)$为单次询问的代价)</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="Tree-and-Queries"><a href="#Tree-and-Queries" class="headerlink" title="Tree and Queries"></a><a href="https://www.luogu.com.cn/problem/CF375D">Tree and Queries</a></h4><p>就是板子，主要是贴个代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> idx,to[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N];</span><br><span class="line"><span class="type">int</span> c[N],cnt[N],ccnt[N],ans[N];</span><br><span class="line"><span class="type">int</span> s[N],son[N],f[N],n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++idx]=y,ne[idx]=head[x],head[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=<span class="number">1</span>,f[x]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y,x);</span><br><span class="line">s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d,res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=ne[i]) <span class="keyword">if</span>(to[i]!=f[x]) <span class="built_in">add</span>(to[i]);</span><br><span class="line">ccnt[++cnt[c[x]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--ccnt[cnt[c[x]]--];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x])<span class="built_in">init</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id,k;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt;qu[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x])</span><br><span class="line"><span class="built_in">solve</span>(y),<span class="built_in">init</span>(y),d=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>(son[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x]) <span class="built_in">add</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">ccnt[++cnt[c[x]]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;qu[x].<span class="built_in">size</span>();++i) ans[qu[x][i].id]=ccnt[qu[x][i].k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;x&gt;&gt;y,qu[x].<span class="built_in">push_back</span>((node)&#123;i,y&#125;);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lomsat-gelral"><a href="#Lomsat-gelral" class="headerlink" title="Lomsat gelral"></a><a href="https://www.luogu.com.cn/problem/CF600E">Lomsat gelral</a></h4><p>板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> idx,to[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N];</span><br><span class="line"><span class="type">int</span> c[N],cnt[N],ans[N];</span><br><span class="line"><span class="type">int</span> s[N],son[N],f[N],n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++idx]=y,ne[idx]=head[x],head[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=<span class="number">1</span>,f[x]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d,res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=ne[i]) <span class="keyword">if</span>(to[i]!=f[x]) <span class="built_in">add</span>(to[i]);</span><br><span class="line"><span class="keyword">if</span>(++cnt[c[x]]&gt;d)</span><br><span class="line">d=cnt[c[x]],res=c[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[c[x]]==d) res+=c[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[c[x]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x])<span class="built_in">init</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x])</span><br><span class="line"><span class="built_in">solve</span>(y),<span class="built_in">init</span>(y),d=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>(son[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x]) <span class="built_in">add</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(++cnt[c[x]]&gt;d)</span><br><span class="line">d=cnt[c[x]],res=c[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[c[x]]==d) res+=c[x];</span><br><span class="line">ans[x]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dominant-Indices"><a href="#Dominant-Indices" class="headerlink" title="Dominant Indices"></a><a href="https://www.luogu.com.cn/problem/CF1009F">Dominant Indices</a></h4><p>还是板子<del>（所以学会这个就可以水一堆题）</del>,好像用长剖可以做到$O(n)$(但我不会)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> idx,to[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N];</span><br><span class="line"><span class="type">int</span> c[N],cnt[N],ans[N];</span><br><span class="line"><span class="type">int</span> s[N],son[N],f[N],n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++idx]=y,ne[idx]=head[x],head[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=<span class="number">1</span>,f[x]=fa,c[x]=c[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d,res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=ne[i]) <span class="keyword">if</span>(to[i]!=f[x]) <span class="built_in">add</span>(to[i]);</span><br><span class="line"><span class="keyword">if</span>(++cnt[c[x]]&gt;d)</span><br><span class="line">d=cnt[c[x]],res=c[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[c[x]]==d) res=<span class="built_in">min</span>(res,c[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[c[x]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x])<span class="built_in">init</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x])</span><br><span class="line"><span class="built_in">solve</span>(y),<span class="built_in">init</span>(y),d=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>(son[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x]) <span class="built_in">add</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(++cnt[c[x]]&gt;d)</span><br><span class="line">d=cnt[c[x]],res=c[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[c[x]]==d) res=<span class="built_in">min</span>(res,c[x]);</span><br><span class="line">ans[x]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;ans[i]-c[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Blood-Cousins-Return"><a href="#Blood-Cousins-Return" class="headerlink" title="Blood Cousins Return"></a><a href="https://www.luogu.com.cn/problem/CF246E">Blood Cousins Return</a></h4><p>还是板子,用$set$维护出现的集合，注意数据是森林</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> idx,to[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N];</span><br><span class="line"><span class="type">int</span> c[N],ans[N];</span><br><span class="line"><span class="type">int</span> s[N],son[N],f[N],n,m,dep[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++idx]=y,ne[idx]=head[x],head[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=<span class="number">1</span>,f[x]=fa,dep[x]=dep[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d,res;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;se[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=ne[i]) <span class="keyword">if</span>(to[i]!=f[x]) <span class="built_in">add</span>(to[i]);</span><br><span class="line">se[dep[x]].<span class="built_in">insert</span>(c[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">se[dep[x]].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x])<span class="built_in">init</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id,k;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt;qu[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x])</span><br><span class="line"><span class="built_in">solve</span>(y),<span class="built_in">init</span>(y),d=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>(son[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x]) <span class="built_in">add</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">se[dep[x]].<span class="built_in">insert</span>(c[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;qu[x].<span class="built_in">size</span>();++i) ans[qu[x][i].id]=se[qu[x][i].k+dep[x]].<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t,rt;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;mp;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;name&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(!x) vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(x,i);</span><br><span class="line"><span class="keyword">if</span>(!mp[name]) mp[name]=++t;</span><br><span class="line">c[i]=mp[name];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;x&gt;&gt;y,qu[x].<span class="built_in">push_back</span>((node)&#123;i,y&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(i,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>(i);</span><br><span class="line"><span class="built_in">init</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tree-Requests"><a href="#Tree-Requests" class="headerlink" title="Tree Requests"></a><a href="https://www.luogu.com.cn/problem/CF570D">Tree Requests</a></h4><p>终于比板子难一点了</p><p>由于是回文串，所以出现次数为奇数的种类数只能不超过$2$，然后就可做了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> idx,to[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],head[N];</span><br><span class="line"><span class="type">int</span> c[N],ans[N],cnt[N][<span class="number">26</span>],ccnt[N];</span><br><span class="line"><span class="type">int</span> s[N],son[N],f[N],n,m,dep[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++idx]=y,ne[idx]=head[x],head[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=<span class="number">1</span>,f[x]=fa,dep[x]=dep[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x),s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d,res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=ne[i]) <span class="keyword">if</span>(to[i]!=f[x]) <span class="built_in">add</span>(to[i]);</span><br><span class="line"><span class="keyword">if</span>((++cnt[dep[x]][c[x]])&amp;<span class="number">1</span>) ++ccnt[dep[x]];</span><br><span class="line"><span class="keyword">else</span> --ccnt[dep[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((--cnt[dep[x]][c[x]])&amp;<span class="number">1</span>) ++ccnt[dep[x]];</span><br><span class="line"><span class="keyword">else</span> --ccnt[dep[x]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x])<span class="built_in">init</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id,k;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt;qu[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x])</span><br><span class="line"><span class="built_in">solve</span>(y),<span class="built_in">init</span>(y),d=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>(son[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i]) </span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=f[x]&amp;&amp;y!=son[x]) <span class="built_in">add</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((++cnt[dep[x]][c[x]])&amp;<span class="number">1</span>) ++ccnt[dep[x]];</span><br><span class="line"><span class="keyword">else</span> --ccnt[dep[x]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;qu[x].<span class="built_in">size</span>();++i) ans[qu[x][i].id]=ccnt[qu[x][i].k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) cin&gt;&gt;x,<span class="built_in">add</span>(x,i);</span><br><span class="line">cin&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[i]=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;x&gt;&gt;y,qu[x].<span class="built_in">push_back</span>((node)&#123;i,y&#125;);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">puts</span>(ans[i]&gt;<span class="number">1</span>?<span class="string">&quot;No&quot;</span>:<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启发式算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫队</title>
      <link href="//OI/%E8%8E%AB%E9%98%9F/"/>
      <url>//OI/%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p>暑假学的东西，现在才来写</p><span id="more"></span><p>先推荐<a href="https://www.cnblogs.com/WAMonster/p/10118934.html">莫队算法——从入门到紫题</a>&amp;&amp;<a href="https://www.luogu.com.cn/training/38213">dX的莫队题单</a></p><h3 id="普通莫队"><a href="#普通莫队" class="headerlink" title="普通莫队"></a>普通莫队</h3><p>口胡一下时间复杂度（默认$m，n$同阶）</p><p>左指针单次操作在块内移动次数为$O(\sqrt{n})$,n次操作加上从左往右总移动次数$O(n)$,左指针移动次数为$O(n\sqrt{n})$</p><p>右指针在左指针每块移动次数为$O(n)$，左指针共经过$O(\sqrt{n})$块，右指针总时间复杂度为$O(n\sqrt{n})$</p><p>所以普通莫队的时间复杂度为$O(n\sqrt{n}f(n)+nf’(n))$</p><p>（默认$n,m$同阶,$f(n)$为移动单次指针的代价，$f’(n)$为单次询问的代价）</p><p>但是这是极限数据，事实上莫队完全跑不到这么多，且莫队常数小，开了O2跑飞快，有图为证：</p><p><img src="/images/P4074.png"></p><p>普通莫队还有方法优化常数，具体见上面那篇文章</p><p>接下来讲下例题</p><h4 id="P5268-SNOI2017-一个简单的询问"><a href="#P5268-SNOI2017-一个简单的询问" class="headerlink" title="P5268 [SNOI2017]一个简单的询问"></a><a href="https://www.luogu.com.cn/problem/P5268">P5268 [SNOI2017]一个简单的询问</a></h4><p>这题直接做肯定是不可做的</p><p>但我们可以考虑容斥</p><p>由于$get(l,r,x)=get(1,r,x)−get(1,l−1,x)$</p><p>我们令$g(l,x)=get(1,l,x)$</p><p>则要求的是$\sum_{0}^{\infty} g(r1,x)g(r2,x)−g(r1,x)g(l2−1,x)−g(l1−1,x)g(r2,x)+g(l1−1,x)g(l2−1,x)$</p><p>然后拆成四个询问就能做了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,res;</span><br><span class="line"><span class="type">int</span> a[maxm],belong[maxm],ans[maxm],cnt1[maxm*<span class="number">2</span>],cnt2[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[l]&amp;<span class="number">1</span>?r&lt;x.r:r&gt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt1[a[x]];</span><br><span class="line">res+=cnt2[a[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add2</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt2[a[x]];</span><br><span class="line">res+=cnt1[a[x]];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt1[a[x]];</span><br><span class="line">res-=cnt2[a[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del2</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt2[a[x]];</span><br><span class="line">res-=cnt1[a[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> Q=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">read</span>(),belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line">m=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l1=<span class="built_in">read</span>(),r1=<span class="built_in">read</span>(),l2=<span class="built_in">read</span>(),r2=<span class="built_in">read</span>();</span><br><span class="line">q[++Q]=qq&#123;r1,r2,i&#125;;</span><br><span class="line">q[++Q]=qq&#123;l1<span class="number">-1</span>,r2,-i&#125;;</span><br><span class="line">q[++Q]=qq&#123;l2<span class="number">-1</span>,r1,-i&#125;;</span><br><span class="line">q[++Q]=qq&#123;l1<span class="number">-1</span>,l2<span class="number">-1</span>,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)<span class="keyword">if</span>(q[i].l&gt;q[i].r) <span class="built_in">swap</span>(q[i].l,q[i].r);</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">add2</span>(++l);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">del2</span>(l--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add1</span>(++r);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del1</span>(r--);</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">abs</span>(q[i].id);</span><br><span class="line"><span class="keyword">if</span>(q[i].id&lt;<span class="number">0</span>) ans[k]-=res;</span><br><span class="line"><span class="keyword">else</span> ans[k]+=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P4396-AHOI2013-作业"><a href="#P4396-AHOI2013-作业" class="headerlink" title="P4396 [AHOI2013]作业"></a><a href="https://www.luogu.com.cn/problem/P4396">P4396 [AHOI2013]作业</a></h4><p>这题我们可以联想到莫队（我也不知怎么想到的）</p><p>我们想一下莫队的复杂度$O(n\sqrt{n}f(n)+nf’(n))$</p><p>为了保证不鸡肋$f(n)$必须为$O(1)$(一般$O(logn)$就寄了)，$f’(n)$可以是$O(\sqrt{n})的$</p><p>$O(1)-O(\sqrt{n})$,你想到了什么，分块</p><p>我们对值域分块，再随便搞搞就过了</p><p>代码就不放了，<del>主要我也不知道当时为什么写莫队套树状数组，还能过</del></p><h4 id="P3730-曼哈顿交易"><a href="#P3730-曼哈顿交易" class="headerlink" title="P3730 曼哈顿交易"></a><a href="https://www.luogu.com.cn/problem/P3730">P3730 曼哈顿交易</a></h4><p>同理，真的差不多</p><p>放个代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,N1=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> ans[N],a[N],idx,block,num,bl[N];</span><br><span class="line"><span class="type">int</span> v[N1],val[N],cnt[N];</span><br><span class="line"><span class="type">int</span> L[N1],R[N1];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,k,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> bl[l]!=bl[res.l]?l&lt;res.l:(bl[l]&amp;<span class="number">1</span>?r&lt;res.r:r&gt;res.r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;s[N];</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--v[bl[cnt[x]]],--val[cnt[x]];</span><br><span class="line">++cnt[x];</span><br><span class="line">++v[bl[cnt[x]]],++val[cnt[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--v[bl[cnt[x]]],--val[cnt[x]];</span><br><span class="line">--cnt[x];</span><br><span class="line">++v[bl[cnt[x]]],++val[cnt[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line"><span class="keyword">if</span>(k&gt;v[i]) k-=v[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[i];j&lt;=R[i];++j)</span><br><span class="line"><span class="keyword">if</span>(k&gt;val[j]) k-=val[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> j;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(!mp[a[i]]) mp[a[i]]=++idx;</span><br><span class="line">a[i]=mp[a[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;s[i].l&gt;&gt;s[i].r&gt;&gt;s[i].k,s[i].id=i;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n),num=(n<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i) L[i]=R[i<span class="number">-1</span>]+<span class="number">1</span>,R[i]=i*block;</span><br><span class="line">R[num]=n;</span><br><span class="line"><span class="built_in">sort</span>(&amp;s[<span class="number">1</span>],&amp;s[n+<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(r&lt;s[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;s[i].l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line"><span class="keyword">while</span>(l&lt;s[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;s[i].r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line">ans[s[i].id]=<span class="built_in">ask</span>(s[i].k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tree-and-Queries"><a href="#Tree-and-Queries" class="headerlink" title="Tree and Queries"></a><a href="https://www.luogu.com.cn/problem/CF375D">Tree and Queries</a></h4><p>先把树转为dfn序，然后就是莫队板子了</p><p>代码不放了</p><h3 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h3><p>就多了一维，注意块长开$O(n^{\frac{2}{3}})$</p><p>好像没了</p><h4 id="P1903-国家集训队-数颜色-维护队列"><a href="#P1903-国家集训队-数颜色-维护队列" class="headerlink" title="P1903 [国家集训队] 数颜色 / 维护队列"></a><a href="https://www.luogu.com.cn/problem/P1903">P1903 [国家集训队] 数颜色 / 维护队列</a></h4><p>板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,res;</span><br><span class="line"><span class="type">int</span> a[maxm],belong[maxm],ans[maxm],cnt[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,t,id;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;g[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(qq a, qq b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (belong[a.l] ^ belong[b.l]) ? belong[a.l] &lt; belong[b.l] : ((belong[a.r] ^ belong[b.r]) ? belong[a.r] &lt; belong[b.r] : a.t &lt; b.t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(++cnt[x]==<span class="number">1</span>) ++res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(--cnt[x]==<span class="number">0</span>) --res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> Q1=<span class="number">0</span>,Q2=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">pow</span>(n,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">read</span>(),belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> opt;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;opt);</span><br><span class="line">x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">&#x27;Q&#x27;</span>)++Q1,q[Q1]=&#123;x,y,Q2,Q1&#125;;</span><br><span class="line"><span class="keyword">else</span> g[++Q2]=&#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q1+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q1;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line"><span class="keyword">while</span>(t&lt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line">++t;</span><br><span class="line"><span class="keyword">if</span>(g[t].x&gt;=q[i].l&amp;&amp;g[t].x&lt;=q[i].r)<span class="built_in">del</span>(a[g[t].x]),<span class="built_in">add</span>(g[t].y);</span><br><span class="line"><span class="built_in">swap</span>(a[g[t].x],g[t].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t&gt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[t].x&gt;=q[i].l&amp;&amp;g[t].x&lt;=q[i].r)<span class="built_in">del</span>(a[g[t].x]),<span class="built_in">add</span>(g[t].y);</span><br><span class="line"><span class="built_in">swap</span>(a[g[t].x],g[t].y);</span><br><span class="line">--t;</span><br><span class="line">&#125;</span><br><span class="line">ans[q[i].id]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q1;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a><a href="https://www.luogu.com.cn/problem/CF940F">Machine Learning</a></h4><p>也是板子，暴力取mex是$O(\sqrt{n})$的，不影响复杂度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> ccnt[N],a[N],belong[N],ans[N],cnt[N],b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,t,id;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(qq a, qq b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (belong[a.l]^belong[b.l])?belong[a.l]&lt;belong[b.l]:((belong[a.r]^belong[b.r])?belong[a.r]&lt;belong[b.r]:a.t&lt;b.t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--ccnt[cnt[x]++];</span><br><span class="line">++ccnt[cnt[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--ccnt[cnt[x]--];</span><br><span class="line">++ccnt[cnt[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ccnt[res]) ++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx=n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> Q1=<span class="number">0</span>,Q2=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">pow</span>(n,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) b[i]=a[i]=<span class="built_in">read</span>(),belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> opt,x,y;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">opt=<span class="built_in">read</span>(),x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)++Q1,q[Q1]=&#123;x,y,Q2,Q1&#125;;</span><br><span class="line"><span class="keyword">else</span> g[++Q2]=&#123;x,y&#125;,b[++idx]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+idx+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+idx+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q2;++i) g[i].y=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,g[i].y)-b;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q1+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q1;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line"><span class="keyword">while</span>(t&lt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line">++t;</span><br><span class="line"><span class="keyword">if</span>(g[t].x&gt;=q[i].l&amp;&amp;g[t].x&lt;=q[i].r)<span class="built_in">del</span>(a[g[t].x]),<span class="built_in">add</span>(g[t].y);</span><br><span class="line"><span class="built_in">swap</span>(a[g[t].x],g[t].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t&gt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[t].x&gt;=q[i].l&amp;&amp;g[t].x&lt;=q[i].r)<span class="built_in">del</span>(a[g[t].x]),<span class="built_in">add</span>(g[t].y);</span><br><span class="line"><span class="built_in">swap</span>(a[g[t].x],g[t].y);</span><br><span class="line">--t;</span><br><span class="line">&#125;</span><br><span class="line">ans[q[i].id]=<span class="built_in">mex</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q1;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h3><p>当莫队的过程中我们无法用合理的代价添加或删除时，可以考虑只删除或不添加莫队，也就是回滚莫队</p><h4 id="歴史の研究"><a href="#歴史の研究" class="headerlink" title="歴史の研究"></a><a href="https://www.luogu.com.cn/problem/AT_joisc2014_c">歴史の研究</a></h4><p>这题我们在插入时可以$O(1)$判断，可删除时便不容易寻找答案，所以我们使用回滚莫队</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">5</span>,maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,Q,t,t1;</span><br><span class="line"><span class="type">int</span> belong[maxm],a[maxm],b[maxm],R[maxn],cnt[maxm],cnt1[maxm],ans[maxm];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query&amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?r&lt;x.r:l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt[x];</span><br><span class="line">res=<span class="built_in">max</span>(res,cnt[x]*b[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt1[x];</span><br><span class="line">res=<span class="built_in">max</span>(res,cnt1[x]*b[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del1</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt1[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;Q;</span><br><span class="line">t=<span class="built_in">sqrt</span>(n*n/Q);</span><br><span class="line">t1=(n<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t1;++i) R[i]=i*t;</span><br><span class="line">R[t1]=n;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[i]=a[i],belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> res,res1,last=<span class="number">0</span>,l=<span class="number">1</span>,r=<span class="number">0</span>,ll;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[q[i].l]==belong[q[i].r])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) <span class="built_in">add1</span>(a[j],ans[q[i].id]);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) <span class="built_in">del1</span>(a[j]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[q[i].l]!=last)</span><br><span class="line">&#123;</span><br><span class="line">last=belong[q[i].l];</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=l;j&lt;=r;++j) <span class="built_in">del</span>(a[j]);</span><br><span class="line">l=R[last]+<span class="number">1</span>,r=l<span class="number">-1</span>;</span><br><span class="line">ll=l;</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(a[++r],res);</span><br><span class="line">res1=res;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(a[--l],res1);</span><br><span class="line"><span class="keyword">while</span>(l&lt;ll) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">ans[q[i].id]=res1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P5906-【模板】回滚莫队-amp-不删除莫队"><a href="#P5906-【模板】回滚莫队-amp-不删除莫队" class="headerlink" title="P5906 【模板】回滚莫队&amp;不删除莫队  "></a><a href="https://www.luogu.com.cn/problem/P5906">P5906 【模板】回滚莫队&amp;不删除莫队  </a></h4><p>板子，没什么说的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,Q,t,t1;</span><br><span class="line"><span class="type">int</span> last,l=<span class="number">1</span>,r,res,res1;</span><br><span class="line"><span class="type">int</span> a[maxm],belong[maxm],b[maxm],R[maxm],ans[maxm],pre[maxm],pre1[maxm],suc[maxm],suc2[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[res.l]?r&lt;res.r:l&lt;res.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) b[i]=a[i]=<span class="built_in">read</span>();</span><br><span class="line">Q=<span class="built_in">read</span>();</span><br><span class="line">t=<span class="built_in">sqrt</span>(n);</span><br><span class="line">t1=(n<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>,a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) q[i]=qq&#123;<span class="built_in">read</span>(),<span class="built_in">read</span>(),i&#125;;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t1;++i) R[i]=i*t;</span><br><span class="line">R[t1]=n;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[q[i].l]==belong[q[i].r])</span><br><span class="line">&#123;</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) pre1[a[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!pre1[a[j]]) pre1[a[j]]=j;</span><br><span class="line">res=<span class="built_in">max</span>(res,j-pre1[a[j]]);</span><br><span class="line">&#125;</span><br><span class="line">ans[q[i].id]=res;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[q[i].l]!=last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=l;j&lt;=r;++j) suc[a[j]]=pre[a[j]]=<span class="number">0</span>;</span><br><span class="line">l=R[belong[q[i].l]]+<span class="number">1</span>,r=l<span class="number">-1</span>;</span><br><span class="line">res1=res=<span class="number">0</span>;</span><br><span class="line">last=belong[q[i].l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r)</span><br><span class="line">&#123;</span><br><span class="line">++r;</span><br><span class="line">suc[a[r]]=r;</span><br><span class="line"><span class="keyword">if</span>(!pre[a[r]]) pre[a[r]]=r;</span><br><span class="line">res=<span class="built_in">max</span>(res,r-pre[a[r]]);</span><br><span class="line">&#125;</span><br><span class="line">res1=res;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!suc[a[--l]]) suc[a[l]]=l;</span><br><span class="line">res1=<span class="built_in">max</span>(res1,suc[a[l]]-l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l&lt;R[belong[q[i].l]]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(suc[a[l]]==l)suc[a[l]]=<span class="number">0</span>;</span><br><span class="line">++l;</span><br><span class="line">&#125;</span><br><span class="line">ans[q[i].id]=res1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P3709-大爷的字符串题"><a href="#P3709-大爷的字符串题" class="headerlink" title="P3709 大爷的字符串题  "></a><a href="https://www.luogu.com.cn/problem/P3709">P3709 大爷的字符串题  </a></h4><p>就是求区间众数的出现次数（普通莫队也能做）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> R[N],block,num,n,m;</span><br><span class="line"><span class="type">int</span> bl[N],idx,a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> bl[l]==bl[res.l]?r&lt;res.r:l&lt;res.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="type">int</span> cnt[N],ans[N],last,l=<span class="number">1</span>,r,res,p;</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n),num=(n<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i) R[i]=i*block;</span><br><span class="line">R[num]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">cin&gt;&gt;a[i],b[i]=a[i],bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bl[q[i].l]==bl[q[i].r])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> res1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) cnt[a[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) res1=<span class="built_in">max</span>(res1,++cnt[a[j]]);</span><br><span class="line">ans[q[i].id]=res1;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(last!=bl[q[i].l])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(r&gt;R[bl[q[i].l]]) cnt[a[r--]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=R[bl[q[i].l]]) cnt[a[l++]]=<span class="number">0</span>;</span><br><span class="line">r=l<span class="number">-1</span>,p=l,res=<span class="number">0</span>,last=bl[q[i].l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) res=<span class="built_in">max</span>(res,++cnt[a[++r]]);</span><br><span class="line"><span class="type">int</span> res1=res;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) res1=<span class="built_in">max</span>(res1,++cnt[a[--l]]);</span><br><span class="line"><span class="keyword">while</span>(l&lt;p) --cnt[a[l++]];</span><br><span class="line">ans[q[i].id]=res1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h3><p><del>就是在树上跑莫队</del></p><p>不，是在欧拉序上莫队，也就多个lca</p><p>此时我才体会到前开后闭有多妙</p><h4 id="COT2-Count-on-a-tree-II"><a href="#COT2-Count-on-a-tree-II" class="headerlink" title="COT2 - Count on a tree II  "></a><a href="https://www.luogu.com.cn/problem/SP10707">COT2 - Count on a tree II  </a></h4><p>板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[N],head[N],ne[N],tot;</span><br><span class="line"><span class="type">int</span> n,m,res;</span><br><span class="line"><span class="type">int</span> ans[N],s[N],v[N],cnt[N],belong[N],block,num,vis[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> st[N],ed[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[++idx]=x,st[x]=idx,f[x][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;f[x][i<span class="number">-1</span>];++i) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa)<span class="built_in">dfs</span>(y,x);</span><br><span class="line">s[++idx]=x,ed[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,lca,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[l]&amp;<span class="number">1</span>?r&lt;x.r:r&gt;x.r):l&lt;x.l;</span><br><span class="line">&#125; </span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> st[x]&lt;=st[y]&amp;&amp;ed[x]&gt;=ed[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(f[x][i]&amp;&amp;!<span class="built_in">pd</span>(f[x][i],y))x=f[x][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[x])&#123;<span class="keyword">if</span>(++cnt[v[x]]==<span class="number">1</span>) ++res;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(--cnt[v[x]]==<span class="number">0</span>) --res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">block=<span class="built_in">sqrt</span>(<span class="number">2</span>*n);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;v[i],b[i]=v[i];</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) v[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,v[i])-b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">lca</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x==k||y==k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(st[y]&lt;st[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">q[i]=&#123;st[x],st[y],<span class="number">0</span>,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[y]&lt;st[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">q[i]=&#123;ed[x],st[y],k,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(s[--l]);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(s[++r]);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">add</span>(s[l++]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">add</span>(s[r--]);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add</span>(q[i].lca);</span><br><span class="line">ans[q[i].id]=res;</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add</span>(q[i].lca);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P4074-WC2013-糖果公园"><a href="#P4074-WC2013-糖果公园" class="headerlink" title="P4074 [WC2013] 糖果公园  "></a><a href="https://www.luogu.com.cn/problem/P4074">P4074 [WC2013] 糖果公园  </a></h4><p>树上带修莫队，<del>超级套娃</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[N],f[N],ne[N],tot,l=<span class="number">1</span>,r,ti;</span><br><span class="line"><span class="type">int</span> n,m,res,Q;</span><br><span class="line"><span class="type">int</span> w[N],c[N];</span><br><span class="line"><span class="type">int</span> ans[N],s[N],v[N],cnt[N],belong[N],block,num,vis[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=f[x],f[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> st[N],ed[N],t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[++t]=x,st[x]=t;</span><br><span class="line">fa[x][<span class="number">0</span>]=dad;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;++i)</span><br><span class="line">fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=dad)<span class="built_in">dfs</span>(y,x);</span><br><span class="line">s[++t]=x,ed[x]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,lca,t,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[r]==belong[x.r]?t&lt;x.t:r&lt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> st[x]&lt;=st[y]&amp;&amp;ed[x]&gt;=ed[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;~i;--i)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">pd</span>(fa[x][i],y)&amp;&amp;fa[x][i])x=fa[x][i];</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=s[x],vis[x]^=<span class="number">1</span>;</span><br><span class="line">res-=w[cnt[c[x]]]*v[c[x]];</span><br><span class="line"><span class="keyword">if</span>(vis[x]) ++cnt[c[x]];</span><br><span class="line"><span class="keyword">else</span> --cnt[c[x]];</span><br><span class="line">res+=w[cnt[c[x]]]*v[c[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x1=st[g[x].x],x2=ed[g[x].x];</span><br><span class="line"><span class="keyword">if</span>(x1&gt;=l&amp;&amp;x1&lt;=r) <span class="built_in">add1</span>(x1);</span><br><span class="line"><span class="keyword">if</span>(x2&gt;=l&amp;&amp;x2&lt;=r) <span class="built_in">add1</span>(x2);</span><br><span class="line"><span class="built_in">swap</span>(c[s[x1]],g[x].y);</span><br><span class="line"><span class="keyword">if</span>(x1&gt;=l&amp;&amp;x1&lt;=r) <span class="built_in">add1</span>(x1);</span><br><span class="line"><span class="keyword">if</span>(x2&gt;=l&amp;&amp;x2&lt;=r) <span class="built_in">add1</span>(x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;Q;</span><br><span class="line"><span class="type">int</span> QQ=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">block=<span class="built_in">pow</span>(<span class="number">2</span>*n,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;w[i],w[i]+=w[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;c[i];</span><br><span class="line"><span class="type">int</span> T=<span class="number">0</span>,ty;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;ty&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(ty)</span><br><span class="line">&#123;</span><br><span class="line">++QQ;</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">lca</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x==k||y==k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(st[y]&lt;st[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">q[QQ]=&#123;st[x],st[y],<span class="number">0</span>,T,QQ&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[y]&lt;st[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">q[QQ]=&#123;ed[x],st[y],k,T,QQ&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> g[++T]=&#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+QQ+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=QQ;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add1</span>(--l);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">add1</span>(l++);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">add1</span>(r--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add1</span>(++r);</span><br><span class="line"><span class="keyword">while</span>(ti&lt;q[i].t) <span class="built_in">up</span>(++ti);</span><br><span class="line"><span class="keyword">while</span>(ti&gt;q[i].t) <span class="built_in">up</span>(ti--);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add1</span>(st[q[i].lca]);</span><br><span class="line">ans[q[i].id]=res;</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add1</span>(st[q[i].lca]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=QQ;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ADAFTBLL-Ada-and-Football"><a href="#ADAFTBLL-Ada-and-Football" class="headerlink" title="ADAFTBLL - Ada and Football  "></a><a href="https://www.luogu.com.cn/problem/SP32952">ADAFTBLL - Ada and Football  </a></h4><p>也是板子</p><p>贴个代码以纪念我块长取$\sqrt{n}$而爆炸的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N],toto;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++toto]=y,ne[toto]=head[x],head[x]=toto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> s[N],idx,st[N],ed[N]; </span><br><span class="line"><span class="type">int</span> n,m,v[N],bl[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[++idx]=x,st[x]=idx,f[x][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;f[x][i];++i) f[x][i+<span class="number">1</span>]=f[f[x][i]][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>(to[i]!=fa) <span class="built_in">dfs</span>(to[i],x);</span><br><span class="line">s[++idx]=x,ed[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;g[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,lca,t,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> bl[l]==bl[x.l]?(bl[r]==bl[x.r]?t&lt;x.t:r&lt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> st[x]&lt;=st[y]&amp;&amp;ed[x]&gt;=ed[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;~i;--i)</span><br><span class="line"><span class="keyword">if</span>(f[x][i]&amp;&amp;!<span class="built_in">pd</span>(f[x][i],y)) x=f[x][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Q,T,ans[N],vis[N],res,cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[x]) res+=(cnt[v[x]]++);</span><br><span class="line"><span class="keyword">else</span> res-=(--cnt[v[x]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,++x,++y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> opt,x,y,i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y,++x;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) g[++T]=&#123;x,y&#125;;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++y,++Q;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">lca</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(k==x||k==y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(st[y]&lt;st[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">q[Q]=&#123;st[x],st[y],<span class="number">0</span>,T,Q&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[y]&lt;st[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">q[Q]=&#123;ed[x],st[y],k,T,Q&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> block=<span class="built_in">pow</span>(<span class="number">2</span>*n,<span class="number">0.666666</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">add</span>(s[l++]);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">add</span>(s[r--]);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(s[--l]);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(s[++r]);</span><br><span class="line"><span class="keyword">while</span>(t&lt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line">++t;</span><br><span class="line"><span class="type">int</span> k1=st[g[t].x],k2=ed[g[t].x];</span><br><span class="line"><span class="keyword">if</span>(k1&gt;=l&amp;&amp;k1&lt;=r) <span class="built_in">add</span>(s[k1]);</span><br><span class="line"><span class="keyword">if</span>(k2&gt;=l&amp;&amp;k2&lt;=r) <span class="built_in">add</span>(s[k2]);</span><br><span class="line"><span class="built_in">swap</span>(v[g[t].x],g[t].y);</span><br><span class="line"><span class="keyword">if</span>(k1&gt;=l&amp;&amp;k1&lt;=r) <span class="built_in">add</span>(s[k1]);</span><br><span class="line"><span class="keyword">if</span>(k2&gt;=l&amp;&amp;k2&lt;=r) <span class="built_in">add</span>(s[k2]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t&gt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k1=st[g[t].x],k2=ed[g[t].x];</span><br><span class="line"><span class="keyword">if</span>(k1&gt;=l&amp;&amp;k1&lt;=r) <span class="built_in">add</span>(s[k1]);</span><br><span class="line"><span class="keyword">if</span>(k2&gt;=l&amp;&amp;k2&lt;=r) <span class="built_in">add</span>(s[k2]);</span><br><span class="line"><span class="built_in">swap</span>(v[g[t].x],g[t].y);</span><br><span class="line"><span class="keyword">if</span>(k1&gt;=l&amp;&amp;k1&lt;=r) <span class="built_in">add</span>(s[k1]);</span><br><span class="line"><span class="keyword">if</span>(k2&gt;=l&amp;&amp;k2&lt;=r) <span class="built_in">add</span>(s[k2]);</span><br><span class="line">--t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add</span>(q[i].lca);</span><br><span class="line">ans[q[i].id]=res;</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add</span>(q[i].lca);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P4175-CTSC2008-网络管理"><a href="#P4175-CTSC2008-网络管理" class="headerlink" title="P4175 [CTSC2008]网络管理  "></a><a href="https://www.luogu.com.cn/problem/P4175">P4175 [CTSC2008]网络管理  </a></h4><p>树上带修第$K$大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[N],f[N],ne[N],tot,l=<span class="number">1</span>,r,ti;</span><br><span class="line"><span class="type">int</span> n,m,res,Q,su,block1,num1,L[N],R[N];</span><br><span class="line"><span class="type">int</span> w[N],c[N];</span><br><span class="line"><span class="type">int</span> ans[N],s[N],v[N],cnt[N],belong[N],block,num,vis[N],b[N],belong1[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">int</span> ss[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=f[x],f[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> st[N],ed[N],t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[++t]=x,st[x]=t;</span><br><span class="line">fa[x][<span class="number">0</span>]=dad;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;++i)</span><br><span class="line">fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=dad)<span class="built_in">dfs</span>(y,x);</span><br><span class="line">s[++t]=x,ed[x]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,lca,t,k,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[r]==belong[x.r]?t&lt;x.t:r&lt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> st[x]&lt;=st[y]&amp;&amp;ed[x]&gt;=ed[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">pd</span>(fa[x][i],y)&amp;&amp;fa[x][i]!=<span class="number">0</span>)x=fa[x][i];</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=s[x],vis[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y=v[x];</span><br><span class="line"><span class="keyword">if</span>(vis[x]) ++cnt[y],++ss[belong1[y]];</span><br><span class="line"><span class="keyword">else</span> --cnt[y],--ss[belong1[y]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">re <span class="type">int</span> res=num1;</span><br><span class="line"><span class="keyword">for</span>(;res;--res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;ss[res]) k-=ss[res];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!res) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=R[res];i&gt;=L[res];--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=cnt[i]) <span class="keyword">return</span> sum[i];</span><br><span class="line"><span class="keyword">else</span> k-=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x1=st[g[x].x],x2=ed[g[x].x];</span><br><span class="line"><span class="keyword">if</span>(x1&gt;=l&amp;&amp;x1&lt;=r) <span class="built_in">add1</span>(x1);</span><br><span class="line"><span class="keyword">if</span>(x2&gt;=l&amp;&amp;x2&lt;=r) <span class="built_in">add1</span>(x2);</span><br><span class="line"><span class="built_in">swap</span>(v[s[x1]],g[x].y);</span><br><span class="line"><span class="keyword">if</span>(x1&gt;=l&amp;&amp;x1&lt;=r) <span class="built_in">add1</span>(x1);</span><br><span class="line"><span class="keyword">if</span>(x2&gt;=l&amp;&amp;x2&lt;=r) <span class="built_in">add1</span>(x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;Q;</span><br><span class="line"><span class="type">int</span> QQ=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">block=<span class="built_in">pow</span>(<span class="number">2</span>*n,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;v[i],sum[++su]=v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T=<span class="number">0</span>,ty;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;ty&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(ty)</span><br><span class="line">&#123;</span><br><span class="line">++QQ;</span><br><span class="line"><span class="keyword">if</span>(st[x]&gt;st[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">lca</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x==k) q[QQ]=&#123;st[x],st[y],<span class="number">0</span>,T,ty,QQ&#125;;</span><br><span class="line"><span class="keyword">else</span>q[QQ]=&#123;ed[x],st[y],k,T,ty,QQ&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> g[++T]=&#123;x,y&#125;,sum[++su]=y;</span><br><span class="line">&#125;</span><br><span class="line">block1=<span class="built_in">pow</span>(su,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line">num1=(su<span class="number">-1</span>)/block1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i) L[i]=(i<span class="number">-1</span>)*block1<span class="number">-1</span>,R[i]=i*block1;</span><br><span class="line">R[num1]=su;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=su;++i) belong1[i]=(i<span class="number">-1</span>)/block1+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+QQ+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(sum+<span class="number">1</span>,sum+su+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(sum+<span class="number">1</span>,sum+su+<span class="number">1</span>)-sum<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) v[i]=<span class="built_in">lower_bound</span>(sum+<span class="number">1</span>,sum+M+<span class="number">1</span>,v[i])-sum;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=T;++i) g[i].y=<span class="built_in">lower_bound</span>(sum+<span class="number">1</span>,sum+M+<span class="number">1</span>,g[i].y)-sum;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=QQ;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add1</span>(--l);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">add1</span>(l++);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">add1</span>(r--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add1</span>(++r);</span><br><span class="line"><span class="keyword">while</span>(ti&lt;q[i].t) <span class="built_in">up</span>(++ti);</span><br><span class="line"><span class="keyword">while</span>(ti&gt;q[i].t) <span class="built_in">up</span>(ti--);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add1</span>(st[q[i].lca]);</span><br><span class="line">ans[q[i].id]=<span class="built_in">ask</span>(q[i].k);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add1</span>(st[q[i].lca]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=QQ;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot;invalid request!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫队二次离线"><a href="#莫队二次离线" class="headerlink" title="莫队二次离线"></a>莫队二次离线</h3><p>$\text{lxl}$神仙发明的黑科技</p><p>先膜为敬</p><h4 id="P4887-【模板】莫队二次离线（第十四分块-前体-）"><a href="#P4887-【模板】莫队二次离线（第十四分块-前体-）" class="headerlink" title="P4887 【模板】莫队二次离线（第十四分块(前体)）  "></a><a href="https://www.luogu.com.cn/problem/P4887">P4887 【模板】莫队二次离线（第十四分块(前体)）  </a></h4><p>板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,block;</span><br><span class="line"><span class="type">int</span> cnt[N],a[N],g[N];</span><br><span class="line"><span class="type">int</span> bl[N];</span><br><span class="line">ll ans[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line">ll v;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> bl[l]!=bl[res.l]?l&lt;res.l:r&lt;res.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ask</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,v,id;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;ask&gt;rg[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getcount</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) ++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k,block=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],bl[i]=i/block;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">14</span>;++i) <span class="keyword">if</span>(<span class="built_in">getcount</span>(i)==k) s.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">g[i]=cnt[a[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:s) ++cnt[a[i]^x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,L=<span class="number">1</span>,R=<span class="number">0</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l=q[i].l,r=q[i].r;</span><br><span class="line"><span class="keyword">if</span>(R&gt;r) rg[L<span class="number">-1</span>].<span class="built_in">push_back</span>((ask)&#123;r+<span class="number">1</span>,R,<span class="number">1</span>,i&#125;);</span><br><span class="line"><span class="keyword">while</span>(R&gt;r) q[i].v-=g[R--];</span><br><span class="line"><span class="keyword">if</span>(R&lt;r) rg[L<span class="number">-1</span>].<span class="built_in">push_back</span>((ask)&#123;R+<span class="number">1</span>,r,<span class="number">-1</span>,i&#125;);</span><br><span class="line"><span class="keyword">while</span>(R&lt;r) q[i].v+=g[++R];</span><br><span class="line"><span class="keyword">if</span>(L&lt;l) rg[R].<span class="built_in">push_back</span>((ask)&#123;L,l<span class="number">-1</span>,<span class="number">-1</span>,i&#125;);</span><br><span class="line"><span class="keyword">while</span>(L&lt;l) q[i].v+=g[L++]+!k;</span><br><span class="line"><span class="keyword">if</span>(L&gt;l) rg[R].<span class="built_in">push_back</span>((ask)&#123;l,L<span class="number">-1</span>,<span class="number">1</span>,i&#125;);</span><br><span class="line"><span class="keyword">while</span>(L&gt;l) q[i].v-=g[--L]+!k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:s) ++cnt[a[i]^x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:rg[i])</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=u.l;p&lt;=u.r;++p) q[u.id].v+=cnt[a[p]]*u.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) q[i].v+=q[i<span class="number">-1</span>].v,ans[q[i].id]=q[i].v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P5047-Ynoi2019-模拟赛-Yuno-loves-sqrt-technology-II"><a href="#P5047-Ynoi2019-模拟赛-Yuno-loves-sqrt-technology-II" class="headerlink" title="P5047 [Ynoi2019 模拟赛] Yuno loves sqrt technology II  "></a><a href="https://www.luogu.com.cn/problem/P5047">P5047 [Ynoi2019 模拟赛] Yuno loves sqrt technology II  </a></h4><p>也是板子，贴个代码以纪念把全局变量打成局部变量而爆炸的我</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>,N1=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,c[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _n)</span></span>&#123;n=_n;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[i]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) c[x]+=v;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="type">int</span> res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) res+=c[x];<span class="keyword">return</span> res;&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="type">int</span> block,n,m,a[N];</span><br><span class="line"><span class="type">int</span> bl[N],Lp[N1],Rp[N1],bk;</span><br><span class="line">ll cnt[N],tag[N1];</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line">ll ans[N],lv[N],rv[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;res)<span class="type">const</span>&#123;<span class="keyword">return</span> bl[l]==bl[res.l]?r&lt;res.r:l&lt;res.l;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rag</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id,v;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;rag&gt;rg[<span class="number">2</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addL</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;=Lp[bl[x]];--i) ++cnt[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl[x]<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i) ++tag[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addR</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=Rp[bl[x]];++i) ++cnt[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl[x]+<span class="number">1</span>;i&lt;=bl[n];++i) ++tag[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cnt[x]+tag[bl[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],num[i]=a[i];</span><br><span class="line"><span class="built_in">sort</span>(num+<span class="number">1</span>,num+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(num+<span class="number">1</span>,num+n+<span class="number">1</span>)-num<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(num+<span class="number">1</span>,num+M+<span class="number">1</span>,a[i])-num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=bl[n];++i) Lp[i]=Rp[i<span class="number">-1</span>]+<span class="number">1</span>,Rp[i]=i*block;</span><br><span class="line">Rp[bl[n]]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line">t.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">lv[i]=lv[i<span class="number">-1</span>]+t.<span class="built_in">ask</span>(n)-t.<span class="built_in">ask</span>(a[i]),t.<span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">t.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">rv[i]=rv[i+<span class="number">1</span>]+t.<span class="built_in">ask</span>(a[i]<span class="number">-1</span>),t.<span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">1</span>,R=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l=q[i].l,r=q[i].r,id=q[i].id;</span><br><span class="line"><span class="keyword">if</span>(R&lt;r)</span><br><span class="line">rg[<span class="number">0</span>][L<span class="number">-1</span>].<span class="built_in">push_back</span>((rag)&#123;R+<span class="number">1</span>,r,id,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(R&gt;r)</span><br><span class="line">rg[<span class="number">0</span>][L<span class="number">-1</span>].<span class="built_in">push_back</span>((rag)&#123;r+<span class="number">1</span>,R,id,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(L&gt;l)</span><br><span class="line">rg[<span class="number">1</span>][r+<span class="number">1</span>].<span class="built_in">push_back</span>((rag)&#123;l,L<span class="number">-1</span>,id,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(l&gt;L)</span><br><span class="line">rg[<span class="number">1</span>][r+<span class="number">1</span>].<span class="built_in">push_back</span>((rag)&#123;L,l<span class="number">-1</span>,id,<span class="number">1</span>&#125;);</span><br><span class="line">ans[id]+=rv[l]-rv[L]+lv[r]-lv[R];</span><br><span class="line">L=l,R=r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">addL</span>(a[i]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:rg[<span class="number">0</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=x.l;j&lt;=x.r;++j) res+=<span class="built_in">ask</span>(a[j]);</span><br><span class="line">ans[x.id]+=x.v*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="keyword">sizeof</span> tag);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">addR</span>(a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:rg[<span class="number">1</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=x.l;j&lt;=x.r;++j) res+=<span class="built_in">ask</span>(a[j]);</span><br><span class="line">ans[x.id]+=x.v*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ans[q[i].id]+=ans[q[i<span class="number">-1</span>].id];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P5501-LnOI2019-来者不拒，去者不追"><a href="#P5501-LnOI2019-来者不拒，去者不追" class="headerlink" title="P5501 [LnOI2019]来者不拒，去者不追"></a><a href="https://www.luogu.com.cn/problem/P5501">P5501 [LnOI2019]来者不拒，去者不追</a></h4><p>先咕着</p><h3 id="莫队-bitset"><a href="#莫队-bitset" class="headerlink" title="莫队+bitset"></a>莫队+bitset</h3><p>有些题我们能在$O(n\sqrt{n}+\frac{n^{2}}{w})$的时间复杂度内解决问题</p><p>则可用莫队+$bitset$</p><h4 id="P3674-小清新人渣的本愿"><a href="#P3674-小清新人渣的本愿" class="headerlink" title="P3674 小清新人渣的本愿  "></a><a href="https://www.luogu.com.cn/problem/P3674">P3674 小清新人渣的本愿  </a></h4><p>板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">5</span>,N=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[maxm],belong[maxm],ans[maxm],cnt[maxm];</span><br><span class="line">bitset&lt;maxm&gt;s,s1,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> opt,l,r,x,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[l]&amp;<span class="number">1</span>?r&lt;x.r:r&gt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(++cnt[a[x]]==<span class="number">1</span>) s[a[x]]=s1[N-a[x]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(--cnt[a[x]]==<span class="number">0</span>) s[a[x]]=s1[N-a[x]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">read</span>(),belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) q[i]=qq&#123;<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>(),i&#125;;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">del</span>(l++);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(--l);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del</span>(r--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(++r);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=s&amp;(s&lt;&lt;q[i].x);</span><br><span class="line">ans[q[i].id]=k.<span class="built_in">any</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=s&amp;(s1&gt;&gt;N-q[i].x);</span><br><span class="line">ans[q[i].id]=k.<span class="built_in">any</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j*j&lt;=q[i].x;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].x%j==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]&amp;&amp;s[q[i].x/j])</span><br><span class="line">&#123;</span><br><span class="line">ans[q[i].id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;hana\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;bi\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P5355-Ynoi2017-由乃的玉米田"><a href="#P5355-Ynoi2017-由乃的玉米田" class="headerlink" title="P5355 [Ynoi2017] 由乃的玉米田  "></a><a href="https://www.luogu.com.cn/problem/P5355">P5355 [Ynoi2017] 由乃的玉米田  </a></h4><p>就是在上题基础上多个根号分治</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">5</span>,N=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m,mx;</span><br><span class="line"><span class="type">int</span> a[maxm],belong[maxm],ans[maxm],cnt[maxm];</span><br><span class="line"><span class="type">int</span> la[maxm],res[maxm];</span><br><span class="line">bitset&lt;maxm&gt;s,s1,k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;ss[N]; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> opt,l,r,x,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[l]&amp;<span class="number">1</span>?r&lt;x.r:r&gt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">q1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,x,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> q1&amp;b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q1[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(++cnt[a[x]]==<span class="number">1</span>) s[a[x]]=s1[N-a[x]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(--cnt[a[x]]==<span class="number">0</span>) s[a[x]]=s1[N-a[x]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> cyq=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">read</span>(),belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>,mx=<span class="built_in">max</span>(mx,a[i]);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) q[i]=qq&#123;<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>(),i&#125;;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">del</span>(l++);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(--l);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del</span>(r--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(++r);</span><br><span class="line"><span class="keyword">if</span>(q[i].opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=s&amp;(s&lt;&lt;q[i].x);</span><br><span class="line">ans[q[i].id]=k.<span class="built_in">any</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=s&amp;(s1&gt;&gt;N-q[i].x);</span><br><span class="line">ans[q[i].id]=k.<span class="built_in">any</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j*j&lt;=q[i].x;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].x%j==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]&amp;&amp;s[q[i].x/j])</span><br><span class="line">&#123;</span><br><span class="line">ans[q[i].id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].x==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(q[i].x&lt;=t)</span><br><span class="line">&#123;</span><br><span class="line">q1[++cyq]=&#123;q[i].l,q[i].r,q[i].x,q[i].id&#125;;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j*q[i].x&lt;=mx;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]&amp;&amp;s[j*q[i].x])</span><br><span class="line">&#123;</span><br><span class="line">ans[q[i].id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q1+<span class="number">1</span>,q1+<span class="number">1</span>+cyq);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=cyq;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q1[i].x==q1[i<span class="number">-1</span>].x)</span><br><span class="line">&#123;</span><br><span class="line">ans[q1[i].id]=q1[i].l&lt;=res[q1[i].r];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(res,<span class="number">0</span>,<span class="keyword">sizeof</span> res);</span><br><span class="line"><span class="built_in">memset</span>(la,<span class="number">0</span>,<span class="keyword">sizeof</span> la);</span><br><span class="line">l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">la[a[j]]=j;</span><br><span class="line"><span class="keyword">if</span>(a[j]%q1[i].x==<span class="number">0</span>) l=<span class="built_in">max</span>(l,la[a[j]/q1[i].x]);</span><br><span class="line"><span class="keyword">if</span>(a[j]*q1[i].x&lt;=mx) l=<span class="built_in">max</span>(l,la[a[j]*q1[i].x]);</span><br><span class="line">res[j]=l;</span><br><span class="line">&#125;</span><br><span class="line">ans[q1[i].id]=q1[i].l&lt;=res[q1[i].r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;yuno\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;yumi\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P4688-Ynoi2016-掉进兔子洞"><a href="#P4688-Ynoi2016-掉进兔子洞" class="headerlink" title="P4688 [Ynoi2016] 掉进兔子洞 "></a><a href="https://www.luogu.com.cn/problem/P4688">P4688 [Ynoi2016] 掉进兔子洞 </a></h4><p>先咕着</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kruskal重构树</title>
      <link href="//OI/kruskal%E9%87%8D%E6%9E%84%E6%A0%91/"/>
      <url>//OI/kruskal%E9%87%8D%E6%9E%84%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>感觉再颓下去可以死家里</p><span id="more"></span><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>以下内容最好搭配<a href="https://www.luogu.com.cn/blog/me-immortal/kruskal-chong-gou-shu">洛谷日报</a>和<a href="https://oi-wiki.org//graph/mst/#kruskal-%E9%87%8D%E6%9E%84%E6%A0%91">oi-wiki</a>食用</p><p>理论就不讲了吧。。。<del>逃</del></p><p>讲一下性质：</p><p>原图中两个点间所有路径上的边最大权值的最小值=最小生成树上两点简单路径的边最大权值= $\text{Kruskal}$重构树上两点 $\text{LCA}$的点权。</p><p>emm，好像就没了</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="P1967-NOIP2013-提高组-货车运输"><a href="#P1967-NOIP2013-提高组-货车运输" class="headerlink" title="P1967 [NOIP2013 提高组] 货车运输"></a><a href="https://www.luogu.com.cn/problem/P1967">P1967 [NOIP2013 提高组] 货车运输</a></h4><p>纯板子，主要是贴个代码（但这码风是真的丑）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> tot,ne[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],head[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>],v[N],fa[N],vis[N];</span><br><span class="line"><span class="type">int</span> idx,tin[N],tout[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tin[x]=++idx,vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;f[x][i];++i) f[x][i+<span class="number">1</span>]=f[f[x][i]][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==f[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">f[y][<span class="number">0</span>]=x,<span class="built_in">dfs</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">tout[x]=++idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> tin[x]&lt;=tin[y]&amp;&amp;tout[x]&gt;=tout[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(f[x][i]&amp;&amp;!<span class="built_in">pd</span>(f[x][i],y)) x=f[x][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> z&gt;res.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ed[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Ex_kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cnt=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) fa[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(ed+<span class="number">1</span>,ed+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">find</span>(ed[i].x),y=<span class="built_in">find</span>(ed[i].y);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">fa[x]=fa[y]=++cnt,v[cnt]=ed[i].z;</span><br><span class="line"><span class="built_in">add</span>(cnt,x),<span class="built_in">add</span>(x,cnt);</span><br><span class="line"><span class="built_in">add</span>(cnt,y),<span class="built_in">add</span>(y,cnt);</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">2</span>*n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cnt;i;--i) <span class="keyword">if</span>(!vis[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;ed[i].x&gt;&gt;ed[i].y&gt;&gt;ed[i].z;</span><br><span class="line"><span class="built_in">Ex_kruskal</span>();</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">cout&lt;&lt;(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y)?v[<span class="built_in">lca</span>(x,y)]:<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P4768-NOI2018-归程"><a href="#P4768-NOI2018-归程" class="headerlink" title="P4768 [NOI2018] 归程"></a><a href="https://www.luogu.com.cn/problem/P4768">P4768 [NOI2018] 归程</a></h4><p>看到最短路，先考虑 <del>SPFA</del> $dijkstra$</p><p>然后预处理出源点到每个点的最短路，在上面倍增就行了</p><p>这代码死活35pts过不去，改天再写一遍</p><p>（果然是码风太丑所以别人不帮忙调吗）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,val[N];</span><br><span class="line"><span class="type">int</span> tin[N],tout[N],idx;</span><br><span class="line"><span class="type">int</span> ne[N],head[N],to[N],tot;</span><br><span class="line"><span class="type">int</span> p[N],e[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>],vis[N],cnt,h[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z,v;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> z&gt;res.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ed[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;++i) head[i]=vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[++tot]=head[x],head[x]=tot,e[tot]=z,to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n*<span class="number">2</span>;++i) val[i]=<span class="number">1e18</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">top</span>().second;q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[x]++) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">            <span class="keyword">if</span>(val[x]+e[i]&lt;val[y=to[i]]) val[y]=val[x]+e[i],q.<span class="built_in">push</span>(<span class="built_in">mp</span>(-val[y],y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[x]==x?x:p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>]=fa,vis[x]=<span class="number">1</span>,tin[x]=++idx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;f[x][i];++i) f[x][i+<span class="number">1</span>]=f[f[x][i]][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span>((y=to[i])!=fa) <span class="built_in">dfs</span>(y,x),val[x]=<span class="built_in">min</span>(val[x],val[y]);</span><br><span class="line">    tout[x]=++idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Ex_kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=n,tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;++i) p[i]=i,vis[i]=head[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(ed+<span class="number">1</span>,ed+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(ed[i].x),y=<span class="built_in">find</span>(ed[i].y);</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        p[x]=p[y]=++cnt,h[cnt]=ed[i].z;</span><br><span class="line">        <span class="built_in">add</span>(cnt,x),<span class="built_in">add</span>(cnt,y);</span><br><span class="line">        <span class="built_in">add</span>(y,cnt),<span class="built_in">add</span>(x,cnt);</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">2</span>*n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) <span class="keyword">if</span>(!vis[i]) <span class="built_in">dfs</span>(<span class="built_in">find</span>(i),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]&amp;&amp;h[f[x][i]]&gt;v) x=f[x][i];</span><br><span class="line">    <span class="keyword">return</span> val[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  freopen(&quot;return5.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//  freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) </span><br><span class="line">            cin&gt;&gt;ed[i].x&gt;&gt;ed[i].y&gt;&gt;ed[i].v&gt;&gt;ed[i].z,</span><br><span class="line">            <span class="built_in">add</span>(ed[i].x,ed[i].y,ed[i].v),</span><br><span class="line">            <span class="built_in">add</span>(ed[i].y,ed[i].x,ed[i].v);</span><br><span class="line">        <span class="built_in">dijkstra</span>();</span><br><span class="line">        <span class="built_in">Ex_kruskal</span>();</span><br><span class="line">        <span class="type">int</span> Q,K,S,ans=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;Q&gt;&gt;K&gt;&gt;S;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="keyword">while</span>(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            x=(x+K*ans<span class="number">-1</span>)%n+<span class="number">1</span>,y=(y+K*ans)%(S+<span class="number">1</span>);</span><br><span class="line">            cout&lt;&lt;(ans=<span class="built_in">ask</span>(x,y))&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P4197-Peaks"><a href="#P4197-Peaks" class="headerlink" title="P4197 Peaks"></a><a href="https://www.luogu.com.cn/problem/P4197">P4197 Peaks</a></h4><p>这道题我们先倍增找到能跳到的最远祖先，然后主席树查第K大即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> z&lt;res.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ed[N];</span><br><span class="line"><span class="type">int</span> p[N],val[N],vis[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>],to[N],head[N],ne[N],tot;</span><br><span class="line"><span class="type">int</span> tin[N],tout[N],idx;</span><br><span class="line"><span class="type">int</span> n,m,q,cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p[x]==x?x:p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ne[++tot]=head[x],head[x]=tot,to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[x][<span class="number">0</span>]=fa,vis[x]=<span class="number">1</span>,tin[x]=++idx;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;f[x][i];++i) f[x][i+<span class="number">1</span>]=f[f[x][i]][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y=to[i];i;y=to[i=ne[i]])</span><br><span class="line"><span class="keyword">if</span>(y!=fa) <span class="built_in">dfs</span>(y,x);</span><br><span class="line">tout[x]=++idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Ex_kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;++i) p[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(ed+<span class="number">1</span>,ed+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">find</span>(ed[i].x),y=<span class="built_in">find</span>(ed[i].y);</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">p[x]=p[y]=++cnt,val[cnt]=ed[i].z;</span><br><span class="line"><span class="built_in">add</span>(cnt,x),<span class="built_in">add</span>(cnt,y);</span><br><span class="line"><span class="built_in">add</span>(y,cnt),<span class="built_in">add</span>(x,cnt);</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">2</span>*n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) <span class="keyword">if</span>(!vis[i]) <span class="built_in">dfs</span>(<span class="built_in">find</span>(i),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id[N],nid[N],sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">id[++idx]=x,nid[x]=idx,sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y=to[i];i;y=to[i=ne[i]])</span><br><span class="line"><span class="keyword">if</span>(y!=fa) <span class="built_in">dfs1</span>(y,x),sz[x]+=sz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> root[N],xb;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k=++xb]=t[p];</span><br><span class="line">t[k].v+=v;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">ins</span>(t[k].lc,t[p].lc,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ins</span>(t[k].rc,t[p].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) <span class="keyword">if</span>(!vis[i]) <span class="built_in">dfs1</span>(<span class="built_in">find</span>(i),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(id[i]&lt;=n) <span class="built_in">ins</span>(root[i],root[i<span class="number">-1</span>],<span class="number">1</span>,INF,val[id[i]],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> root[i]=root[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(f[x][i]&amp;&amp;val[f[x][i]]&lt;=v) x=f[x][i];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> k1=t[t[p].rc].v-t[t[q].rc].v,mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k1&gt;=k) <span class="keyword">return</span> <span class="built_in">ask</span>(t[p].rc,t[q].rc,mid+<span class="number">1</span>,r,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">ask</span>(t[p].lc,t[q].lc,l,mid,k-k1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="built_in">find1</span>(x,v);</span><br><span class="line"><span class="keyword">return</span> t[root[nid[p]+sz[p]<span class="number">-1</span>]].v-t[root[nid[p]<span class="number">-1</span>]].v&lt;k?<span class="number">-1</span>:<span class="built_in">ask</span>(root[nid[p]+sz[p]<span class="number">-1</span>],root[nid[p]<span class="number">-1</span>],<span class="number">1</span>,INF,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;val[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;ed[i].x&gt;&gt;ed[i].y&gt;&gt;ed[i].z;</span><br><span class="line"><span class="built_in">Ex_kruskal</span>();</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(x,y,z)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一篇学习笔记，狗屁不通，请轻喷</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2022游记</title>
      <link href="//%E6%B8%B8%E8%AE%B0/NOIP2022%E6%B8%B8%E8%AE%B0/"/>
      <url>//%E6%B8%B8%E8%AE%B0/NOIP2022%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>游了，寄了</p><span id="more"></span><p>每个人都不得不面对这些问题。 在面对这种问题时， 既然如此， 一般来讲，我们都必须务必慎重的考虑考虑。  在这种困难的抉择下，本人思来想去，寝食难安。 那么， 吉格·金克拉曾经提到过，如果你能做梦，你就能实现它。这句话语虽然很短，但令我浮想联翩。  培根说过一句富有哲理的话，要知道对好事的称颂过于夸大，也会招来人们的反感轻蔑和嫉妒。我希望诸位也能好好地体会这句话。 生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。 我们不得不面对一个非常尴尬的事实，那就是。 </p><p>　　经过上述讨论，  一般来讲，我们都必须务必慎重的考虑考虑。 要想清楚，NOIP2022 游记，到底是一种怎么样的存在。  我们都知道，只要有意义，那么就必须慎重考虑。 在这种困难的抉择下，本人思来想去，寝食难安。 总结的来说，  俾斯麦曾经提到过，失败是坚忍的最后考验。这似乎解答了我的疑惑。 一般来说， 问题的关键究竟为何？ NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。  塞涅卡曾经说过，生命如同寓言，其价值不在与长短，而在与内容。这句话语虽然很短，但令我浮想联翩。 NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 总结的来说，  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 爱尔兰曾经提到过，越是无能的人，越喜欢挑剔别人的错儿。这似乎解答了我的疑惑。  我们不得不面对一个非常尴尬的事实，那就是， 带着这些问题，我们来审视一下NOIP2022 游记。 了解清楚NOIP2022  游记到底是一种怎么样的存在，是解决一切问题的关键。 我们不得不面对一个非常尴尬的事实，那就是， 就我个人来说，NOIP2022  游记对我的意义，不能不说非常重大。 总结的来说，  苏轼在不经意间这样说过，古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句话语虽然很短，但令我浮想联翩。 </p><p>　　现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 每个人都不得不面对这些问题。 在面对这种问题时， NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 NOIP2022 游记，到底应该如何实现。  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。  塞涅卡说过一句富有哲理的话，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。我希望诸位也能好好地体会这句话。  达尔文曾经提到过，敢于浪费哪怕一个钟头时间的人，说明他还不懂得珍惜生命的全部价值。这似乎解答了我的疑惑。 了解清楚NOIP2022  游记到底是一种怎么样的存在，是解决一切问题的关键。  海贝尔说过一句富有哲理的话，人生就是学校。在那里，与其说好的教师是幸福，不如说好的教师是不幸。这似乎解答了我的疑惑。  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 而这些并不是完全重要，更加重要的问题是， 那么， 生活中，若NOIP2022  游记出现了，我们就不得不考虑它出现了的事实。 NOIP2022 游记因何而发生？ 经过上述讨论， 而这些并不是完全重要，更加重要的问题是，  我们不得不面对一个非常尴尬的事实，那就是， 经过上述讨论， 带着这些问题，我们来审视一下NOIP2022 游记。 NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 问题的关键究竟为何？  拿破仑·希尔曾经提到过，不要等待，时机永远不会恰到好处。我希望诸位也能好好地体会这句话。 带着这些问题，我们来审视一下NOIP2022 游记。  我认为， 普列姆昌德曾经说过，希望的灯一旦熄灭，生活刹那间变成了一片黑暗。带着这句话，我们还要更加慎重的审视这个问题： 从这个角度来看，  要想清楚，NOIP2022 游记，到底是一种怎么样的存在。 那么， 问题的关键究竟为何？ 现在，解决NOIP2022  游记的问题，是非常非常重要的。 所以， NOIP2022 游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 </p><p>　　每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，NOIP2022 游记，到底是一种怎么样的存在。 经过上述讨论， 现在，解决NOIP2022  游记的问题，是非常非常重要的。 所以， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来说，  塞内加在不经意间这样说过，勇气通往天堂，怯懦通往地狱。这句话语虽然很短，但令我浮想联翩。 了解清楚NOIP2022  游记到底是一种怎么样的存在，是解决一切问题的关键。 既然如何， 从这个角度来看， 我认为， 带着这些问题，我们来审视一下NOIP2022 游记。 笛卡儿曾经说过，读一切好书，就是和许多高尚的人谈话。这不禁令我深思。  贝多芬曾经说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。这不禁令我深思。  迈克尔·F·斯特利说过一句富有哲理的话，最具挑战性的挑战莫过于提升自我。这启发了我， 从这个角度来看， 这样看来，  富勒曾经说过，苦难磨炼一些人，也毁灭另一些人。这似乎解答了我的疑惑。  卡耐基说过一句富有哲理的话，一个不注意小事情的人，永远不会成就大事业。这句话语虽然很短，但令我浮想联翩。 既然如此， 了解清楚NOIP2022  游记到底是一种怎么样的存在，是解决一切问题的关键。 既然如何，  培根曾经说过，深窥自己的心，而后发觉一切的奇迹在你自己。带着这句话，我们还要更加慎重的审视这个问题：  伏尔泰在不经意间这样说过，不经巨大的困难，不会有伟大的事业。我希望诸位也能好好地体会这句话。 带着这些问题，我们来审视一下NOIP2022  游记。 达尔文曾经提到过，敢于浪费哪怕一个钟头时间的人，说明他还不懂得珍惜生命的全部价值。这似乎解答了我的疑惑。 每个人都不得不面对这些问题。  在面对这种问题时， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 那么， 要想清楚，NOIP2022 游记，到底是一种怎么样的存在。  了解清楚NOIP2022 游记到底是一种怎么样的存在，是解决一切问题的关键。 我们不得不面对一个非常尴尬的事实，那就是，  我们不得不面对一个非常尴尬的事实，那就是， 那么， 总结的来说， NOIP2022 游记的发生，到底需要如何做到，不NOIP2022  游记的发生，又会如何产生。 一般来说， 既然如何， 要想清楚，NOIP2022 游记，到底是一种怎么样的存在。 既然如此，  对我个人而言，NOIP2022 游记不仅仅是一个重大的事件，还可能会改变我的人生。 NOIP2022 游记因何而发生？  就我个人来说，NOIP2022 游记对我的意义，不能不说非常重大。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。  一般来讲，我们都必须务必慎重的考虑考虑。 NOIP2022 游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。  生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。  NOIP2022 游记，发生了会如何，不发生又会如何。 每个人都不得不面对这些问题。 在面对这种问题时， 对我个人而言，NOIP2022  游记不仅仅是一个重大的事件，还可能会改变我的人生。 对我个人而言，NOIP2022 游记不仅仅是一个重大的事件，还可能会改变我的人生。  就我个人来说，NOIP2022 游记对我的意义，不能不说非常重大。 总结的来说， 总结的来说， 生活中，若NOIP2022  游记出现了，我们就不得不考虑它出现了的事实。 我认为。 </p><p>　　那么，  莎士比亚曾经说过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 一般来说，  屠格涅夫说过一句富有哲理的话，你想成为幸福的人吗？但愿你首先学会吃得起苦。这启发了我，  海贝尔说过一句富有哲理的话，人生就是学校。在那里，与其说好的教师是幸福，不如说好的教师是不幸。我希望诸位也能好好地体会这句话。 NOIP2022 游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 我们不得不面对一个非常尴尬的事实，那就是，  歌德曾经提到过，没有人事先了解自己到底有多大的力量，直到他试过以后才知道。我希望诸位也能好好地体会这句话。  带着这些问题，我们来审视一下NOIP2022 游记。 问题的关键究竟为何？  阿卜·日·法拉兹说过一句富有哲理的话，学问是异常珍贵的东西，从任何源泉吸收都不可耻。这启发了我，  我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。  NOIP2022 游记因何而发生？ 而这些并不是完全重要，更加重要的问题是， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。  NOIP2022 游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 从这个角度来看， 既然如此， NOIP2022 游记因何而发生？  我认为， 一般来说， 现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 一般来说， 每个人都不得不面对这些问题。  在面对这种问题时， 莫扎特在不经意间这样说过，谁和我一样用功，谁就会和我一样成功。带着这句话，我们还要更加慎重的审视这个问题： NOIP2022 游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 一般来讲，我们都必须务必慎重的考虑考虑。  对我个人而言，NOIP2022 游记不仅仅是一个重大的事件，还可能会改变我的人生。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 爱迪生在不经意间这样说过，失败也是我需要的，它和成功对我一样有价值。我希望诸位也能好好地体会这句话。 既然如此， 所谓NOIP2022  游记，关键是NOIP2022 游记需要如何写。 一般来说， 总结的来说， NOIP2022 游记的发生，到底需要如何做到，不NOIP2022  游记的发生，又会如何产生。 </p><p>　　我们不得不面对一个非常尴尬的事实，那就是， 这样看来，  阿卜·日·法拉兹在不经意间这样说过，学问是异常珍贵的东西，从任何源泉吸收都不可耻。这不禁令我深思。  我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 既然如何， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。  本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。  塞涅卡说过一句富有哲理的话，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。这不禁令我深思。 NOIP2022 游记，到底应该如何实现。  我认为， 生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。  左拉说过一句富有哲理的话，生活的道路一旦选定，就要勇敢地走到底，决不回头。这不禁令我深思。  伏尔泰说过一句富有哲理的话，坚持意志伟大的事业需要始终不渝的精神。这似乎解答了我的疑惑。 既然如此，  在这种困难的抉择下，本人思来想去，寝食难安。  笛卡儿在不经意间这样说过，我的努力求学没有得到别的好处，只不过是愈来愈发觉自己的无知。我希望诸位也能好好地体会这句话。  达·芬奇曾经说过，大胆和坚定的决心能够抵得上武器的精良。带着这句话，我们还要更加慎重的审视这个问题：  卡耐基曾经说过，一个不注意小事情的人，永远不会成就大事业。这句话语虽然很短，但令我浮想联翩。 这样看来， 生活中，若NOIP2022  游记出现了，我们就不得不考虑它出现了的事实。 马云在不经意间这样说过，最大的挑战和突破在于用人，而用人最大的突破在于信任人。这启发了我，  莎士比亚曾经提到过，意志命运往往背道而驰，决心到最后会全部推倒。这不禁令我深思。  莎士比亚在不经意间这样说过，意志命运往往背道而驰，决心到最后会全部推倒。这句话语虽然很短，但令我浮想联翩。  我们都知道，只要有意义，那么就必须慎重考虑。 NOIP2022 游记因何而发生？ 我们都知道，只要有意义，那么就必须慎重考虑。  对我个人而言，NOIP2022 游记不仅仅是一个重大的事件，还可能会改变我的人生。 可是，即使是这样，NOIP2022  游记的出现仍然代表了一定的意义。 对我个人而言，NOIP2022 游记不仅仅是一个重大的事件，还可能会改变我的人生。 NOIP2022  游记，到底应该如何实现。 苏轼曾经提到过，古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句话语虽然很短，但令我浮想联翩。  要想清楚，NOIP2022 游记，到底是一种怎么样的存在。  易卜生曾经说过，伟大的事业，需要决心，能力，组织和责任感。我希望诸位也能好好地体会这句话。 所谓NOIP2022 游记，关键是NOIP2022  游记需要如何写。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。 问题的关键究竟为何？ 现在，解决NOIP2022  游记的问题，是非常非常重要的。 所以， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。  别林斯基在不经意间这样说过，好的书籍是最贵重的珍宝。这似乎解答了我的疑惑。 既然如此， 在这种困难的抉择下，本人思来想去，寝食难安。  总结的来说， 对我个人而言，NOIP2022 游记不仅仅是一个重大的事件，还可能会改变我的人生。  迈克尔·F·斯特利在不经意间这样说过，最具挑战性的挑战莫过于提升自我。我希望诸位也能好好地体会这句话。  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 总结的来说， 在这种困难的抉择下，本人思来想去，寝食难安。 从这个角度来看，  我们都知道，只要有意义，那么就必须慎重考虑。 黑格尔曾经说过，只有永远躺在泥坑里的人，才不会再掉进坑里。这似乎解答了我的疑惑。 既然如何，  问题的关键究竟为何？ 在这种困难的抉择下，本人思来想去，寝食难安。 而这些并不是完全重要，更加重要的问题是， 我认为，  本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。  而这些并不是完全重要，更加重要的问题是， 生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。  本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 NOIP2022 游记的发生，到底需要如何做到，不NOIP2022  游记的发生，又会如何产生。 </p><p>　　我认为， 一般来讲，我们都必须务必慎重的考虑考虑。  鲁巴金在不经意间这样说过，读书是在别人思想的帮助下，建立起自己的思想。带着这句话，我们还要更加慎重的审视这个问题： NOIP2022  游记因何而发生？ 总结的来说， 在这种困难的抉择下，本人思来想去，寝食难安。 既然如何， 经过上述讨论， 要想清楚，NOIP2022  游记，到底是一种怎么样的存在。 现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 那么， NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 NOIP2022 游记，发生了会如何，不发生又会如何。  本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 那么， 要想清楚，NOIP2022 游记，到底是一种怎么样的存在。  要想清楚，NOIP2022 游记，到底是一种怎么样的存在。 苏轼曾经提到过，古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这不禁令我深思。  苏轼曾经说过，古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句话语虽然很短，但令我浮想联翩。 NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 了解清楚NOIP2022 游记到底是一种怎么样的存在，是解决一切问题的关键。 从这个角度来看， NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 这样看来， 要想清楚，NOIP2022  游记，到底是一种怎么样的存在。 卡耐基曾经说过，一个不注意小事情的人，永远不会成就大事业。这不禁令我深思。  维龙曾经说过，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。这启发了我， 一般来说， 问题的关键究竟为何？ 一般来说，  NOIP2022 游记，到底应该如何实现。 既然如何， 生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。  了解清楚NOIP2022 游记到底是一种怎么样的存在，是解决一切问题的关键。 生活中，若NOIP2022  游记出现了，我们就不得不考虑它出现了的事实。 NOIP2022 游记因何而发生？ 而这些并不是完全重要，更加重要的问题是，  了解清楚NOIP2022 游记到底是一种怎么样的存在，是解决一切问题的关键。 可是，即使是这样，NOIP2022  游记的出现仍然代表了一定的意义。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 了解清楚NOIP2022  游记到底是一种怎么样的存在，是解决一切问题的关键。 要想清楚，NOIP2022 游记，到底是一种怎么样的存在。 既然如何， 一般来说，  问题的关键究竟为何？ 在这种困难的抉择下，本人思来想去，寝食难安。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。  塞涅卡在不经意间这样说过，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。这似乎解答了我的疑惑。  孔子说过一句富有哲理的话，知之者不如好之者，好之者不如乐之者。这不禁令我深思。  赫尔普斯在不经意间这样说过，有时候读书是一种巧妙地避开思考的方法。我希望诸位也能好好地体会这句话。 </p><p>　　那么， 这样看来， 一般来说， 我们都知道，只要有意义，那么就必须慎重考虑。  斯宾诺莎说过一句富有哲理的话，最大的骄傲于最大的自卑都表示心灵的最软弱无力。这句话语虽然很短，但令我浮想联翩。 现在，解决NOIP2022  游记的问题，是非常非常重要的。 所以， 每个人都不得不面对这些问题。 在面对这种问题时， 既然如此， NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。 NOIP2022 游记，发生了会如何，不发生又会如何。  现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 我们不得不面对一个非常尴尬的事实，那就是， NOIP2022  游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。  卢梭说过一句富有哲理的话，浪费时间是一桩大罪过。这句话语虽然很短，但令我浮想联翩。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。  要想清楚，NOIP2022 游记，到底是一种怎么样的存在。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。  非洲在不经意间这样说过，最灵繁的人也看不见自己的背脊。带着这句话，我们还要更加慎重的审视这个问题： 要想清楚，NOIP2022  游记，到底是一种怎么样的存在。 塞涅卡曾经说过，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。带着这句话，我们还要更加慎重的审视这个问题：  从这个角度来看， NOIP2022 游记，到底应该如何实现。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。  笛卡儿在不经意间这样说过，阅读一切好书如同和过去最杰出的人谈话。我希望诸位也能好好地体会这句话。 那么，  我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 NOIP2022 游记，发生了会如何，不发生又会如何。  而这些并不是完全重要，更加重要的问题是， 从这个角度来看， 白哲特在不经意间这样说过，坚强的信念能赢得强者的心，并使他们变得更坚强。  这启发了我， 罗素·贝克曾经说过，一个人即使已登上顶峰，也仍要自强不息。这启发了我。 </p><p>　　那么，  带着这些问题，我们来审视一下NOIP2022 游记。 我们不得不面对一个非常尴尬的事实，那就是，  马云曾经提到过，最大的挑战和突破在于用人，而用人最大的突破在于信任人。带着这句话，我们还要更加慎重的审视这个问题：  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 每个人都不得不面对这些问题。 在面对这种问题时，  这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 既然如此， 对我个人而言，NOIP2022  游记不仅仅是一个重大的事件，还可能会改变我的人生。 莎士比亚在不经意间这样说过，意志命运往往背道而驰，决心到最后会全部推倒。这不禁令我深思。  带着这些问题，我们来审视一下NOIP2022 游记。 在这种困难的抉择下，本人思来想去，寝食难安。 就我个人来说，NOIP2022  游记对我的意义，不能不说非常重大。 我们不得不面对一个非常尴尬的事实，那就是， 了解清楚NOIP2022  游记到底是一种怎么样的存在，是解决一切问题的关键。 NOIP2022 游记的发生，到底需要如何做到，不NOIP2022  游记的发生，又会如何产生。 既然如何， 既然如何， 这样看来， 而这些并不是完全重要，更加重要的问题是， 我认为，  文森特·皮尔曾经提到过，改变你的想法，你就改变了自己的世界。这句话语虽然很短，但令我浮想联翩。 从这个角度来看，  非洲曾经说过，最灵繁的人也看不见自己的背脊。这不禁令我深思。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。  我们都知道，只要有意义，那么就必须慎重考虑。 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，NOIP2022  游记不仅仅是一个重大的事件，还可能会改变我的人生。 </p><p>　　在这种困难的抉择下，本人思来想去，寝食难安。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。 俾斯麦曾经说过，对于不屈不挠的人来说，没有失败这回事。这句话语虽然很短，但令我浮想联翩。  现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 一般来讲，我们都必须务必慎重的考虑考虑。  日本谚语在不经意间这样说过，不幸可能成为通向幸福的桥梁。这不禁令我深思。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 既然如何，  本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 一般来说， 那么， 现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以，  NOIP2022 游记，到底应该如何实现。 一般来讲，我们都必须务必慎重的考虑考虑。 既然如何， 既然如何， 总结的来说。 </p><p>　　所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。 生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。  卡耐基说过一句富有哲理的话，一个不注意小事情的人，永远不会成就大事业。带着这句话，我们还要更加慎重的审视这个问题： 每个人都不得不面对这些问题。 在面对这种问题时， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 从这个角度来看， NOIP2022 游记因何而发生？  一般来说， 可是，即使是这样，NOIP2022 游记的出现仍然代表了一定的意义。 从这个角度来看，  马云在不经意间这样说过，最大的挑战和突破在于用人，而用人最大的突破在于信任人。这句话语虽然很短，但令我浮想联翩。 从这个角度来看，  我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。 NOIP2022  游记，到底应该如何实现。 总结的来说， 那么， 既然如何， NOIP2022 游记因何而发生？ 既然如何， 那么， 既然如何，  而这些并不是完全重要，更加重要的问题是， 现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以。 </p><p>　　了解清楚NOIP2022 游记到底是一种怎么样的存在，是解决一切问题的关键。 那么， 一般来讲，我们都必须务必慎重的考虑考虑。  韩非曾经提到过，内外相应，言行相称。带着这句话，我们还要更加慎重的审视这个问题： 我认为，  拿破仑·希尔曾经提到过，不要等待，时机永远不会恰到好处。这不禁令我深思。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。  经过上述讨论， NOIP2022 游记的发生，到底需要如何做到，不NOIP2022 游记的发生，又会如何产生。  可是，即使是这样，NOIP2022 游记的出现仍然代表了一定的意义。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。  现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 在这种困难的抉择下，本人思来想去，寝食难安。 那么，  屠格涅夫在不经意间这样说过，你想成为幸福的人吗？但愿你首先学会吃得起苦。这似乎解答了我的疑惑。 要想清楚，NOIP2022  游记，到底是一种怎么样的存在。 叔本华在不经意间这样说过，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。这不禁令我深思。  生活中，若NOIP2022 游记出现了，我们就不得不考虑它出现了的事实。 </p><p>　　我认为， 这样看来， 我认为，  在这种困难的抉择下，本人思来想去，寝食难安。 一般来说， NOIP2022 游记因何而发生？ NOIP2022 游记，到底应该如何实现。  非洲曾经提到过，最灵繁的人也看不见自己的背脊。这不禁令我深思。  海贝尔曾经说过，人生就是学校。在那里，与其说好的教师是幸福，不如说好的教师是不幸。这启发了我， 就我个人来说，NOIP2022  游记对我的意义，不能不说非常重大。 NOIP2022 游记因何而发生？ 问题的关键究竟为何？ NOIP2022 游记，到底应该如何实现。  每个人都不得不面对这些问题。 在面对这种问题时。 </p><p>　　本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 经过上述讨论， 史美尔斯在不经意间这样说过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。这似乎解答了我的疑惑。 所谓NOIP2022  游记，关键是NOIP2022 游记需要如何写。 我认为， 而这些并不是完全重要，更加重要的问题是， 而这些并不是完全重要，更加重要的问题是，  可是，即使是这样，NOIP2022 游记的出现仍然代表了一定的意义。  卢梭在不经意间这样说过，浪费时间是一桩大罪过。我希望诸位也能好好地体会这句话。 可是，即使是这样，NOIP2022  游记的出现仍然代表了一定的意义。 我们不得不面对一个非常尴尬的事实，那就是， 现在，解决NOIP2022 游记的问题，是非常非常重要的。 所以， 了解清楚NOIP2022 游记到底是一种怎么样的存在，是解决一切问题的关键。 可是，即使是这样，NOIP2022  游记的出现仍然代表了一定的意义。 我认为， NOIP2022 游记因何而发生？  维龙说过一句富有哲理的话，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。这似乎解答了我的疑惑。 既然如何，  要想清楚，NOIP2022 游记，到底是一种怎么样的存在。  莎士比亚在不经意间这样说过，人的一生是短的，但如果卑劣地过这一生，就太长了。这启发了我， 总结的来说， NOIP2022  游记，到底应该如何实现。 而这些并不是完全重要，更加重要的问题是， 对我个人而言，NOIP2022  游记不仅仅是一个重大的事件，还可能会改变我的人生。 </p><p>　　既然如何， NOIP2022 游记，发生了会如何，不发生又会如何。 一般来讲，我们都必须务必慎重的考虑考虑。 就我个人来说，NOIP2022 游记对我的意义，不能不说非常重大。  吉姆·罗恩说过一句富有哲理的话，要么你主宰生活，要么你被生活主宰。这句话语虽然很短，但令我浮想联翩。 可是，即使是这样，NOIP2022  游记的出现仍然代表了一定的意义。 易卜生曾经提到过，伟大的事业，需要决心，能力，组织和责任感。这不禁令我深思。 </p><p>　　这样看来， 卢梭说过一句富有哲理的话，浪费时间是一桩大罪过。我希望诸位也能好好地体会这句话。 问题的关键究竟为何？ 现在，解决NOIP2022  游记的问题，是非常非常重要的。 所以， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 问题的关键究竟为何？  我们不得不面对一个非常尴尬的事实，那就是，  富兰克林曾经提到过，你热爱生命吗？那么别浪费时间，因为时间是组成生命的材料。这句话语虽然很短，但令我浮想联翩。 所谓NOIP2022  游记，关键是NOIP2022 游记需要如何写。 既然如此， 在这种困难的抉择下，本人思来想去，寝食难安。  在这种困难的抉择下，本人思来想去，寝食难安。 所谓NOIP2022 游记，关键是NOIP2022 游记需要如何写。 生活中，若NOIP2022  游记出现了，我们就不得不考虑它出现了的事实。 </p><p>​    <a href="https://www.cnblogs.com/nich666/p/16944726.html">游你妈记</a></p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板整合</title>
      <link href="//OI/%E6%A8%A1%E6%9D%BF%E6%95%B4%E5%90%88/"/>
      <url>//OI/%E6%A8%A1%E6%9D%BF%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>基本和个人码风一致</p><span id="more"></span><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">q[++r]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(q[l]&lt;i-m&amp;&amp;l&lt;=r) ++l;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">while</span>(v[i]&lt;=v[q[r]]&amp;&amp;l&lt;=r) --r;</span><br><span class="line">    q[++r]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,w[N],cnt,x,ans,h[N],a[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cnt=ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)    cin&gt;&gt;a[i];</span><br><span class="line">    a[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(h[cnt]&gt;a[i]) res+=w[cnt],ans=<span class="built_in">max</span>(ans,res*h[cnt]),--cnt;</span><br><span class="line">        w[++cnt]=res,h[cnt]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure><h4 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line"><span class="keyword">if</span>(v[y]&lt;v[x]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">rc[x]=<span class="built_in">merge</span>(rc[x],y);</span><br><span class="line"><span class="keyword">if</span>(d[rc[x]]&gt;d[lc[x]]) <span class="built_in">swap</span>(rc[x],lc[x]);</span><br><span class="line">d[x]=d[rc[x]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) c[x]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) res+=c[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y;i&lt;=m;i+=<span class="built_in">lowbit</span>(i)) c[x][i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y;i;i-=<span class="built_in">lowbit</span>(i)) res+=c[x][i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单点修改，区间查询</span></span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;opt&gt;&gt;a&gt;&gt;b&gt;&gt;c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    <span class="keyword">else</span> cin&gt;&gt;d,cout&lt;&lt;<span class="built_in">ask</span>(c,d)-<span class="built_in">ask</span>(c,b<span class="number">-1</span>)-<span class="built_in">ask</span>(a<span class="number">-1</span>,d)+<span class="built_in">ask</span>(a<span class="number">-1</span>,b<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间修改，单点查询</span></span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;opt&gt;&gt;a&gt;&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">1</span>) cin&gt;&gt;c&gt;&gt;d&gt;&gt;k,<span class="built_in">add</span>(c+<span class="number">1</span>,d+<span class="number">1</span>,k),<span class="built_in">add</span>(a,b,k),<span class="built_in">add</span>(a,d+<span class="number">1</span>,-k),<span class="built_in">add</span>(c+<span class="number">1</span>,b,-k);</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">ask</span>(a,b)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间修改，区间查询</span></span><br><span class="line"><span class="type">int</span> n,m,c[<span class="number">4</span>][N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y;i&lt;=m;i+=<span class="built_in">lowbit</span>(i)) c[k][x][i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y;i;i-=<span class="built_in">lowbit</span>(i)) res+=c[k][x][i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,x,y,v),<span class="built_in">add</span>(<span class="number">1</span>,x,y,x*v),<span class="built_in">add</span>(<span class="number">2</span>,x,y,y*v),<span class="built_in">add</span>(<span class="number">3</span>,x,y,v*x*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(<span class="number">0</span>,x,y)*(x*y+x+y+<span class="number">1</span>)-<span class="built_in">ask</span>(<span class="number">1</span>,x,y)*(y+<span class="number">1</span>)-<span class="built_in">ask</span>(<span class="number">2</span>,x,y)*(x+<span class="number">1</span>)+<span class="built_in">ask</span>(<span class="number">3</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;opt&gt;&gt;a&gt;&gt;b&gt;&gt;cc&gt;&gt;d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) cin&gt;&gt;k,<span class="built_in">Add</span>(a,b,k),<span class="built_in">Add</span>(cc+<span class="number">1</span>,b,-k),<span class="built_in">Add</span>(a,d+<span class="number">1</span>,-k),<span class="built_in">Add</span>(cc+<span class="number">1</span>,d+<span class="number">1</span>,k);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">Ask</span>(cc,d)+<span class="built_in">Ask</span>(a<span class="number">-1</span>,b<span class="number">-1</span>)-<span class="built_in">Ask</span>(a<span class="number">-1</span>,d)-<span class="built_in">Ask</span>(cc,b<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>,maxn[i][<span class="number">0</span>]=v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lg[n];++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=n;++j) maxn[j][i]=<span class="built_in">max</span>(maxn[j][i<span class="number">-1</span>],maxn[j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)][i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=lg[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(maxn[l][len],maxn[r-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><h4 id="非动态开点"><a href="#非动态开点" class="headerlink" title="非动态开点"></a>非动态开点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,v,add;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[k].v=t[k1].v+t[k2].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].add)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=t[k].add;t[k].add=<span class="number">0</span>;</span><br><span class="line">        t[k1].add+=v,t[k1].v+=(t[k1].r-t[k1].l+<span class="number">1</span>)*v;</span><br><span class="line">        t[k2].add+=v,t[k2].v+=(t[k2].r-t[k2].l+<span class="number">1</span>)*v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[k].l=l,t[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;t[k].v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(k1,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[k].l&amp;&amp;r&gt;=t[k].r)</span><br><span class="line">    &#123;</span><br><span class="line">        t[k].add+=v,t[k].v+=v*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[k1].r) <span class="built_in">change</span>(k1,l,r,v);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;=t[k2].l) <span class="built_in">change</span>(k2,l,r,v);</span><br><span class="line">    <span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[k].l&amp;&amp;r&gt;=t[k].r) <span class="keyword">return</span> t[k].v;</span><br><span class="line">    <span class="built_in">push</span>(k);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=t[k1].r) res+=<span class="built_in">ask</span>(k1,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;=t[k2].l) res+=<span class="built_in">ask</span>(k2,l,r);</span><br><span class="line">    <span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态开点"><a href="#动态开点" class="headerlink" title="动态开点"></a>动态开点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> k1 t[k].lc</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 t[k].rc</span></span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> lc,rc,v,add;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[k].v=t[k1].v+t[k2].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].add)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=t[k].add;t[k].add=<span class="number">0</span>;</span><br><span class="line">        t[k1].add+=v,t[k1].v+=(t[k1].r-t[k1].l+<span class="number">1</span>)*v;</span><br><span class="line">        t[k2].add+=v,t[k2].v+=(t[k2].r-t[k2].l+<span class="number">1</span>)*v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!k) k=++tot;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        t[k].add+=v,t[k].v+=v*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push</span>(k);</span><br><span class="line">    <span class="type">int</span> mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(k1,l,r,L,mid,v);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">change</span>(k2,l,r,mid+<span class="number">1</span>,R,v);</span><br><span class="line">    <span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="keyword">return</span> t[k].v;</span><br><span class="line">    <span class="built_in">push</span>(k);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res+=<span class="built_in">ask</span>(k1,l,r,L,mid);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) res+=<span class="built_in">ask</span>(k2,l,r,mid+<span class="number">1</span>,R);</span><br><span class="line">    <span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线段树合并（不回收内存）"><a href="#线段树合并（不回收内存）" class="headerlink" title="线段树合并（不回收内存）"></a>线段树合并（不回收内存）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p||!q) <span class="keyword">return</span> p+q;</span><br><span class="line">    t[p].v+=t[q].v;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    t[p].lc=<span class="built_in">merge</span>(t[p].lc,t[q].lc,l,mid);</span><br><span class="line">    t[p].rc=<span class="built_in">merge</span>(t[p].rc,t[p].rc,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线段树分裂"><a href="#线段树分裂" class="headerlink" title="线段树分裂"></a>线段树分裂</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> &amp;q,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span>;</span><br><span class="line">    q=++tot;</span><br><span class="line">    <span class="type">int</span> v=t[t[p].lc].v;</span><br><span class="line">    <span class="keyword">if</span>(v&lt;x) <span class="built_in">split</span>(t[p].rc,t[q].rc,x-v);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">swap</span>(t[p].rc,t[q].rc);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;v) <span class="built_in">split</span>(t[p].lc,t[q].lc,x);</span><br><span class="line">    t[q].v=t[p].v-x,t[p].v=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线段树分治"><a href="#线段树分治" class="headerlink" title="线段树分治"></a>线段树分治</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+r&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> x,y;&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;s[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">node st[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> top,f[N],n,m;</span><br><span class="line"><span class="type">int</span> ans[N],sz[N],last[N];</span><br><span class="line"><span class="type">char</span> opt[N];</span><br><span class="line">node e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x^f[x]) x=f[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mer</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(sz[x]&gt;sz[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">st[++top]=&#123;x,sz[x]&#125;,sz[y]+=sz[x],f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].l=l,t[k].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid),<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k].l&amp;&amp;r&gt;=t[k].r) <span class="keyword">return</span> s[k].<span class="built_in">push_back</span>(v),<span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k1].r) <span class="built_in">add</span>(k1,l,r,v);</span><br><span class="line"><span class="keyword">if</span>(r&gt;=t[k2].l) <span class="built_in">add</span>(k2,l,r,v);</span><br><span class="line">&#125;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> x*n+y;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp=top;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;s[k].<span class="built_in">size</span>();++x) <span class="built_in">mer</span>(<span class="built_in">find</span>(e[s[k][x]].x),<span class="built_in">find</span>(e[s[k][x]].y));</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt[l]==<span class="string">&#x27;Q&#x27;</span>) cout&lt;&lt;sz[<span class="built_in">find</span>(e[l].x)]*sz[<span class="built_in">find</span>(e[l].y)]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">solve</span>(k1,l,mid),<span class="built_in">solve</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">while</span>(top&gt;tmp) sz[f[st[top].x]]-=st[top].y,f[st[top].x]=st[top].x,--top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt[i]&gt;&gt;e[i].x&gt;&gt;e[i].y;</span><br><span class="line"><span class="keyword">if</span>(e[i].x&gt;e[i].y) <span class="built_in">swap</span>(e[i].x,e[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">id</span>(e[i].x,e[i].y);</span><br><span class="line"><span class="keyword">if</span>(opt[i]==<span class="string">&#x27;A&#x27;</span>) mp[tmp]=i,last[i]=i;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(<span class="number">1</span>,last[mp[tmp]],i<span class="number">-1</span>,mp[tmp]),last[mp[tmp]]=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::iterator it=mp.<span class="built_in">begin</span>();it!=mp.<span class="built_in">end</span>();++it)</span><br><span class="line"><span class="keyword">if</span>(last[it-&gt;second]&lt;=m) <span class="built_in">add</span>(<span class="number">1</span>,last[it-&gt;second],m,it-&gt;second);</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="李超线段树"><a href="#李超线段树" class="headerlink" title="李超线段树"></a>李超线段树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> k,b,l,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;r||x&lt;l) <span class="keyword">return</span> -INF;</span><br><span class="line"><span class="keyword">return</span> k*x+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;line[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x,<span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(x-y)&lt;eps?<span class="number">0</span>:x&gt;y?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> af=line[a].<span class="built_in">calc</span>(x),bf=line[b].<span class="built_in">calc</span>(x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp</span>(af,bf)?af&lt;bf:a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Line <span class="title">get</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b,<span class="type">double</span> c,<span class="type">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">cmp</span>(a,c)) <span class="keyword">return</span> (Line)&#123;<span class="number">0</span>,<span class="built_in">max</span>(b,d),a,a&#125;;</span><br><span class="line"><span class="type">double</span> k=(d-b)/(c-a);</span><br><span class="line"><span class="type">double</span> e=b-a*k;</span><br><span class="line"><span class="keyword">return</span> (Line)&#123;k,e,a,c&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LC_Segment_Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k]=(tree)&#123;l,r,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid);<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=t[k].l+t[k].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k].l&amp;&amp;r&gt;=t[k].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(t[k].id,p,mid)) <span class="built_in">swap</span>(t[k].id,p);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(t[k].id,p,t[k].l)) <span class="built_in">change</span>(k1,t[k].l,t[k].r,p);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(t[k].id,p,t[k].r)) <span class="built_in">change</span>(k2,t[k].l,t[k].r,p);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(k1,l,r,p);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">change</span>(k2,l,r,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==t[k].r) <span class="keyword">return</span> t[k].id;</span><br><span class="line"><span class="type">int</span> mid=t[k].l+t[k].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> res=<span class="built_in">ask</span>(x&lt;=mid?k1:k2,x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(res,t[k].id,x)) res=t[k].id;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br></pre></td></tr></table></figure><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><h4 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,tot,root;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ch[N][<span class="number">2</span>],s[N],c[N],v[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[k]=s[ch[k][<span class="number">0</span>]]+s[ch[k][<span class="number">1</span>]]+c[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">New</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v[++tot]=val,p[tot]=<span class="built_in">rand</span>(),s[tot]=c[tot]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rote</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">const</span> <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=ch[k][d^<span class="number">1</span>];</span><br><span class="line">ch[k][d^<span class="number">1</span>]=ch[x][d],ch[x][d]=k;</span><br><span class="line">k=x;</span><br><span class="line"><span class="built_in">up</span>(ch[k][d]),<span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k)</span><br><span class="line">&#123;</span><br><span class="line">k=<span class="built_in">New</span>(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v[k]==val)++c[k];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d=v[k]&lt;val?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="built_in">ins</span>(ch[k][d],val);</span><br><span class="line"><span class="keyword">if</span>(p[ch[k][d]]&gt;p[k]) <span class="built_in">rote</span>(k,d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(v[k]==val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[k]&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">--c[k],<span class="built_in">up</span>(k);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch[k][<span class="number">0</span>]||ch[k][<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[k][<span class="number">1</span>]||p[ch[k][<span class="number">0</span>]]&gt;p[ch[k][<span class="number">1</span>]])<span class="built_in">rote</span>(k,<span class="number">1</span>),<span class="built_in">del</span>(ch[k][<span class="number">1</span>],val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rote</span>(k,<span class="number">0</span>),<span class="built_in">del</span>(ch[k][<span class="number">0</span>],val);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">del</span>(ch[k][val&gt;v[k]],val);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v[k]==val) <span class="keyword">return</span> s[ch[k][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v[k]&gt;val) <span class="keyword">return</span> <span class="built_in">rank1</span>(ch[k][<span class="number">0</span>],val);</span><br><span class="line"><span class="keyword">return</span> s[ch[k][<span class="number">0</span>]]+c[k]+<span class="built_in">rank1</span>(ch[k][<span class="number">1</span>],val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(s[ch[k][<span class="number">0</span>]]&gt;=x) <span class="keyword">return</span> <span class="built_in">find</span>(ch[k][<span class="number">0</span>],x);</span><br><span class="line"><span class="keyword">if</span>(s[ch[k][<span class="number">0</span>]]+c[k]&gt;=x) <span class="keyword">return</span> v[k];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(ch[k][<span class="number">1</span>],x-s[ch[k][<span class="number">0</span>]]-c[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k=root,ans;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[k]&lt;val) ans=v[k],k=ch[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> k=ch[k][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suc</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k=root,ans;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[k]&gt;val) ans=v[k],k=ch[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> k=ch[k][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>) <span class="built_in">ins</span>(root,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>) <span class="built_in">del</span>(root,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">3</span>)cout&lt;&lt;<span class="built_in">rk</span>(root,y)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">4</span>)cout&lt;&lt;<span class="built_in">find</span>(root,y)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">5</span>)cout&lt;&lt;<span class="built_in">pre</span>(y)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">6</span>)cout&lt;&lt;<span class="built_in">suc</span>(y)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,root,tot;</span><br><span class="line"><span class="type">int</span> s[N],ch[N][<span class="number">2</span>],v[N],cnt[N],f[N],flag[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=s[ch[x][<span class="number">0</span>]]+s[ch[x][<span class="number">1</span>]]+cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==ch[f[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">reve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">flag[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">reve</span>(ch[x][<span class="number">0</span>]),<span class="built_in">reve</span>(ch[x][<span class="number">1</span>]);</span><br><span class="line">flag[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=f[x],z=f[y],d=<span class="built_in">get</span>(x);</span><br><span class="line">ch[y][d]=ch[x][d^<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(ch[y][d]) f[ch[y][d]]=y;</span><br><span class="line">ch[z][<span class="built_in">get</span>(y)]=x,f[x]=z;</span><br><span class="line">ch[x][d^<span class="number">1</span>]=y,f[y]=x;</span><br><span class="line"><span class="built_in">up</span>(y),<span class="built_in">up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(f[x]!=k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=f[x],z=f[y];</span><br><span class="line"><span class="keyword">if</span>(z!=k) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x)==<span class="built_in">get</span>(y)?y:x);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!k) root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cur=root,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cur&amp;&amp;v[cur]!=x) fa=cur,cur=ch[cur][x&gt;v[cur]];</span><br><span class="line"><span class="keyword">if</span>(cur) ++cnt[cur],++s[cur];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur=++tot;</span><br><span class="line"><span class="keyword">if</span>(fa) ch[fa][x&gt;v[fa]]=cur;</span><br><span class="line">f[cur]=fa,v[cur]=x,cnt[cur]=s[cur]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(ch[cur][x&gt;v[cur]]&amp;&amp;x!=v[cur]) cur=ch[cur][x&gt;v[cur]];</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cur=root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=s[ch[cur][<span class="number">0</span>]]) cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;s[ch[cur][<span class="number">0</span>]]+cnt[cur]) k-=s[ch[cur][<span class="number">0</span>]]+cnt[cur],cur=ch[cur][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">splay</span>(cur),cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find</span>(k);</span><br><span class="line"><span class="keyword">return</span> s[ch[root][<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">if</span>(v[root]&lt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="type">int</span> cur=ch[root][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">1</span>]) cur=ch[cur][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">if</span>(v[root]&gt;x) <span class="keyword">return</span> root;</span><br><span class="line"><span class="type">int</span> cur=ch[root][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][<span class="number">0</span>]) cur=ch[cur][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k1=<span class="built_in">pre</span>(x),k2=<span class="built_in">suc</span>(x);</span><br><span class="line"><span class="built_in">splay</span>(k1);</span><br><span class="line"><span class="built_in">splay</span>(k2,k1);</span><br><span class="line"><span class="type">int</span> del=ch[k2][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(--cnt[del]) <span class="built_in">splay</span>(del);</span><br><span class="line"><span class="keyword">else</span> ch[k2][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">up</span>(k2),<span class="built_in">up</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k1=<span class="built_in">kth</span>(l),k2=<span class="built_in">kth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(k1),<span class="built_in">splay</span>(k2,k1);</span><br><span class="line"><span class="built_in">reve</span>(ch[k2][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> opt,x,y;</span><br><span class="line"><span class="built_in">ins</span>(<span class="number">-1e9</span>),<span class="built_in">ins</span>(<span class="number">1e9</span>);</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">ins</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">del</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) res=<span class="built_in">rk</span>(x),cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) res=v[<span class="built_in">kth</span>(x+<span class="number">1</span>)],cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>) res=v[<span class="built_in">pre</span>(x)],cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">6</span>) res=v[<span class="built_in">suc</span>(x)],cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FHQ-Treap"><a href="#FHQ-Treap" class="headerlink" title="FHQ-Treap"></a>FHQ-Treap</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FHQ_Treap</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> root=<span class="number">0</span>,tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,s,v,p;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[++tot]=(tree)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,v,<span class="built_in">rand</span>()&#125;;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].s=t[t[k].lc].s+t[t[k].rc].s+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> v,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k)</span><br><span class="line">&#123;</span><br><span class="line">x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[k].v&lt;=v) x=k,<span class="built_in">split</span>(t[k].rc,v,t[k].rc,y);</span><br><span class="line"><span class="keyword">else</span> y=k,<span class="built_in">split</span>(t[k].lc,v,x,t[k].lc);</span><br><span class="line"><span class="built_in">up</span>(k); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line"><span class="keyword">if</span>(t[x].p&lt;t[y].p)</span><br><span class="line">&#123;</span><br><span class="line">t[x].rc=<span class="built_in">merge</span>(t[x].rc,y);</span><br><span class="line"><span class="built_in">up</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">t[y].lc=<span class="built_in">merge</span>(x,t[y].lc);</span><br><span class="line"><span class="built_in">up</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root,v,x,y);</span><br><span class="line">root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,<span class="built_in">newnode</span>(v)),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root,v<span class="number">-1</span>,x,y),<span class="built_in">split</span>(y,v,y,z);</span><br><span class="line">y=<span class="built_in">merge</span>(t[y].lc,t[y].rc);</span><br><span class="line">root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,y),z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root,v<span class="number">-1</span>,x,y);</span><br><span class="line">cout&lt;&lt;t[x].s+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=t[t[p].lc].s) p=t[p].lc;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[t[p].lc].s+<span class="number">1</span>==k) <span class="keyword">return</span> t[p].v;</span><br><span class="line"><span class="keyword">else</span> k-=t[t[p].lc].s+<span class="number">1</span>,p=t[p].rc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root,v<span class="number">-1</span>,x,y);</span><br><span class="line">cout&lt;&lt;<span class="built_in">kth</span>(x,t[x].s)&lt;&lt;endl;</span><br><span class="line">root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">suc</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root,v,x,y);</span><br><span class="line">cout&lt;&lt;<span class="built_in">kth</span>(y,<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">root=<span class="built_in">merge</span>(x,y); </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=y=z=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">split</span>(root,r,x,y),<span class="built_in">split</span>(x,l<span class="number">-1</span>,x,z);</span><br><span class="line">t[z].rev^=<span class="number">1</span>;</span><br><span class="line">root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,z),y); </span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br></pre></td></tr></table></figure><h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><p><del>这个就不放了</del></p><p>放个板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,N1=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> n,m,block,num;</span><br><span class="line"><span class="type">int</span> a[N],bl[N],L[N1],R[N1];</span><br><span class="line"><span class="type">int</span> v[N1][N1],val[N1][N];</span><br><span class="line"><span class="type">int</span> b[N],tot;</span><br><span class="line"><span class="type">int</span> num1,L1[N1],R1[N1];</span><br><span class="line"><span class="type">int</span> belong[N];</span><br><span class="line"><span class="type">int</span> cnt1[N1],cnt[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> opt,l,r,k;</span><br><span class="line">&#125;s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>,p=bl[l],q=bl[r];</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;k) ++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) <span class="keyword">if</span>(a[i]&lt;k) ++res;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i) <span class="keyword">if</span>(a[i]&lt;k) ++res;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;belong[k];++i) res+=v[q<span class="number">-1</span>][i]-v[p][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L1[belong[k]];i&lt;k;++i) res+=val[q<span class="number">-1</span>][i]-val[p][i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=bl[l],q=bl[r];</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"> ++cnt[a[i]],++cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i)</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt1[i]) k-=cnt1[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L1[i];j&lt;=R1[i];++j)</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt[j]) k-=cnt[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">--cnt[a[i]],--cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) </span><br><span class="line">++cnt[a[i]],++cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i)</span><br><span class="line">++cnt[a[i]],++cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt1[i]+v[q<span class="number">-1</span>][i]-v[p][i]) k-=cnt1[i]+v[q<span class="number">-1</span>][i]-v[p][i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L1[i];j&lt;=R1[i];++j)</span><br><span class="line"><span class="keyword">if</span>(k&gt;cnt[j]+val[q<span class="number">-1</span>][j]-val[p][j]) k-=cnt[j]+val[q<span class="number">-1</span>][j]-val[p][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) </span><br><span class="line">--cnt[a[i]],--cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i)</span><br><span class="line">--cnt[a[i]],--cnt1[belong[a[i]]];</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> va,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl[x];i&lt;=num;++i)</span><br><span class="line">val[i][va]+=value,v[i][belong[va]]+=value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=bl[l],q=bl[r],res=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="keyword">if</span>(a[i]&lt;k) res=<span class="built_in">max</span>(a[i],res);</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">-2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) <span class="keyword">if</span>(a[i]&lt;k) res=<span class="built_in">max</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i) <span class="keyword">if</span>(a[i]&lt;k) res=<span class="built_in">max</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=k<span class="number">-1</span>;i&gt;=L1[belong[k]];--i)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][i]-val[p][i]) <span class="keyword">return</span> b[<span class="built_in">max</span>(res,i)];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=belong[k]<span class="number">-1</span>;i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[q<span class="number">-1</span>][i]-v[p][i])</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=R1[i];j&gt;=L1[i];--j)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][j]-val[p][j]) <span class="keyword">return</span> b[<span class="built_in">max</span>(res,j)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">-2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">suf</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=bl[l],q=bl[r],res=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="keyword">if</span>(a[i]&gt;k) res=<span class="built_in">min</span>(a[i],res);</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i) <span class="keyword">if</span>(a[i]&gt;k) res=<span class="built_in">min</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i) <span class="keyword">if</span>(a[i]&gt;k) res=<span class="built_in">min</span>(a[i],res);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=k+<span class="number">1</span>;i&lt;=R1[belong[k]];++i)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][i]-val[p][i]) <span class="keyword">return</span> b[<span class="built_in">min</span>(res,i)];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=belong[k]+<span class="number">1</span>;i&lt;=num1;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[q<span class="number">-1</span>][i]-v[p][i])</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L1[i];j&lt;=R1[i];++j)</span><br><span class="line"><span class="keyword">if</span>(val[q<span class="number">-1</span>][j]-val[p][j]) <span class="keyword">return</span> b[<span class="built_in">min</span>(res,j)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res==<span class="number">2147483647</span>?res:b[res];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n),num=(n<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i) L[i]=R[i<span class="number">-1</span>]+<span class="number">1</span>,R[i]=i*block;</span><br><span class="line">R[num]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[++tot]=a[i],bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s[i].opt&gt;&gt;s[i].l&gt;&gt;s[i].r;</span><br><span class="line"><span class="keyword">if</span>(s[i].opt!=<span class="number">3</span>) cin&gt;&gt;s[i].k;</span><br><span class="line"><span class="keyword">else</span> s[i].k=s[i].r,s[i].r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i].opt!=<span class="number">2</span>) b[++tot]=s[i].k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(&amp;b[<span class="number">1</span>],&amp;b[tot+<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+tot+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="keyword">if</span>(s[i].opt!=<span class="number">2</span>) s[i].k=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,s[i].k)-b;</span><br><span class="line">block=<span class="built_in">sqrt</span>(M),num1=(M<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i) L1[i]=R1[i<span class="number">-1</span>]+<span class="number">1</span>,R1[i]=i*block;</span><br><span class="line">R1[num1]=M;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num1;++j) v[i][j]=v[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j) val[i][j]=val[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[i];j&lt;=R[i];++j) ++v[i][belong[a[j]]],++val[i][a[j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i].opt==<span class="number">1</span>) cout&lt;&lt;<span class="built_in">rk</span>(s[i].l,s[i].r,s[i].k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i].opt==<span class="number">2</span>) cout&lt;&lt;b[<span class="built_in">kth</span>(s[i].l,s[i].r,s[i].k)]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i].opt==<span class="number">3</span>) <span class="built_in">change</span>(s[i].l,a[s[i].l],<span class="number">-1</span>),a[s[i].l]=s[i].k,<span class="built_in">change</span>(s[i].l,a[s[i].l],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i].opt==<span class="number">4</span>) cout&lt;&lt;<span class="built_in">pre</span>(s[i].l,s[i].r,s[i].k)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">suf</span>(s[i].l,s[i].r,s[i].k)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p>emmm</p><p>也放个板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[N],f[N],ne[N],tot,l=<span class="number">1</span>,r,ti;</span><br><span class="line"><span class="type">int</span> n,m,res,Q,su,block1,num1,L[N],R[N];</span><br><span class="line"><span class="type">int</span> w[N],c[N];</span><br><span class="line"><span class="type">int</span> ans[N],s[N],v[N],cnt[N],belong[N],block,num,vis[N],b[N],belong1[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">int</span> ss[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=f[x],f[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> st[N],ed[N],t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[++t]=x,st[x]=t;</span><br><span class="line">fa[x][<span class="number">0</span>]=dad;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=dad)<span class="built_in">dfs</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line">s[++t]=x,ed[x]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,lca,t,k,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> qq &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?(belong[r]==belong[x.r]?t&lt;x.t:r&lt;x.r):l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> st[x]&lt;=st[y]&amp;&amp;ed[x]&gt;=ed[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">pd</span>(fa[x][i],y)&amp;&amp;fa[x][i]!=<span class="number">0</span>)x=fa[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=s[x],vis[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y=v[x];</span><br><span class="line"><span class="keyword">if</span>(vis[x]) ++cnt[y],++ss[belong1[y]];</span><br><span class="line"><span class="keyword">else</span> --cnt[y],--ss[belong1[y]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=num1;</span><br><span class="line"><span class="keyword">for</span>(;res;--res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;ss[res]) k-=ss[res];</span><br><span class="line"><span class="keyword">else</span><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!res) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=R[res];i&gt;=L[res];--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=cnt[i]) <span class="keyword">return</span> sum[i];</span><br><span class="line"><span class="keyword">else</span> k-=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x1=st[g[x].x],x2=ed[g[x].x];</span><br><span class="line"><span class="keyword">if</span>(x1&gt;=l&amp;&amp;x1&lt;=r) <span class="built_in">add1</span>(x1);</span><br><span class="line"><span class="keyword">if</span>(x2&gt;=l&amp;&amp;x2&lt;=r) <span class="built_in">add1</span>(x2);</span><br><span class="line"><span class="built_in">swap</span>(v[s[x1]],g[x].y);</span><br><span class="line"><span class="keyword">if</span>(x1&gt;=l&amp;&amp;x1&lt;=r) <span class="built_in">add1</span>(x1);</span><br><span class="line"><span class="keyword">if</span>(x2&gt;=l&amp;&amp;x2&lt;=r) <span class="built_in">add1</span>(x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;Q;</span><br><span class="line"><span class="type">int</span> QQ=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">block=<span class="built_in">pow</span>(<span class="number">2</span>*n,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;v[i],sum[++su]=v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T=<span class="number">0</span>,ty;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;ty&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(ty)</span><br><span class="line">&#123;</span><br><span class="line">++QQ;</span><br><span class="line"><span class="keyword">if</span>(st[x]&gt;st[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">lca</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(x==k) q[QQ]=&#123;st[x],st[y],<span class="number">0</span>,T,ty,QQ&#125;;</span><br><span class="line"><span class="keyword">else</span>q[QQ]=&#123;ed[x],st[y],k,T,ty,QQ&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>g[++T]=&#123;x,y&#125;,sum[++su]=y;</span><br><span class="line">&#125;</span><br><span class="line">block1=<span class="built_in">pow</span>(su,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line">num1=(su<span class="number">-1</span>)/block1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num1;++i) L[i]=(i<span class="number">-1</span>)*block1<span class="number">-1</span>,R[i]=i*block1;</span><br><span class="line">R[num1]=su;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=su;++i) belong1[i]=(i<span class="number">-1</span>)/block1+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+QQ+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(sum+<span class="number">1</span>,sum+su+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(sum+<span class="number">1</span>,sum+su+<span class="number">1</span>)-sum<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) v[i]=<span class="built_in">lower_bound</span>(sum+<span class="number">1</span>,sum+M+<span class="number">1</span>,v[i])-sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=T;++i) g[i].y=<span class="built_in">lower_bound</span>(sum+<span class="number">1</span>,sum+M+<span class="number">1</span>,g[i].y)-sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=QQ;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add1</span>(--l);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">add1</span>(l++);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">add1</span>(r--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add1</span>(++r);</span><br><span class="line"><span class="keyword">while</span>(ti&lt;q[i].t) <span class="built_in">up</span>(++ti);</span><br><span class="line"><span class="keyword">while</span>(ti&gt;q[i].t) <span class="built_in">up</span>(ti--);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add1</span>(st[q[i].lca]);</span><br><span class="line">ans[q[i].id]=<span class="built_in">ask</span>(q[i].k);</span><br><span class="line"><span class="keyword">if</span>(q[i].lca) <span class="built_in">add1</span>(st[q[i].lca]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=QQ;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot;invalid request!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫队二次离线"><a href="#莫队二次离线" class="headerlink" title="莫队二次离线"></a>莫队二次离线</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>,N1=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,c[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _n)</span></span>&#123;n=_n;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[i]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) c[x]+=v;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="type">int</span> res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) res+=c[x];<span class="keyword">return</span> res;&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="type">int</span> block,n,m,a[N];</span><br><span class="line"><span class="type">int</span> bl[N],Lp[N1],Rp[N1],bk;</span><br><span class="line">ll cnt[N],tag[N1];</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line">ll ans[N],lv[N],rv[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;res)<span class="type">const</span>&#123;<span class="keyword">return</span> bl[l]==bl[res.l]?r&lt;res.r:l&lt;res.l;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">rag</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id,v;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;rag&gt;rg[<span class="number">2</span>][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">block</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=_n;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="keyword">sizeof</span> tag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addL</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;=Lp[bl[x]];--i) cnt[i]+=v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl[x]<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i) tag[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addR</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=Rp[bl[x]];++i) cnt[i]+=v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl[x]+<span class="number">1</span>;i&lt;=bl[n];++i) tag[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cnt[x]+tag[bl[x]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;s;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],num[i]=a[i];</span><br><span class="line"><span class="built_in">sort</span>(num+<span class="number">1</span>,num+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(num+<span class="number">1</span>,num+n+<span class="number">1</span>)-num<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(num+<span class="number">1</span>,num+M+<span class="number">1</span>,a[i])-num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) bl[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=bl[n];++i) Lp[i]=Rp[i<span class="number">-1</span>]+<span class="number">1</span>,Rp[i]=i*block;</span><br><span class="line">Rp[bl[n]]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line">t.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">lv[i]=lv[i<span class="number">-1</span>]+t.<span class="built_in">ask</span>(n)-t.<span class="built_in">ask</span>(a[i]),t.<span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">t.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">rv[i]=rv[i+<span class="number">1</span>]+t.<span class="built_in">ask</span>(a[i]<span class="number">-1</span>),t.<span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">1</span>,R=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l=q[i].l,r=q[i].r,id=q[i].id;</span><br><span class="line"><span class="keyword">if</span>(R&lt;r)</span><br><span class="line">rg[<span class="number">0</span>][L<span class="number">-1</span>].<span class="built_in">push_back</span>((rag)&#123;R+<span class="number">1</span>,r,id,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(R&gt;r)</span><br><span class="line">rg[<span class="number">0</span>][L<span class="number">-1</span>].<span class="built_in">push_back</span>((rag)&#123;r+<span class="number">1</span>,R,id,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(L&gt;l)</span><br><span class="line">rg[<span class="number">1</span>][r+<span class="number">1</span>].<span class="built_in">push_back</span>((rag)&#123;l,L<span class="number">-1</span>,id,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(l&gt;L)</span><br><span class="line">rg[<span class="number">1</span>][r+<span class="number">1</span>].<span class="built_in">push_back</span>((rag)&#123;L,l<span class="number">-1</span>,id,<span class="number">1</span>&#125;);</span><br><span class="line">ans[id]+=rv[l]-rv[L]+lv[r]-lv[R];</span><br><span class="line">L=l,R=r;</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">addL</span>(a[i]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:rg[<span class="number">0</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=x.l;j&lt;=x.r;++j) res+=s.<span class="built_in">ask</span>(a[j]);</span><br><span class="line">ans[x.id]+=x.v*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">addR</span>(a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:rg[<span class="number">1</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=x.l;j&lt;=x.r;++j) res+=s.<span class="built_in">ask</span>(a[j]);</span><br><span class="line">ans[x.id]+=x.v*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ans[q[i].id]+=ans[q[i<span class="number">-1</span>].id];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重链剖分"><a href="#重链剖分" class="headerlink" title="重链剖分"></a>重链剖分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 k&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,v,add;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,r,p;</span><br><span class="line"><span class="type">int</span> dfn[N],id[N],son[N],s[N],a[N],dep[N],f[N],top[N],tot;</span><br><span class="line"><span class="type">int</span> idx,head[N],ne[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++idx]=y,ne[idx]=head[x],head[x]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[x]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">s[x]=<span class="number">1</span>;</span><br><span class="line">f[x]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[x]=t;</span><br><span class="line">id[x]=++tot;</span><br><span class="line">dfn[tot]=x;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">y=to[i];</span><br><span class="line"><span class="keyword">if</span>(y==f[x]||y==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].v=(t[k1].v+t[k2].v)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> add=t[k].add;</span><br><span class="line"><span class="keyword">if</span>(!add) <span class="keyword">return</span>;</span><br><span class="line">(t[k1].add+=add)%=p;</span><br><span class="line">(t[k2].add+=add)%=p;</span><br><span class="line">(t[k1].v+=(t[k1].r-t[k1].l+<span class="number">1</span>)*add)%=p;</span><br><span class="line">(t[k2].v+=(t[k2].r-t[k2].l+<span class="number">1</span>)*add)%=p;</span><br><span class="line">t[k].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].l=l,t[k].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">t[k].v=a[dfn[l]]%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid);</span><br><span class="line"><span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k].l&amp;&amp;r&gt;=t[k].r)</span><br><span class="line">&#123;</span><br><span class="line">t[k].v=(t[k].v+(t[k].r-t[k].l+<span class="number">1</span>)*v)%p;</span><br><span class="line">t[k].add=(t[k].add+v)%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(k);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k1].r) <span class="built_in">change</span>(k1,l,r,v);</span><br><span class="line"><span class="keyword">if</span>(r&gt;=t[k2].l) <span class="built_in">change</span>(k2,l,r,v);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k].l&amp;&amp;r&gt;=t[k].r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="built_in">pushdown</span>(k);</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k1].r) res+=<span class="built_in">ask</span>(k1,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;=t[k2].l) res+=<span class="built_in">ask</span>(k2,l,r);</span><br><span class="line"><span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">changes</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,id[top[x]],id[x],v);</span><br><span class="line">x=f[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,id[x],id[y],v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y); </span><br><span class="line">res+=<span class="built_in">ask</span>(<span class="number">1</span>,id[top[x]],id[x]);</span><br><span class="line">res%=p;</span><br><span class="line">x=f[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">res+=<span class="built_in">ask</span>(<span class="number">1</span>,id[x],id[y]);</span><br><span class="line"><span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;p;</span><br><span class="line"><span class="type">int</span> x,y,z,e;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs1</span>(r,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(r,r);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">changes</span>(x,y,z);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>) cin&gt;&gt;x&gt;&gt;y,cout&lt;&lt;<span class="built_in">query</span>(x,y)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">3</span>) cin&gt;&gt;x&gt;&gt;z,<span class="built_in">change</span>(<span class="number">1</span>,id[x],id[x]+s[x]<span class="number">-1</span>,z);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">4</span>) cin&gt;&gt;x,cout&lt;&lt;<span class="built_in">ask</span>(<span class="number">1</span>,id[x],id[x]+s[x]<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Chtholly树（ODT）"><a href="#Chtholly树（ODT）" class="headerlink" title="Chtholly树（ODT）"></a>Chtholly树（ODT）</h3><p>珂朵莉太可爱了,我永远喜欢珂朵莉</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> iter set<span class="string">&lt;node&gt;</span>::iterator</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,seed,vmax;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> v;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> a=<span class="number">-1</span>,<span class="type">int</span> b=<span class="number">-1</span>,<span class="type">int</span> c=<span class="number">-1</span>):<span class="built_in">l</span>(a),<span class="built_in">r</span>(b),<span class="built_in">v</span>(c)&#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> l&lt;res.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;node&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> iter <span class="title">split</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iter it=s.<span class="built_in">lower_bound</span>(<span class="built_in">node</span>(x));</span><br><span class="line"><span class="keyword">if</span>(it!=s.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==x) <span class="keyword">return</span> it;</span><br><span class="line">--it;</span><br><span class="line">node t=*it;</span><br><span class="line">s.<span class="built_in">erase</span>(it);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">node</span>(t.l,x<span class="number">-1</span>,t.v));</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">insert</span>(<span class="built_in">node</span>(x,t.r,t.v)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iter it2=<span class="built_in">split</span>(r+<span class="number">1</span>),it1=<span class="built_in">split</span>(l);</span><br><span class="line">s.<span class="built_in">erase</span>(it1,it2);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iter it2=<span class="built_in">split</span>(r+<span class="number">1</span>),it1=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(;it1!=it2;++it1) it1-&gt;v+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rank1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;<span class="built_in">ve</span>(<span class="number">0</span>);</span><br><span class="line">iter it2=<span class="built_in">split</span>(r+<span class="number">1</span>),it1=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(;it1!=it2;it1++) ve.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(it1-&gt;v,it1-&gt;r-it1-&gt;l+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(),ve.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ve.<span class="built_in">size</span>();++i)<span class="keyword">if</span>((x-=ve[i].second)&lt;=<span class="number">0</span>) <span class="keyword">return</span> ve[i].first;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">a%=p;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">a=a*a%p;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">iter it2=<span class="built_in">split</span>(r+<span class="number">1</span>),it1=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(;it1!=it2;it1++) res=(res+(it1-&gt;r-it1-&gt;l+<span class="number">1</span>)*<span class="built_in">qpow</span>(it1-&gt;v,x,y))%y;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=seed;</span><br><span class="line">seed=(seed*<span class="number">7</span>+<span class="number">13</span>)%<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;seed&gt;&gt;vmax;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=(<span class="built_in">rnd</span>()%vmax)+<span class="number">1</span>;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">node</span>(i,i,a[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> op,l,r,x,y;</span><br><span class="line">op=(<span class="built_in">rnd</span>()%<span class="number">4</span>)+<span class="number">1</span>;</span><br><span class="line">l=(<span class="built_in">rnd</span>()%n)+<span class="number">1</span>;</span><br><span class="line">r=(<span class="built_in">rnd</span>()%n)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">3</span>) x=(<span class="built_in">rnd</span>()%(r-l+<span class="number">1</span>))+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> x=(<span class="built_in">rnd</span>()%vmax)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">4</span>) y=(<span class="built_in">rnd</span>()%vmax)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">add</span>(l,r,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">assign</span>(l,r,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>) cout&lt;&lt;<span class="built_in">rank1</span>(l,r,x)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">power</span>(l,r,x,y)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCT"><a href="#LCT" class="headerlink" title="LCT"></a>LCT</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,root,tot;</span><br><span class="line"><span class="type">int</span> s[N],ch[N][<span class="number">2</span>],v[N],f[N],flag[N];</span><br><span class="line"><span class="type">int</span> stk[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;s[x]=s[ch[x][<span class="number">0</span>]]^s[ch[x][<span class="number">1</span>]]^v[x];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">isroot</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]!=x&amp;&amp;ch[f[x]][<span class="number">1</span>]!=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==ch[f[x]][<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">flag[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rev</span>(ch[x][<span class="number">0</span>]),<span class="built_in">rev</span>(ch[x][<span class="number">1</span>]);</span><br><span class="line">flag[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=f[x],z=f[y],d=<span class="built_in">get</span>(x);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) ch[z][<span class="built_in">get</span>(y)]=x;</span><br><span class="line">ch[y][d]=ch[x][d^<span class="number">1</span>],f[ch[x][d^<span class="number">1</span>]]=y;</span><br><span class="line">f[x]=z,ch[x][d^<span class="number">1</span>]=y,f[y]=x;</span><br><span class="line"><span class="built_in">up</span>(y),<span class="built_in">up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>,r=x;</span><br><span class="line">stk[++top]=r;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(r)) stk[++top]=r=f[r];</span><br><span class="line"><span class="keyword">while</span>(top) <span class="built_in">push</span>(stk[top--]);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=f[x],z=f[y];</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x)==<span class="built_in">get</span>(y)?y:x);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> z=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;x;y=x,x=f[x]) <span class="built_in">splay</span>(x),ch[x][<span class="number">1</span>]=y,<span class="built_in">up</span>(x);</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x),<span class="built_in">rev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span>(ch[x][<span class="number">0</span>]) <span class="built_in">push</span>(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">makeroot</span>(x),<span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">makeroot</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">findroot</span>(y)!=x) f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">makeroot</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">findroot</span>(y)==x&amp;&amp;f[y]==x&amp;&amp;!ch[y][<span class="number">0</span>]) ch[x][<span class="number">1</span>]=f[y]=<span class="number">0</span>,<span class="built_in">up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;v[i];</span><br><span class="line"><span class="type">int</span> opt,x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>) <span class="built_in">split</span>(x,y),cout&lt;&lt;s[y]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">link</span>(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">cut</span>(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">splay</span>(x),v[x]=y,<span class="built_in">up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h3><h4 id="树状数组套权值线段树"><a href="#树状数组套权值线段树" class="headerlink" title="树状数组套权值线段树"></a>树状数组套权值线段树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> root[N],v1,v2,idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++idx;</span><br><span class="line">t[k].v+=v;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(t[k].lc,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(t[k].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=v1;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="built_in">change</span>(root[x],<span class="number">1</span>,v2,y,v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(t[k].lc,l,mid,x);</span><br><span class="line"><span class="keyword">return</span> t[t[k].lc].v+<span class="built_in">query</span>(t[k].rc,mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) res+=<span class="built_in">query</span>(root[x],<span class="number">1</span>,v2,y);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _v1,<span class="type">int</span> _v2)</span></span>&#123;v1=_v1,v2=_v2,idx=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;T;</span><br></pre></td></tr></table></figure><h4 id="权值线段树套线段树"><a href="#权值线段树套线段树" class="headerlink" title="权值线段树套线段树"></a>权值线段树套线段树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> root[N*<span class="number">4</span>],n,idx,tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v,tag;</span><br><span class="line">&#125;t[N*<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++idx;</span><br><span class="line">t[k].v+=<span class="built_in">min</span>(R,r)-<span class="built_in">max</span>(l,L)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)<span class="keyword">return</span> (<span class="type">void</span>)++t[k].tag;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) <span class="built_in">change</span>(t[k].lc,l,mid,L,R);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) <span class="built_in">change</span>(t[k].rc,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">change</span>(root[k],<span class="number">1</span>,n,L,R);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v&lt;=mid) <span class="built_in">add</span>(k1,l,mid,L,R,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(k2,mid+<span class="number">1</span>,r,L,R,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,res=t[k].tag*(<span class="built_in">min</span>(R,r)-<span class="built_in">max</span>(l,L)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid) res+=<span class="built_in">query</span>(t[k].lc,l,mid,L,R);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid) res+=<span class="built_in">query</span>(t[k].rc,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,tmp=<span class="built_in">query</span>(root[k2],<span class="number">1</span>,n,L,R);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=tmp) <span class="keyword">return</span> <span class="built_in">ask</span>(k2,mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(k1,l,mid,L,R,x-tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br></pre></td></tr></table></figure><h4 id="线段树套Trie"><a href="#线段树套Trie" class="headerlink" title="线段树套Trie"></a>线段树套Trie</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+r&gt;&gt;1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,INF=<span class="number">1e9</span>,V=<span class="number">18</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> root[N&lt;&lt;<span class="number">2</span>],a[N],n,m;</span><br><span class="line"><span class="type">int</span> ch[N*<span class="number">400</span>][<span class="number">2</span>],last[N*<span class="number">400</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=V;~i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!ch[k][c]) ch[k][c]=++tot;</span><br><span class="line">k=ch[k][c],last[k]=<span class="built_in">max</span>(last[k],t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=V;~i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=((x&gt;&gt;i)&amp;<span class="number">1</span>)^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[k][c]&amp;&amp;last[ch[k][c]]&gt;=t) k=ch[k][c],res+=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">else</span> k=ch[k][c^<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">root[k]=++tot;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) <span class="built_in">ins</span>(root[k],a[i],INF);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid);<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ins</span>(root[k],v,t);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(k1,l,mid,x,v,t);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(k2,mid+<span class="number">1</span>,r,x,v,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r) <span class="keyword">return</span> <span class="built_in">ask</span>(root[k],x,t);</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(k1,l,mid,L,R,x,t);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(k2,mid+<span class="number">1</span>,r,L,R,x,t);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">query</span>(k1,l,mid,L,R,x,t),<span class="built_in">query</span>(k2,mid+<span class="number">1</span>,r,L,R,x,t));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> opt,l,r,x,d,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,++t);</span><br><span class="line"><span class="keyword">else</span> cin&gt;&gt;x&gt;&gt;d,cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x,t-d+<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体二分"><a href="#整体二分" class="headerlink" title="整体二分"></a>整体二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">5</span>,NN=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id,x1,y1,x2,y2,k;</span><br><span class="line">&#125;s[N],s1[N],s2[N];</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="type">int</span> c[NN][NN];</span><br><span class="line"><span class="type">int</span> n,q,tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++x,++y;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n+<span class="number">1</span>;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y;i&lt;=n+<span class="number">1</span>;i+=<span class="built_in">lowbit</span>(i)) c[x][i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">++x,++y;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y;i;i-=<span class="built_in">lowbit</span>(i)) res+=c[x][i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> lv,<span class="type">int</span> rv,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(lv==rv)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) ans[s[i].id]=lv;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=lv+rv&gt;&gt;<span class="number">1</span>,ll=<span class="number">0</span>,rr=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!s[i].id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i].k&lt;=mid) <span class="built_in">add</span>(s[i].x1,s[i].y1,<span class="number">1</span>),s1[++ll]=s[i];</span><br><span class="line"><span class="keyword">else</span> s2[++rr]=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">ask</span>(s[i].x2,s[i].y2)+<span class="built_in">ask</span>(s[i].x1<span class="number">-1</span>,s[i].y1<span class="number">-1</span>)-<span class="built_in">ask</span>(s[i].x1<span class="number">-1</span>,s[i].y2)-<span class="built_in">ask</span>(s[i].x2,s[i].y1<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(k&gt;=s[i].k) s1[++ll]=s[i];</span><br><span class="line"><span class="keyword">else</span> s[i].k-=k,s2[++rr]=s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ll;++i) <span class="keyword">if</span>(!s1[i].id) <span class="built_in">add</span>(s1[i].x1,s1[i].y1,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ll;++i) s[l+i<span class="number">-1</span>]=s1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=rr;++i) s[ll+l+i<span class="number">-1</span>]=s2[i];</span><br><span class="line"><span class="built_in">solve</span>(lv,mid,l,l+ll<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,rv,l+ll,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="type">int</span> x1,y1,x2,y3,k,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">cin&gt;&gt;x,s[++tot]=(node)&#123;<span class="number">0</span>,i,j,<span class="number">0</span>,<span class="number">0</span>,x&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i) cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y3&gt;&gt;k,s[++tot]=(node)&#123;i,x1,y1,x2,y3,k&#125;;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">0</span>,<span class="number">1e9</span>,<span class="number">1</span>,tot);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a>CDQ分治</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ss</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z,v,ans;</span><br><span class="line">&#125;s[N],a[N];</span><br><span class="line"><span class="type">int</span> n,k,c[N],ans[N],d[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=k;x+=<span class="built_in">lowbit</span>(x)) c[x]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) res+=c[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(ss a,ss b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y)||(a.x==b.x&amp;&amp;a.y==b.y&amp;&amp;a.z&lt;b.z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cdq</span>(l,mid),<span class="built_in">cdq</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="type">int</span> p=l,q=mid+<span class="number">1</span>,tot=l;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=mid&amp;&amp;q&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[p].y&lt;=s[q].y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s[p].z,s[p].v);</span><br><span class="line">a[tot++]=s[p++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s[q].ans+=<span class="built_in">ask</span>(s[q].z);</span><br><span class="line">a[tot++]=s[q++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">s[q].ans+=<span class="built_in">ask</span>(s[q].z);</span><br><span class="line">a[tot++]=s[q++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;p;++i) <span class="built_in">add</span>(s[i].z,-s[i].v);</span><br><span class="line"><span class="keyword">while</span>(p&lt;=mid) a[tot++]=s[p++];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) s[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;s[i].x&gt;&gt;s[i].y&gt;&gt;s[i].z;</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="type">int</span> tot=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="keyword">if</span>(s[i].x!=s[i+<span class="number">1</span>].x||s[i].y!=s[i+<span class="number">1</span>].y||s[i].z!=s[i+<span class="number">1</span>].z) a[++tot]=s[i],a[tot].v=res,res=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) s[i]=a[i];</span><br><span class="line"><span class="built_in">cdq</span>(<span class="number">1</span>,tot);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) d[s[i].ans+s[i].v<span class="number">-1</span>]+=s[i].v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cout&lt;&lt;d[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KD树"><a href="#KD树" class="headerlink" title="KD树"></a>KD树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">int</span> xl,xr,yl,yr,z;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">tree</span><span class="params">(<span class="type">int</span> _l=<span class="number">0</span>,<span class="type">int</span> _r=<span class="number">0</span>,<span class="type">int</span> x1=<span class="number">0</span>,<span class="type">int</span> x2=<span class="number">0</span>,<span class="type">int</span> x3=<span class="number">0</span>,<span class="type">int</span> x4=<span class="number">0</span>,<span class="type">int</span> x5=<span class="number">0</span>)</span></span>&#123;l=_l,r=_r,xl=x1,xr=x2,yl=x3,yr=x4,z=x5;&#125;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,id;</span><br><span class="line">&#125;s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point x,point y)</span></span>&#123;<span class="keyword">return</span> x.x&lt;y.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(point x,point y)</span></span>&#123;<span class="keyword">return</span> x.y&lt;y.y;&#125;</span><br><span class="line"><span class="type">int</span> n,m,ans[N],tp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(t[k]=<span class="built_in">tree</span>(l,r,s[l].x,s[l].x,s[l].y,s[l].y,s[l].id),tp[s[l].id]=l);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">nth_element</span>(s+l,s+mid,s+r+<span class="number">1</span>,d?cmp1:cmp2);</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid,!d);</span><br><span class="line"><span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r,!d);</span><br><span class="line">t[k]=<span class="built_in">tree</span>(l,r,<span class="built_in">min</span>(t[k1].xl,t[k2].xl),<span class="built_in">max</span>(t[k1].xr,t[k2].xr),<span class="built_in">min</span>(t[k1].yl,t[k2].yl),<span class="built_in">max</span>(t[k1].yr,t[k2].yr),<span class="built_in">min</span>(t[k1].z,t[k2].z));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==t[k].r) <span class="keyword">return</span> (<span class="type">void</span>)(t[k].z=n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">change</span>(x&lt;=t[k1].r?k1:k2,x);</span><br><span class="line">t[k].z=<span class="built_in">min</span>(t[k1].z,t[k2].z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> xl,<span class="type">int</span> xr,<span class="type">int</span> yl,<span class="type">int</span> yr,<span class="type">int</span> &amp;id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].z&gt;=id||xr&lt;t[k].xl||xl&gt;t[k].xr||t[k].yl&gt;yr||t[k].yr&lt;yl) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(xl&lt;=t[k].xl&amp;&amp;xr&gt;=t[k].xr&amp;&amp;yl&lt;=t[k].yl&amp;&amp;yr&gt;=t[k].yr) <span class="keyword">return</span> (<span class="type">void</span>)(id=<span class="built_in">min</span>(id,t[k].z));</span><br><span class="line"><span class="keyword">if</span>(t[k1].z&lt;t[k2].z) <span class="built_in">ask</span>(k1,xl,xr,yl,yr,id),<span class="built_in">ask</span>(k2,xl,xr,yl,yr,id);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ask</span>(k2,xl,xr,yl,yr,id),<span class="built_in">ask</span>(k1,xl,xr,yl,yr,id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">squ</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xl,yl,xr,yr,id,h;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(squ res)<span class="type">const</span>&#123;<span class="keyword">return</span> h&lt;res.h;&#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">cin&gt;&gt;a[i].xl&gt;&gt;a[i].xr&gt;&gt;a[i].yl&gt;&gt;a[i].yr&gt;&gt;a[i].h,a[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;s[i].x&gt;&gt;s[i].y,s[i].id=i;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u,i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ask</span>(<span class="number">1</span>,a[i].xl,a[i].xr,a[i].yl,a[i].yr,u=n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(u!=n+<span class="number">1</span>) ans[u]=a[i].id,<span class="built_in">change</span>(<span class="number">1</span>,tp[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (t[k].lc)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (t[k].rc)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">0.6</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,v;</span><br><span class="line">&#125;s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point x,point y)</span></span>&#123;<span class="keyword">return</span> x.x&lt;y.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(point x,point y)</span></span>&#123;<span class="keyword">return</span> x.y&lt;y.y;&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,xl,xr,yl,yr,v,c;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">leaf</span><span class="params">(point k)</span></span>&#123;xl=xr=k.x,yl=yr=k.y,v=k.v,c=<span class="number">1</span>;&#125;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> tot,top,st[N&lt;&lt;<span class="number">1</span>],id;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u=top?st[top--]:++tot;</span><br><span class="line">t[u]=(tree)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pia</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t[k].lc) <span class="keyword">return</span> (<span class="type">void</span>)(s[++id]=(point)&#123;t[k].xl,t[k].yl,t[k].v&#125;,st[++top]=k);</span><br><span class="line"><span class="built_in">pia</span>(k1),<span class="built_in">pia</span>(k2),st[++top]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;<span class="keyword">return</span> t[k].c&gt;<span class="number">3</span>&amp;&amp;<span class="built_in">max</span>(t[k1].c,t[k2].c)&gt;t[k].c*eps;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].v=t[k1].v+t[k2].v,t[k].c=t[k1].c+t[k2].c;</span><br><span class="line">t[k].xl=<span class="built_in">min</span>(t[k1].xl,t[k2].xl),t[k].xr=<span class="built_in">max</span>(t[k1].xr,t[k2].xr);</span><br><span class="line">t[k].yl=<span class="built_in">min</span>(t[k1].yl,t[k2].yl),t[k].yr=<span class="built_in">max</span>(t[k1].yr,t[k2].yr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k=<span class="built_in">newnode</span>();</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(t[k].<span class="built_in">leaf</span>(s[l]));</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">nth_element</span>(s+l,s+mid,s+r+<span class="number">1</span>,d?cmp1:cmp2);</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid,!d),<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r,!d);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line">point o;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> k,point p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t[k].lc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v1=<span class="built_in">newnode</span>(),v2=<span class="built_in">newnode</span>();</span><br><span class="line">t[v1]=t[k],t[v2].<span class="built_in">leaf</span>(p);</span><br><span class="line">t[k].lc=v1,t[k].rc=v2;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[k1].xl&lt;=p.x&amp;&amp;p.x&lt;=t[k1].xr&amp;&amp;t[k1].yl&lt;=p.y&amp;&amp;p.y&lt;=t[k1].yr) <span class="built_in">ins</span>(k1,p,!d);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ins</span>(k2,p,!d);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(k))&#123;o.x=k,o.y=d;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(point p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tot) <span class="keyword">return</span> t[++tot].<span class="built_in">leaf</span>(p);</span><br><span class="line">o.x=<span class="number">0</span>,<span class="built_in">ins</span>(<span class="number">1</span>,p,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(o.x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line">id=<span class="number">0</span>,<span class="built_in">pia</span>(o.x),<span class="built_in">build</span>(u,<span class="number">1</span>,id,o.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> xl,<span class="type">int</span> xr,<span class="type">int</span> yl,<span class="type">int</span> yr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xr&lt;t[k].xl||xl&gt;t[k].xr||yl&gt;t[k].yr||yr&lt;t[k].yl) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(xl&lt;=t[k].xl&amp;&amp;xr&gt;=t[k].xr&amp;&amp;yl&lt;=t[k].yl&amp;&amp;yr&gt;=t[k].yr) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(k1,xl,xr,yl,yr)+<span class="built_in">ask</span>(k2,xl,xr,yl,yr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,opt,xl,xr,yl,yr,ans;</span><br><span class="line">point k;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) cin&gt;&gt;xl&gt;&gt;yl&gt;&gt;n,<span class="built_in">insert</span>(k=(point)&#123;xl^ans,yl^ans,n^ans&#125;);</span><br><span class="line"><span class="keyword">else</span> cin&gt;&gt;xl&gt;&gt;yl&gt;&gt;xr&gt;&gt;yr,cout&lt;&lt;(ans=<span class="built_in">ask</span>(<span class="number">1</span>,xl^ans,xr^ans,yl^ans,yr^ans))&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可持久化"><a href="#可持久化" class="headerlink" title="可持久化"></a>可持久化</h3><h4 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> root[N],a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v;</span><br><span class="line">&#125;t[N*<span class="number">25</span>];</span><br><span class="line"><span class="type">int</span> n,m,tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].v=t[t[k].lc].v+t[t[k].rc].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k=++tot;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">(t[k].lc,l,mid);</span><br><span class="line"><span class="built_in">build</span>(t[k].rc,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> q,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[p=++tot]=t[q];t[p].v++;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">ins</span>(t[p].lc,t[q].lc,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ins</span>(t[p].rc,t[q].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k1,<span class="type">int</span> k2,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=t[t[k1].lc].v-t[t[k2].lc].v) <span class="keyword">return</span> <span class="built_in">ask</span>(t[k1].lc,t[k2].lc,l,mid,x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ask</span>(t[k1].rc,t[k2].rc,mid+<span class="number">1</span>,r,x-t[t[k1].lc].v+t[t[k2].lc].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> l,r,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i],b[i]=a[i];</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="built_in">build</span>(root[<span class="number">0</span>],<span class="number">1</span>,M);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">ins</span>(root[i],root[i<span class="number">-1</span>],<span class="number">1</span>,M,a[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class="line">cout&lt;&lt;b[<span class="built_in">ask</span>(root[r],root[l<span class="number">-1</span>],<span class="number">1</span>,M,x)]&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tries"><a href="#Tries" class="headerlink" title="Tries"></a>Tries</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">6e5</span>*<span class="number">25</span>+<span class="number">5</span>,NN=<span class="number">6e5</span>+<span class="number">5</span>;;</span><br><span class="line"><span class="type">int</span> s[N][<span class="number">2</span>],tot,root[N],t[N],n,m;</span><br><span class="line"><span class="type">int</span> b[NN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">25</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=v&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">        s[x][c^<span class="number">1</span>]=s[y][c^<span class="number">1</span>];</span><br><span class="line">        s[x][c]=++tot,t[s[x][c]]=tt;</span><br><span class="line">        x=s[x][c],y=s[y][c];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">25</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=(v&gt;&gt;i&amp;<span class="number">1</span>)^<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(t[s[x][c]]&gt;=l) res+=<span class="number">1</span>&lt;&lt;i,x=s[x][c];</span><br><span class="line">        <span class="keyword">else</span> x=s[x][c^<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">char</span> opt;</span><br><span class="line">    <span class="type">int</span> l,r,x;++n;</span><br><span class="line">    <span class="built_in">ins</span>(root[<span class="number">1</span>]=++tot,root[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) cin&gt;&gt;x,b[i]=x^b[i<span class="number">-1</span>],<span class="built_in">ins</span>(root[i]=++tot,root[i<span class="number">-1</span>],b[i],i);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;opt;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">&#x27;A&#x27;</span>) cin&gt;&gt;x,++n,b[n]=b[n<span class="number">-1</span>]^x,<span class="built_in">ins</span>(root[n]=++tot,root[n<span class="number">-1</span>],b[n],n);</span><br><span class="line">        <span class="keyword">else</span> cin&gt;&gt;l&gt;&gt;r&gt;&gt;x,cout&lt;&lt;<span class="built_in">ask</span>(root[r],l,b[n]^x)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="笛卡尔树"><a href="#笛卡尔树" class="headerlink" title="笛卡尔树"></a>笛卡尔树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,p[N];</span><br><span class="line"><span class="type">int</span> st[N],top;</span><br><span class="line"><span class="type">int</span> lc[N],rc[N],f[N];</span><br><span class="line"><span class="type">int</span> ans1,ans2;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=top;</span><br><span class="line"><span class="keyword">while</span>(k&amp;&amp;p[i]&lt;p[st[k]]) --k;</span><br><span class="line"><span class="keyword">if</span>(k) rc[st[k]]=i,f[i]=st[k];</span><br><span class="line"><span class="keyword">if</span>(k&lt;top) lc[i]=st[k+<span class="number">1</span>],f[st[k+<span class="number">1</span>]]=i;</span><br><span class="line">st[top=++k]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ans1^=i*(lc[i]+<span class="number">1</span>),ans2^=i*(rc[i]+<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=bb;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;b[i+<span class="number">1</span>]!=b[j+<span class="number">1</span>]) j=p[j];</span><br><span class="line"><span class="keyword">if</span>(b[j+<span class="number">1</span>]==b[i+<span class="number">1</span>]) ++j;</span><br><span class="line">p[i+<span class="number">1</span>]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tries-1"><a href="#Tries-1" class="headerlink" title="Tries"></a>Tries</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;st[i];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=st[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!s[p][c]) s[p][c]=++tot;</span><br><span class="line">p=s[p][c],++e[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;st[i];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=st[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!s[p][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p=s[p][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j) s[i][j]=<span class="number">0</span>;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;s[i];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!ch[u][c]) ch[u][c]=++tot;</span><br><span class="line">u=ch[u][c];</span><br><span class="line">&#125;</span><br><span class="line">p[u]++;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)<span class="keyword">if</span>(ch[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[u][i]) ch[u][i]=ch[nxt[u]][i];</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push</span>(ch[u][i]),nxt[ch[u][i]]=ch[nxt[u]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">0</span>,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;s[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">k=u=ch[u][c];</span><br><span class="line"><span class="keyword">while</span>(k&amp;&amp;!t[k])ans+=p[k],t[k]=<span class="number">1</span>,k=nxt[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]=a[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) sa[cnt[rk[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;++i) rk1[++num]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;k) rk1[++num]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i) sa[cnt[rk[rk1[i]]]--]=rk1[i],rk1[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(rk,rk1);</span><br><span class="line">rk[sa[<span class="number">1</span>]]=<span class="number">1</span>,num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">rk[sa[i]]=(rk1[sa[i]]==rk1[sa[i<span class="number">-1</span>]]&amp;&amp;rk1[sa[i]+k]==rk1[sa[i<span class="number">-1</span>]+k])?num:++num;</span><br><span class="line"><span class="keyword">if</span>(num==n) <span class="keyword">return</span>;</span><br><span class="line">m=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=f[x],f[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,e[tot]=z,ne[tot]=f[x],f[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//变量冲突时</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,e[tot]=z,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//网络流 费用流</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=f[x],f[x]=tot,e[tot]=z;</span><br><span class="line">to[++tot]=x,ne[tot]=f[y],f[y]=tot,e[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z,<span class="type">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=f[x],f[x]=tot,w[tot]=o,e[tot]=z;</span><br><span class="line">to[++tot]=x,ne[tot]=f[y],f[y]=tot,w[tot]=-o,e[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><h4 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> mp(a,b) make_pair(a,b)</span></span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">top</span>().second;q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">            v[x]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(d[x]+e[i]&lt;d[y=to[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    d[y]=d[x]+e[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mp</span>(-d[y],y));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+e[i])</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i];</span><br><span class="line"><span class="keyword">if</span>(!v[y]) q.<span class="built_in">push</span>(y),v[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="floyd"><a href="#floyd" class="headerlink" title="floyd"></a>floyd</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) d[i][j]=<span class="built_in">min</span>(d[i][k]+d[k][j],d[i][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Johnson"><a href="#Johnson" class="headerlink" title="Johnson"></a>Johnson</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(a,b) make_pair(a,b) </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[N],f[N],e[N],ne[N],cnt[N];</span><br><span class="line"><span class="type">int</span> n,m,tot;</span><br><span class="line"><span class="type">bool</span> v[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d[N],h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=f[x],e[tot]=z,f[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q1;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;cnt[s]=<span class="number">1</span>;</span><br><span class="line">q1.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q1.<span class="built_in">front</span>();</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+e[i])</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i];</span><br><span class="line">cnt[y]=cnt[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt[y]==n+<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!v[y]) q1.<span class="built_in">push</span>(y),v[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">1e9</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[x]+e[i]&lt;d[y=to[i]])</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i];</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">mp</span>(-d[y],y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">add</span>(x,y,z);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">spfa</span>(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=f[i];j;j=ne[j]) e[j]+=h[i]-h[to[j]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dijkstra</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[j]==<span class="number">1e9</span>) ans+=j*<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">else</span> ans+=j*(d[j]+h[j]-h[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> z&lt;res.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(e+<span class="number">1</span>,e+m+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(e[i].x),y=<span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        f[x]=y,ans+=e[i].z;</span><br><span class="line">        <span class="keyword">if</span>(++tot==n) <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> mp(a,b) make_pair(a,b)</span></span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="type">int</span> tot,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Prim</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">top</span>().second;q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">            v[x]=<span class="number">1</span>;</span><br><span class="line">            ans+=d[x];</span><br><span class="line">            <span class="keyword">if</span>(++tot==n) <span class="keyword">return</span> ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(e[i]&lt;d[y=to[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    d[y]=e[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mp</span>(-d[y],y));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Boruvka-Sollin"><a href="#Boruvka-Sollin" class="headerlink" title="Borůvka(Sollin)"></a>Borůvka(Sollin)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Sollin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">bool</span> fl=<span class="number">1</span>;fl;)</span><br><span class="line">    &#123;</span><br><span class="line">        fl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) p[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="built_in">find</span>(e[i].x),y=<span class="built_in">find</span>(e[i].y);</span><br><span class="line">            <span class="keyword">if</span>(x==y||v[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!p[x]||e[i].z&lt;e[p[x]].z) p[x]=i;</span><br><span class="line">            <span class="keyword">if</span>(!p[y]||e[i].z&lt;e[p[y]].z) p[y]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]&amp;&amp;!v[p[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                v[p[i]]=<span class="number">1</span>;</span><br><span class="line">                fl=<span class="number">1</span>;</span><br><span class="line">                ans+=e[p[i]].z;</span><br><span class="line">                <span class="keyword">if</span>(++tot==n) <span class="keyword">return</span> ans;</span><br><span class="line">                f[<span class="built_in">find</span>(e[p[i]].x)]=<span class="built_in">find</span>(e[p[i]].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="附：严格次小生成树"><a href="#附：严格次小生成树" class="headerlink" title="附：严格次小生成树"></a>附：严格次小生成树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>,NN=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N],tot,e[N],v[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,e[tot]=z,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==p[x]?x:p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> z&lt;res.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ed[N];</span><br><span class="line"><span class="type">int</span> f[N][NN],g1[N][NN],g2[N][NN];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d[x]=d[fa]+<span class="number">1</span>,f[x][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>]=&#123;g1[x][i<span class="number">-1</span>],g2[x][i<span class="number">-1</span>],g1[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>],g2[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>]&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a,a+<span class="number">4</span>);</span><br><span class="line">g1[x][i]=a[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> id=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(a[id]==a[<span class="number">3</span>]&amp;&amp;id&gt;<span class="number">-1</span>) --id;</span><br><span class="line"><span class="keyword">if</span>(id&gt;<span class="number">-1</span>) g2[x][i]=a[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line">g1[y][<span class="number">0</span>]=e[i],g2[y][<span class="number">0</span>]=-INF;</span><br><span class="line"><span class="built_in">dfs</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">1</span>,ans,res=INF;</span><br><span class="line"><span class="type">int</span> recond;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d[x]&lt;d[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)<span class="keyword">if</span>(d[f[x][i]]&gt;=d[y]) x=f[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)<span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mx=-INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[f[x][i]]&gt;=d[y]) mx=<span class="built_in">max</span>(mx,g1[x][i]==recond?g2[x][i]:g1[x][i]),x=f[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;ed[i].x&gt;&gt;ed[i].y&gt;&gt;ed[i].z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) p[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(ed+<span class="number">1</span>,ed+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">find</span>(ed[i].x),y=<span class="built_in">find</span>(ed[i].y);</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">p[x]=y,ans+=ed[i].z,v[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">add</span>(ed[i].x,ed[i].y,ed[i].z),<span class="built_in">add</span>(ed[i].y,ed[i].x,ed[i].z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">lca</span>(ed[i].x,ed[i].y);</span><br><span class="line">recond=ed[i].z;</span><br><span class="line"><span class="type">int</span> k1=<span class="built_in">find</span>(ed[i].x,k),k2=<span class="built_in">find</span>(ed[i].y,k);</span><br><span class="line">res=<span class="built_in">min</span>(res,<span class="built_in">min</span>(recond-k1,recond-k2));</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans+res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判负环"><a href="#判负环" class="headerlink" title="判负环"></a>判负环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">2e9</span>;</span><br><span class="line">d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+e[i])</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i];</span><br><span class="line"><span class="keyword">if</span>(!v[y]) q.<span class="built_in">push</span>(y),v[y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>((cnt[y]=cnt[x]+<span class="number">1</span>)==n) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> to[N],ne[N],f[N],e[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> v[N],cnt[N],d[N],q[N],l=<span class="number">1</span>,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=f[x],f[x]=tot,e[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">cnt[x]=<span class="number">1</span>;</span><br><span class="line">q[++r]=x;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=q[l++];</span><br><span class="line">        <span class="keyword">if</span>(l==N) l=<span class="number">0</span>;</span><br><span class="line">        v[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[x]+e[i]&lt;d[y=to[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                d[y]=d[x]+e[i];</span><br><span class="line">                cnt[y]=cnt[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[y]==n+<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!v[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    v[y]=<span class="number">1</span>,q[++r]=y;</span><br><span class="line">                    <span class="keyword">if</span>(r==N) r=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> x,a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;x;</span><br><span class="line">        <span class="built_in">add</span>(b,a,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">spfa</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// d[a]-d[b]&lt;=x</span></span><br></pre></td></tr></table></figure><h3 id="lca"><a href="#lca" class="headerlink" title="lca"></a>lca</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倍增法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d[x]=d[fa]+<span class="number">1</span>,f[x][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa) <span class="built_in">dfs</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d[x]&lt;d[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)<span class="keyword">if</span>(d[f[x][i]]&gt;=d[y]) x=f[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)<span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间戳</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tin[x]=++t;</span><br><span class="line">d[x]=d[fa]+<span class="number">1</span>,f[x][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa) <span class="built_in">dfs</span>(y,x);</span><br><span class="line">    tout[x]=++t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> tin[x]&lt;=tin[y]&amp;&amp;tout[x]&gt;=tout[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">pd</span>(fa[x][i],y))x=fa[x][i];</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树剖</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[x]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">s[x]=<span class="number">1</span>;</span><br><span class="line">f[x]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">s[x]+=s[y];</span><br><span class="line"><span class="keyword">if</span>(s[y]&gt;s[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[x]=t;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">y=to[i];</span><br><span class="line"><span class="keyword">if</span>(y==f[x]||y==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">x=f[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ST表</span></span><br><span class="line"><span class="comment">略</span></span><br><span class="line"><span class="comment">tarjan</span></span><br><span class="line"><span class="comment">略</span></span><br><span class="line"><span class="comment">四毛子(一半)</span></span><br><span class="line"><span class="comment">略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树形DP</span></span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x，<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> d=<span class="number">0</span>,d1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> d2=<span class="built_in">dp</span>(y)+e[i];</span><br><span class="line"><span class="keyword">if</span>(d2&gt;d) d1=d,d=d2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d2&gt;d1) d1=d2;</span><br><span class="line">&#125;</span><br><span class="line">res=<span class="built_in">max</span>(d1+d,res);</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有向图tarjan"><a href="#有向图tarjan" class="headerlink" title="有向图tarjan"></a>有向图tarjan</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++t,st[++top]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y=to[i]]) <span class="built_in">tarjan</span>(y),low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!c[y]) low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">while</span>(st[top+<span class="number">1</span>]!=x) s[cnt].<span class="built_in">push_back</span>(st[top]),c[st[top--]]=cnt,++size[cnt];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无向图tarjan"><a href="#无向图tarjan" class="headerlink" title="无向图tarjan"></a>无向图tarjan</h3><h4 id="桥"><a href="#桥" class="headerlink" title="桥"></a>桥</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> ine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">low[x]=dfn[x]=++t;</span><br><span class="line">st[++top]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y=to[i]])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(y,i),low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line"><span class="keyword">if</span>(low[y]&gt;dfn[x]) v[i]=v[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>)) low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="边双连通分量"><a href="#边双连通分量" class="headerlink" title="边双连通分量"></a>边双连通分量</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> ine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">low[x]=dfn[x]=++t;</span><br><span class="line">st[++top]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y=to[i]])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(y,i),low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line"><span class="keyword">if</span>(low[y]&gt;dfn[x])v[i]=v[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>)) low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">while</span>(st[top+<span class="number">1</span>]!=x) s[cnt].<span class="built_in">push_back</span>(st[top]),c[st[top--]]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++idx;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y=to[i]])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(y),low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line"><span class="keyword">if</span>(low[y]&gt;=dfn[x]) <span class="keyword">if</span>(res++||root!=x) s[++cnt]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="点双连通分量"><a href="#点双连通分量" class="headerlink" title="点双连通分量"></a>点双连通分量</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++t;</span><br><span class="line">    st[++top]=x;</span><br><span class="line">    <span class="keyword">if</span>(!f[x]&amp;&amp;!fa)</span><br><span class="line">    &#123;</span><br><span class="line">        s[++cnt].<span class="built_in">push_back</span>(x);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y=to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y,i),low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line">            <span class="keyword">if</span>(low[y]&gt;=dfn[x])</span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="keyword">while</span>(st[top+<span class="number">1</span>]!=y) s[cnt].<span class="built_in">push_back</span>(st[top--]);</span><br><span class="line">                s[cnt].<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y!=fa) low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉回路"><a href="#欧拉回路" class="headerlink" title="欧拉回路"></a>欧拉回路</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[++top]=s;</span><br><span class="line"><span class="keyword">while</span>(top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=st[top],i=f[x];</span><br><span class="line"><span class="keyword">while</span> (i&amp;&amp;vis[i]) i=ne[i];</span><br><span class="line"><span class="keyword">if</span>(i) st[++top]=to[i],vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>,f[x]=ne[i]; </span><br><span class="line"><span class="keyword">else</span> --top,ans[++cnt]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><h4 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">color</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> d)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[x]=d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[y=to[i]]) <span class="built_in">dfs</span>(y,<span class="number">3</span>-x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v[y]==v[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最大匹配"><a href="#最大匹配" class="headerlink" title="最大匹配"></a>最大匹配</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v[y=to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        v[y]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!mat[y]||<span class="built_in">find</span>(mat[y]))</span><br><span class="line">        &#123;</span><br><span class="line">            mat[y]=x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">match</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(i)) ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最小点覆盖-最大匹配"><a href="#最小点覆盖-最大匹配" class="headerlink" title="最小点覆盖=最大匹配"></a>最小点覆盖=最大匹配</h4><h4 id="最大独立集-总数-最小点覆盖"><a href="#最大独立集-总数-最小点覆盖" class="headerlink" title="最大独立集=总数-最小点覆盖"></a>最大独立集=总数-最小点覆盖</h4><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h4><h5 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==t) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="type">int</span> rest=flow;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=cur[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">cur[x]=i;</span><br><span class="line"><span class="keyword">if</span>(e[i]&amp;&amp;d[y=to[i]]==d[x]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">dinic</span>(y,<span class="built_in">min</span>(rest,e[i]));</span><br><span class="line"><span class="keyword">if</span>(!k) d[y]=<span class="number">0</span>;</span><br><span class="line">e[i]-=k,e[i^<span class="number">1</span>]+=k,rest-=k;</span><br><span class="line"><span class="keyword">if</span>(!rest) <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cur[i]=f[i],d[i]=<span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line">d[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=f[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i]&amp;&amp;!d[y=to[i]])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(y);d[y]=d[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line"><span class="keyword">while</span>(k=<span class="built_in">dinic</span>(s,<span class="number">1</span>&lt;&lt;<span class="number">30</span>)) res+=k;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h4><h5 id="SSP"><a href="#SSP" class="headerlink" title="SSP"></a>SSP</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">0x3f3f3f3f</span>,c[i]=f[i],v[i]=<span class="number">0</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+w[i]&amp;&amp;e[i])</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+w[i];</span><br><span class="line"><span class="keyword">if</span>(!v[y]) q.<span class="built_in">push</span>(y),v[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[t]!=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==t)</span><br><span class="line">&#123;</span><br><span class="line">ans+=flow,res+=flow*d[t];</span><br><span class="line">v[t]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> used=<span class="number">0</span>;</span><br><span class="line">v[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=c[x],y;i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">y=to[i];</span><br><span class="line"><span class="keyword">if</span>((!v[y]||y==t)&amp;&amp;e[i]&amp;&amp;d[x]+w[i]==d[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">dinic</span>(y,<span class="built_in">min</span>(flow-used,e[i]));</span><br><span class="line"><span class="keyword">if</span>(!k) <span class="keyword">continue</span>;</span><br><span class="line">e[i]-=k,e[i^<span class="number">1</span>]+=k,used+=k;</span><br><span class="line"><span class="keyword">if</span>(used==flow) <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">SSP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        v[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[t])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">            <span class="built_in">dinic</span>(s,<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) (res*=a)%=mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>,(a*=a)%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//矩阵快速幂</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> f[N][N],m,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) f[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _m,<span class="type">int</span> _n)</span></span>&#123;m=_m,n=_n;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">mul</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node z;</span><br><span class="line">z.<span class="built_in">init</span>(x.m,y.n);</span><br><span class="line">z.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x.m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=x.n;++k)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=y.n;++j)</span><br><span class="line">                (z.f[i][j]+=x.f[i][k]*y.f[k][j])%=mod;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">qpow</span><span class="params">(node x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node res=x;--y;</span><br><span class="line"><span class="keyword">while</span>(y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=<span class="built_in">mul</span>(res,x);</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>,x=<span class="built_in">mul</span>(x,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><h4 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!v[i]) v[i]=i,prime[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]&gt;v[i]||prime[j]&gt;n/i) <span class="keyword">break</span>;</span><br><span class="line">v[i*prime[j]]=prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="筛欧拉函数"><a href="#筛欧拉函数" class="headerlink" title="筛欧拉函数"></a>筛欧拉函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!v[i]) v[i]=i,prime[++cnt]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]&gt;v[i]||prime[j]*i&gt;n) <span class="keyword">break</span>;</span><br><span class="line">v[i*prime[j]]=prime[j];</span><br><span class="line">phi[i*prime[j]]=phi[i]*(i%prime[j]?prime[j]<span class="number">-1</span>:prime[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="筛莫比乌斯函数"><a href="#筛莫比乌斯函数" class="headerlink" title="筛莫比乌斯函数"></a>筛莫比乌斯函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mobius</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[i]) prime[++cnt]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            v[prime[j]*i]=prime[j];</span><br><span class="line">            mu[i*prime[j]]=i%prime[j]?-mu[i]:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;d,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        d=a,x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,d,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">BSGS</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b%p==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">sqrt</span>(p)+<span class="number">1</span>;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=b%p;i&lt;k;++i) mp[j]=i,(j*=a)%=p;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;++i) (s*=a)%=p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>,j=s;i&lt;=k;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">find</span>(j)!=mp.<span class="built_in">end</span>()) <span class="keyword">return</span> i*k-mp[j];</span><br><span class="line">        (j*=s)%=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h3><h4 id="CRT-1"><a href="#CRT-1" class="headerlink" title="CRT"></a>CRT</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">CRT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> M=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i]&gt;&gt;b[i],M*=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        m[i]=M/a[i];</span><br><span class="line">        <span class="built_in">exgcd</span>(m[i],a[i],d,x,y);</span><br><span class="line">        ans=((ans+m[i]*x*b[i])%M+M)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EXCRT"><a href="#EXCRT" class="headerlink" title="EXCRT"></a>EXCRT</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">EXCRT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;lcm&gt;&gt;ans;</span><br><span class="line">    ans=(ans%lcm+lcm)%lcm;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        b=(b-ans%a+a)%a;</span><br><span class="line">        <span class="built_in">exgcd</span>(lcm,a,d,x,y);</span><br><span class="line">        <span class="type">int</span> k=x*(b/d)%a;</span><br><span class="line">        ans+=k*lcm;</span><br><span class="line">        lcm=lcm/d*a;</span><br><span class="line">        ans=(ans%lcm+lcm)%lcm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆元递推"><a href="#逆元递推" class="headerlink" title="逆元递推"></a>逆元递推</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inv[<span class="number">1</span>]=jcinv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) inv[i]=(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) jcinv[i]=jcinv[i<span class="number">-1</span>]*inv[i]%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lucas定理"><a href="#Lucas定理" class="headerlink" title="Lucas定理"></a>Lucas定理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*jcinv[y]*jcinv[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lucas</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;mod) <span class="keyword">return</span> <span class="built_in">C</span>(x,y);</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">Lucas</span>(x/mod,y/mod)*<span class="built_in">Lucas</span>(x%mod,y%mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ans+=(k/l)*(r-l+<span class="number">1</span>)*(l+r)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gauss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>,r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;c&lt;=n;++c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t=r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=r+<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;<span class="built_in">fabs</span>(a[t][c])) t=i;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[t][c])&lt;eps) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=c;i&lt;=n+<span class="number">1</span>;++i) <span class="built_in">swap</span>(a[t][i],a[r][i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n+<span class="number">1</span>;i&gt;=c;--i) a[r][i]/=a[r][c];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=r+<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=n+<span class="number">1</span>;j&gt;=c;--j) a[i][j]-=a[r][j]*a[i][c];</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=r;i&lt;=n;++i)<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][n+<span class="number">1</span>])&gt;eps) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i;--i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)a[i][n+<span class="number">1</span>]-=a[i][j]*a[j][n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="快读快写"><a href="#快读快写" class="headerlink" title="快读快写"></a>快读快写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> sta[<span class="number">35</span>],top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sta[top++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">putchar</span>(sta[--top]+<span class="number">48</span>); </span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据生成和对拍"><a href="#数据生成和对拍" class="headerlink" title="数据生成和对拍"></a>数据生成和对拍</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成n个1e9以内的数 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> mod1=<span class="number">1e6</span><span class="number">-1</span>,mod2=<span class="number">1e9</span><span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">rand</span>()%mod1;</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;<span class="built_in">pow</span>(<span class="number">-1</span>, <span class="built_in">rand</span>())*(<span class="built_in">rand</span>()*<span class="built_in">rand</span>()%mod2)&lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//负数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;<span class="built_in">rand</span>()*<span class="built_in">rand</span>()%mod2&lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//正数 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(++t) &#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;data.exe &gt; data.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> t1=<span class="built_in">clock</span>();</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;1.exe &lt; data.txt &gt; 1.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> t2=<span class="built_in">clock</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;测试点%d 用时%dms\n&quot;</span>,t,t2-t1);</span><br><span class="line">        <span class="keyword">if</span>(t2-t1&gt;<span class="number">1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;超时！&quot;</span>);</span><br><span class="line">            <span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;2.exe &lt; data.txt &gt; 2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">system</span>(<span class="string">&quot;fc 1.txt 2.txt&quot;</span>))    <span class="type">char</span> c=<span class="built_in">getchar</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="悬线法"><a href="#悬线法" class="headerlink" title="悬线法"></a>悬线法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> l[N][N],r[N][N],up[N][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">cin&gt;&gt;c,a[i][j]=c==<span class="string">&#x27;F&#x27;</span>,l[i][j]=r[i][j]=j,up[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=m;++j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&amp;&amp;a[i][j<span class="number">-1</span>]) l[i][j]=l[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m<span class="number">-1</span>;j;--j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&amp;&amp;a[i][j+<span class="number">1</span>]) r[i][j]=r[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;a[i][j]&amp;&amp;a[i<span class="number">-1</span>][j])</span><br><span class="line">&#123;</span><br><span class="line">l[i][j]=<span class="built_in">max</span>(l[i][j],l[i<span class="number">-1</span>][j]);</span><br><span class="line">r[i][j]=<span class="built_in">min</span>(r[i][j],r[i<span class="number">-1</span>][j]);</span><br><span class="line">up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]) ans=<span class="built_in">max</span>(ans,(r[i][j]-l[i][j]+<span class="number">1</span>)*up[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">double</span> ans=<span class="number">1e18</span>,ansx,ansy,x,y,t;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> bl=<span class="number">0.999</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,w;</span><br><span class="line">&#125;a[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">energy</span><span class="params">(<span class="type">double</span> x,<span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> xx=x-a[i].x,yy=y-a[i].y;</span><br><span class="line">rt+=<span class="built_in">sqrt</span>(xx*xx+yy*yy)*a[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">SA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> x=ansx,y=ansy;</span><br><span class="line">t=<span class="number">20000</span>;</span><br><span class="line"><span class="keyword">while</span>(t&gt;<span class="number">1e-15</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> xx=x+((<span class="built_in">rand</span>()&lt;&lt;<span class="number">1</span>)-RAND_MAX)*t;</span><br><span class="line"><span class="type">double</span> yy=y+((<span class="built_in">rand</span>()&lt;&lt;<span class="number">1</span>)-RAND_MAX)*t;</span><br><span class="line"><span class="type">double</span> now=<span class="built_in">energy</span>(xx,yy);</span><br><span class="line"><span class="type">double</span> k=now-ans;</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>)ansx=x=xx,ansy=y=yy,ans=now;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-k/t)*RAND_MAX&gt;<span class="built_in">rand</span>()) x=xx,y=yy;</span><br><span class="line">t*=bl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="type">int</span> sumx=<span class="number">0</span>,sumy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a[i].x,&amp;a[i].y,&amp;a[i].w);</span><br><span class="line">sumx+=a[i].x,sumy+=a[i].y;</span><br><span class="line">&#125;</span><br><span class="line">ansx=(<span class="type">double</span>)sumx/n,ansy=(<span class="type">double</span>)sumy/n;</span><br><span class="line"><span class="built_in">SA</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3f %.3f\n&quot;</span>,ansx,ansy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>追番记录</title>
      <link href="//%E7%94%9F%E6%B4%BB/%E8%BF%BD%E7%95%AA%E8%AE%B0%E5%BD%95/"/>
      <url>//%E7%94%9F%E6%B4%BB/%E8%BF%BD%E7%95%AA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再想想" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="afde17ba581512464f742653ce8fe3acc297b2894f5e0289e2c53ea98f2141d7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">nchの大好きな番</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSP2022游记</title>
      <link href="//%E6%B8%B8%E8%AE%B0/CSP2022%E6%B8%B8%E8%AE%B0/"/>
      <url>//%E6%B8%B8%E8%AE%B0/CSP2022%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2022/10/20/0e093f893d44300b.png"></p><span id="more"></span><h4 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h4><p>在机房里颓，背了背对拍（虽然S组没用上）</p><p>颓废好累啊</p><h4 id="Day0-5"><a href="#Day0-5" class="headerlink" title="Day0.5"></a>Day0.5</h4><p>考J组</p><p><del>为什么不能带零食进考场啊</del></p><p>T1 一眼看出要特判，水题</p><p>写了对拍拍上，心情愉悦</p><p>T2 本想枚举因数，被$n&lt;=10^{18}$的数据范围吓退</p><p>一分钟后发现是韦达定理，切了</p><p>T3 一眼过去字符串 再看*?~&amp;%$#&amp;^</p><p>发现不可做，先开T4</p><p>T4 一眼DP，十五分钟写了个$O(n^{2}k)$的，调调过了大样例</p><p>此时9点40</p><p>回来开T3</p><p>接着就是<del>一顿乱搞</del>，有条理的递归，<del>话说怎么调了一个半小时</del></p><p>感觉T3会挂，不想改了，开始乱搞</p><p>为了锻炼码力写了一遍树剖，<del>虽然后来发现有锅</del></p><p>果断开始睡觉，差点被<code>one hui</code>抓住</p><p>期望得分：100+100+50+100=350pts</p><h4 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h4><p>14:00 进考场开始罚坐</p><p>14:26 密码$belief2022$</p><p>然后看T1，神秘图论，看了5分钟没思路</p><p>顺手写了个快读快写</p><p>又看T2，游戏？博弈论？矩阵？果断放弃</p><p>T3，图论，题目描述有点长，不想看</p><p>T4似乎是一个树上问题，看起来似乎比较可做（后来发现可做个gui）<del>话说怎么又是图论，今年没DP吗</del></p><p>回来继续看T1，想了个$O(n^{4})$的算法，看起来$n=300$的数据都跑不过，不想打</p><p>此时旁边myzx的巨佬在草稿纸上奋笔疾书，害怕ing</p><p>打了个dijkstra<del>为什么不打bfs</del></p><p>此时已经过去40分钟，决定先开T2</p><p>看了题面和$n&lt;=10^{5}$的数据范围之后，觉得是数据结构</p><p>手玩了几个样例，几分钟后想到用时间$O(nlogn)$的数据结构维护一下区间最大，最小，非负最小，非正最大就行了（话说这题为什么暴力分有60pts啊）</p><p>想到8个ST的码量和空间，决定打线段树，二十分钟打完，过了第一个样例</p><p>改改过了第二个样例，第三个样例一拍，错了一车</p><p>接着改改改，半小时发现把v2，v3记反了，一发过了大样例，跑了200+ms</p><p>此时开考一个半小时，去上了个厕所，回来写T3，觉得跟基环树森林有关，但不知道怎么写，写了个$O(qn)$的暴力</p><p>T4不想写lca，把T1的dijkstra复制过来，写了个$O(n^{2}logn)$的暴力</p><p>继续写T1，脑抽加上全排列写了个$O(4!×n^{4})$的暴力 <del>话说这次只会暴力</del></p><p>此时5点钟，估摸着不挂分有200+pts了，准备写部分分</p><p>先看T1，发现$k=0$的情况似乎一样不可做，先弃了</p><p>再看T3，不知道没有2，4操作对暴力有什么用，弃了</p><p>最后看T4，这个k=1时感觉可做，写了个lca，又拆点，<del>但午饭没吃饱好饿啊</del></p><p>运行程序突然发现死循环，手玩一下发现建成图了，艹，果断放弃</p><p>练习罚坐和检查文件（饿的要死）</p><p>期望得分：40pts+100pts+40pts+44pts=224pts</p><p>出来之后看luogu群发现一车人做出T1T2，250+pts</p><p>自闭了</p><h4 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h4><p>小图灵上查分，J组AK了</p><p>从luogu群里找到SC代码</p><p>在luogu上测J组AK了，不知道主函数不打<code>return 0</code>会不会RE,S组T3无数据，T4挂了12pts</p><p>T3应该在$n&gt;=1000$时全输出“NO”的，应该能骗分，可惜了</p><p>在infoj上测没挂分，感觉数据很人性</p><p>希望€€￡数据水一点</p><h4 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h4><p>回学校机房，因为whk被教练约谈了</p><p>luogu S组T3数据造出来了 没挂分</p><p>期望得分:224-12=212pts</p><p>求老天给个七级勾</p><h4 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h4><p>infoj把SC全省代码拿来跑了一下，224pts，rk77</p><p>1= 在180~190pts左右</p><p>本来还觉得考得好，<del>好个锤子</del></p><p>七级勾估计没了</p><p>等€€￡出成绩吧</p><h4 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h4><p>小图灵上估分208pts，T4挂成28pts</p><h4 id="Day-11"><a href="#Day-11" class="headerlink" title="Day 11"></a>Day 11</h4><p>出分了 J组AK了，S组208pts</p><p>T4挂成28pts，七级勾没了</p><p>€€￡T3用脚造数据吗，全输出”NO”有45pts</p><p><del>暴力只有40pts</del></p><p><del>话说T1,T3怎么都可以随机化乱搞啊</del></p><p>NOIP再战吧</p><h4 id="Day-inf"><a href="#Day-inf" class="headerlink" title="Day inf"></a>Day inf</h4><p>成绩公示后发现省rk110+</p><p>我TM考了个寂寞</p><p>PS：本来前面还有一千多字的，后来<del>发现过于SB</del>删了</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>master定理</title>
      <link href="//OI/master%E5%AE%9A%E7%90%86/"/>
      <url>//OI/master%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>初赛模拟错了个题，就来学一下,<del>以下内容大部分是复制的</del></p><span id="more"></span><h2 id="一-符号"><a href="#一-符号" class="headerlink" title="一.符号"></a>一.符号</h2><p>在介绍master定理前，我们需要介绍几个符号：</p><p>$T(n)$表示时间复杂度，我们可以这么表示时间复杂度：</p><p>$T(n)=$下面的任意一个符号(一个单项式)。</p><p>$Θ$，读音：<code>theta</code>，等于的意思。</p><p>$O$，读音：<code>big-oh</code>，小于等于的意思。</p><p>$o$，读音：<code>small-oh</code>，小于的意思。</p><p>$Ω$，读音：<code>big omega</code>，大于等于的意思。</p><p>$ω$，读音：<code>small omega</code>，大于的意思。</p><h2 id="二-master定理"><a href="#二-master定理" class="headerlink" title="二.master定理"></a>二.master定理</h2><p>现在我们介绍一个定理，它的名字叫$master$定理，又名主定理，它的内容是这样的：我们将一个规模为$n$的问题，通过分治得到$a$个规模为$\frac{n}{b}$的子问题，每次递归带来的额外计算为$f(n)$，那么我们得到以下关系式：</p><p>$T(n)=aT(\frac{n}{b})+f(n)$</p><p>此外，我们定义一个$c_{crit}$，它是这么计算的：</p><p>$c_{crit}=log_ba$</p><p>那么存在以下关系：</p><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><h4 id="当-f-n-O-n-c-，且-c-lt-c-crit-时-T-n-Theta-n-c-crit"><a href="#当-f-n-O-n-c-，且-c-lt-c-crit-时-T-n-Theta-n-c-crit" class="headerlink" title="当$f(n)=O(n^c)$，且$c&lt;c_{crit}$时$   \ \      $$T(n)$=$\Theta(n^{c_{crit}})$"></a>当$f(n)=O(n^c)$，且$c&lt;c_{crit}$时$   \ \      $$T(n)$=$\Theta(n^{c_{crit}})$</h4><h4 id="eg"><a href="#eg" class="headerlink" title="eg."></a>eg.</h4><p>$T(n)=8T(\frac{n}{2})+1000n^{2}$</p><p>此时,</p><p>$a=8,b=2,f(n)=1000n^{2}$</p><p>所以 $c=2，c_{crit}=log_ba=3&gt;c$</p><p>所以 $T(n)=\Theta(n^{log_ba})=\Theta({n^{3}})$</p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><h4 id="若存在一个非负数-k-，使得-f-n-Theta-n-c-crit-log-k-n-时-T-n-Theta-n-e-crit-log-k-1-n"><a href="#若存在一个非负数-k-，使得-f-n-Theta-n-c-crit-log-k-n-时-T-n-Theta-n-e-crit-log-k-1-n" class="headerlink" title="若存在一个非负数$k$，使得$f(n)=\Theta(n^{c_{crit}}\log^{k}n)$时 $T(n)=\Theta(n^{e_{crit}}log^{k+1}n)$"></a>若存在一个非负数$k$，使得$f(n)=\Theta(n^{c_{crit}}\log^{k}n)$时 $T(n)=\Theta(n^{e_{crit}}log^{k+1}n)$</h4><h4 id="eg-1"><a href="#eg-1" class="headerlink" title="eg."></a>eg.</h4><p>$T(n)=2T(\frac{n}{2})+10n$</p><p>此时</p><p>$a=2,b=2,f(n)=10n$</p><p>$c_{crit}=log_ba=1$</p><p>当$k=0$时</p><p>$f(n)=O(n^{c_{crit}}log^{k}n)$</p><p>所以       $T(n)=\Theta(n^{c_{crit}}\log^{k+1}n)=\Theta(n\log n)$</p><h3 id="2-EX"><a href="#2-EX" class="headerlink" title="2.EX"></a>2.EX</h3><p>当存在一个k，使$f(n)=\Theta(n^{c_{crit}}log^{k}n)$时</p><p>$T(n)=\begin{cases}\Theta(n^{c_{crit}}log^{k+1}n)(k&gt;-1)\\ \Theta(n^{c_{crit}}loglogn) (k=-1)\\ \Theta(n^{c_{crit}}) (k&lt;-1)\end{cases}$</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><h4 id="当-f-n-Omega-n-c-，且-c-gt-c-crit-时-T-n-Theta-f-n"><a href="#当-f-n-Omega-n-c-，且-c-gt-c-crit-时-T-n-Theta-f-n" class="headerlink" title="当$f(n)=\Omega(n^{c})$，且$c&gt;c_{crit}$时 $T(n)=\Theta(f(n))$"></a>当$f(n)=\Omega(n^{c})$，且$c&gt;c_{crit}$时 $T(n)=\Theta(f(n))$</h4><h4 id="eg-2"><a href="#eg-2" class="headerlink" title="eg."></a>eg.</h4><p>$T(n)=2T(\frac{n}{2})+n^{2}$</p><p>此时</p><p>$a=2，b=2，f(n)=n^{2}$</p><p>当$c$=2时，$f(n)=\Omega(n^{c})$</p><p>又因为    $c_{crit}=log_ba=1&lt;c$</p><p>所以     $T(n)=\Theta(f(n))=\Theta(n^{2})$</p><p>参考证明请转<a href="http://www.doc88.com/p-9761826142176.html">这里</a></p><h2 id="三-eg"><a href="#三-eg" class="headerlink" title="三.eg"></a>三.eg</h2><p>好，是时候拿出我的错题了</p><p>$T(n)=9T(\frac{n}{3})+n$</p><p>$T(1)=1$</p><p>$a=9,b=3,f(n)=n,c_{crit}=log_ba=2$</p><p>因为$c=1&lt;c_{crit}$</p><p>所以$T(n)=\Theta(n^{log_ba})=\Theta(n^{2})$</p><h3 id="本文终"><a href="#本文终" class="headerlink" title="本文终"></a>本文终</h3><p>PS:这个$Latex$打死我了，QwQ</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="//%E7%94%9F%E6%B4%BB/%E6%97%A5%E8%AE%B0/"/>
      <url>//%E7%94%9F%E6%B4%BB/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="私の好きなタイプですね" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="66559ebd875caf7fc578b8ca86517e7f22d14d4c30c52b2bdc02cb49f0e485fc">e0b64c9f75e922280ddadaada83b1a616d995a56bcf6807ce271a33f406c08ce47105ae015aca16c4f0273450fff790ab2d061b0512115037143e5c089c1920d68cc6d347e781bd100c76d5aee0719154bcbe52b0157827cc3226ff0b43f15dfbcc4778d920ce937883ab55f4fbeae61ae17299bb084c8603df1f723bde6b391d66806202c565c3dc11bb3b85d0942291a50bdc16a225b2833fbba58f244ca2b8b91123de6cd75b50c34073a0042b7d2b5f80f439f4b2bf68adfb6e75ebea8e5593b478d4ee61ccf5c5a0b79e567cff8bb4b7f47704a9ac0031795234e323b54e81200117b482c1c5db6f73508bda329ac2f04171277e89485fbb3969a17e986c6bb6dd3da72f4bfd290d7dcefb173e15405a5743bae37b42de8f263d520ae3ccd04bf1eef0c29f1db01b4a74743fca37d670f39e6d50421828877dcbe0fbee38f773719d9733007fc35dabdcb58c5af0454c82762ca3fa5220e4da48c97a5c1a74193e255145f047989a6f54656d58c7f4ce1d3e13a7c0c40cd0704d2e17b1bc94ac76c174b685080cb59457753815c25e0ff884b09c84dc1a0e01778b83c0426d7b245aa3f0c66e4511d83417c940a7ce49a4aacaa5d7dac59a12c71474d1ce63c01589287d4e05b195e65a54fa543a3f5dc78b7d57fc0701ea14a138fd64d02512e1d17fc535025ac81118f11c8da1d1fccb56d2401a625a7de376372216026c0aa7fac8d0eac192a95688d42210067b2e2a05d060dfc69c229290922469fb288bd2d9efac44ee7212163fefcdbab6e7908353f1796b6178e14e808cab5b97ebc3b8d95c77838abad59adca361023b2c876ada2949875ea0adcdc7bcbe08623b451155791930bfd6ead07e4083dac132547df7c03821e34857b2ead6ec4e17b712dd2b825f16668362533b2ba530e4ada22b293c4141349c0905a3ce94d37c30e435c9e1bb9856912496305dd18b137c791ffeceda1a82119e3770164a429435866378cdfd6d43b9be62cac9710b8feaa60d007289861d5ada1fcbc2525a6a7a42e679f2b3e69905c29c4ac4053d71fc1a330416938f4f48bdd00694d2cc8da53ff396684186cea26d5a5ee5cbcc3dfce057d593a19d7165554964839fee34b194c45b26e7efc34b765fdeb4d13cf2fd54289289c5b8f5bf928f63738bd851da240556b95211b792c83416955e6302132fcc5a4be3e88542f124b24cb0d960b200c1099aa85eb55257e7a9a37f0b319a8baa06c8fbf8fe9e46984dc67e9c6aadb1870e3061ca1e081855f47731aaade7315d39766c2b73754ed12aedcda350cbcdf36ced2064bd69b7162eb472b6f819eee85aa93a0d031b41f05baa91f821a3e57f85b7af66817316f755a093f28910dde30c86b9253f668c6757dc7f6c1ce0b502eaf366624a71f7b8a1c9a0236dfc36eed10b454b3c61067234319e8688c82d507dcde226b2a359cfad2218cbf6b078c28ead2870194b48f9e6781317e5234f41252243eb80dd9c1b5eda152d17e27f8d1807474ab89b7a556a050bc58d8dcd8e67d60ff3a4354a2ec5b86573155ee1986067fb755f33fdb54e36f94f2a6b9cc8ff1cfd3c646b3d02f778ecb0e0da3083ef90cfbba44a99e3612fc4c00cc94dffe5fba2112f8ff2b190d24c3b2ab21eb5045266952db376d41992cfba267cb7faf77cee566d9262b30ab5e1623c8f59b7cae9bbdc46928e447f27e8d2c484a396b2f2c06da92572d5517d91651f04f309e03019c28b4f154a91d3ba341c7e6b89e08c0a66114e814813bae18f5a94cb1faeff19ff29192b8a55f5b198c09f2c31faedc921d9dcb7c9c69307eed50e3a7b0e4be8043606d20c11ce149532237e2641d115cb222c483bc75aad63e0af170e4386bd2844961a27f64135ef27805d1baede3b99fdcdf8358cff577394e4bdf0eb68ef97bf9ab140ad4192896c997528d2092f0d9f008cfe752aaac625b6bda5ba930a1241d9b11697e149a80469bde5a417d505446b278bd5b7fd1662a1192f811f0e3a6b3f9868d83ff38c514625e1b250108a200eb0ac79ea82389d57f37312d0469b51a8660e73ee6412b3058acadc6bf6e26d073ccbdeae9b678aebb4655df31165a653360783544772937d9a9c87c7c82c8506acc316dbba8aa58cadba428baf24b503c6ba58f09d04a4d708559cf9e04e99893b03eb1f42873c64715a88f4208b5148db116e8750f3bde8f2220642eecf92bdc00cdd509cd55739884209fcb31c27b4a451be5dfb2dc73409d778580d638537bbcb5dcfa8554c1a96093835473b8d6eb9f2c5823409ad5f1ec3ad20cf2e10246c35ffb0e1bfee71e22fb1c6deb79c0c55700110c0525ed5d177f405e2ff7781b6218789a05126a25b2d32f2b020d2d9831775d58b961769df62dee3e5b1271b2a034ebdc00f5565b793b6819f2540356a5739a0aedf92d3612068b52ff5bbb4e08922bff7412721ed84976b212c76fe6a5021f7f606292c7b169fae6a4fc41892d4a2e246bcae15ffe527849fb2820d5bc8f9fdf38d1256478cade6cb783519fa4f8c071048abfc56f21af728c0a371cf12ea02d6b2cc9388389e7a721dc5550dc3aaffae7e1e06735c5909ede2680baab0507717511760155adc9752e1ccdf463fa6f084710fba3dd77009f213e118c311bb29bfeb8229005e65a04623bf5b14d99af93e8079dff0ba04efb263116db6514c478f04b1a7b5be672583680d95bf38d621ecedb6fb4fc88349d3a6302a9bcbaca16bb985538fba04877f273614be685cbe31850977633c15f21fd59468fb362055ceb430481a84e1b441a9925536786138b514ef349587dbe309bd7dccf006895b88923c643136189bfc827182eaae92e6c7bb2f42d658b39e49bdab531368a82acc3c0ed708af2dbc9ea0cd3acb550f3475cbdc4e81677134ea726cb68002a3231a530176229c8b69790c2f0c9d8239d60fe6742704247a2e80d33c9006a09388b63a3ec07c3365fc474796f0487bc454100bf5eb393126699ee60a8608107f22c20c8c5349542d17f300ce74ef0076de48896ad4133a31df4769238b97110ac3e7c77ab0da07d83a84d179b4171f5f6678aaaa98409dbcb36e1b0718bd2954eccbc669ec7f00a3e03ba29ba1b68af5ca9484becd924899f6043e2dbe62761dc7897740b612018ede1a9179bacb271c6a089d565f3215ebc80286a79373bd420d7cc8a43c546ebd12dedb86f1e1290687d97c18fe6b9eb126163e75e519e0f1f75a811320e87b0f3f8b7678f3fbfca9486f717df04ad49e1ba58c597704c5fb6fa65656899fd31dab1ddb21fee424c72e1b34520b958bab297b666bb86527377515b931408fac241d57a6eaf376a3c0e4ab95c1e341f6a2c0740210a18db968a04f43afe4afca196a00dd453126ea0b5f3a1c78397a91e582bceabcc7c282e8b2323564f507e2dcff55bed5718a9753d715503e0c462569e7fb79d9306eebf69b9329d2d657e16a7d4b064ff474bfbd4690fb836ca8cd38d412738b267aa501f8bca775136dafd92cfcc56e864034a9b289773dca9af4be84b32511096ae3672c01019c248b994b882e18da13b013ed47b9d9db44164e30c8a1b2f1da703a6563e5e2a8e34aeb1a64b9db30b6568633cfa72cda66b90fa3504d48cc8d0eea003a11e0898aa6c5c13df9e9ee86ad494c86034a41d28c50e6520a1077396a7518b2e02d980ad6b37afd3ccd893be9161cb6432dc02395b3a2280a17428d23a7865dce7871482167011c671686772e3af04bf340066ff4bf25ca552a35b0e78732b4fa86de0d3b5e2c52c53d9456ac50efb48ea863df1be1ce27ed47a91ec07acebdc2b1763dc6625e5738ef684be385613f5f22abc5c6fa191738b5a6b7e3dfbdbaab7bd739d1b8b0046ae4e0d19703107ca697af2315d994873809a41b340da974d380c9bd3e36708cb6badc9193b02530d0771285a474681153ff18d23376c71047ec7c4dcccca91a99441c57aa593ec147ff2d277789ea4db7edbd8c82be8728a9c83</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">可愛くて、強くて理性的なバカ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随机100题</title>
      <link href="//OI/%E9%9A%8F%E6%9C%BA100%E9%A2%98/"/>
      <url>//OI/%E9%9A%8F%E6%9C%BA100%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>估计要咕咕咕了</p><span id="more"></span><h2 id="绿题"><a href="#绿题" class="headerlink" title="绿题"></a>绿题</h2><h3 id="P2736-USACO3-4-“破锣摇滚”乐队-Raucous-Rockers"><a href="#P2736-USACO3-4-“破锣摇滚”乐队-Raucous-Rockers" class="headerlink" title="P2736 [USACO3.4]“破锣摇滚”乐队 Raucous Rockers"></a><a href="https://www.luogu.com.cn/problem/P2736">P2736 [USACO3.4]“破锣摇滚”乐队 Raucous Rockers</a></h3><p>一道刷过的水题,但因为<del>懒</del>赶时间，我就<del>厚颜无耻</del>地<del>假装·</del>AC了<br>看数据范围<del>和标签</del>，我们可以知道<del>（猜出）</del>这是一道状压DP<del>（搜索）</del>题，然后就几乎是<del>(贺）</del>板子</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 k&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,t,m,a[<span class="number">25</span>],ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> res,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,k);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>,y,res,k);</span><br><span class="line"><span class="keyword">if</span>(res&gt;=a[x])<span class="built_in">dfs</span>(x+<span class="number">1</span>,y,res-a[x],k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y&lt;m&amp;&amp;t&gt;=a[x]) <span class="built_in">dfs</span>(x+<span class="number">1</span>,y+<span class="number">1</span>,t-a[x],k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;t&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P4878-USACO05DEC-Layout-G"><a href="#P4878-USACO05DEC-Layout-G" class="headerlink" title="P4878 [USACO05DEC]Layout G"></a><a href="https://www.luogu.com.cn/problem/P4878">P4878 [USACO05DEC]Layout G</a></h3><p>看题<del>和题解</del>，我们可以清楚地知道这是一道差分约束的板子题，然后敲板子<del>（从<a href="https://www.luogu.com.cn/problem/P1993">P1993</a>中拷过来)</del>就结束了<br>注意要加个超级源判断是否联通</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">8e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[maxm],ne[maxm],f[maxm],e[maxm],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> v[maxm],c[maxm],d[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=f[x],f[x]=tot,e[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    d[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        v[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(++c[x]==n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[x]+e[i]&lt;d[y=to[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                d[y]=d[x]+e[i];</span><br><span class="line">                <span class="keyword">if</span>(!v[y]) q.<span class="built_in">push</span>(y),v[y]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[n]&gt;<span class="number">1e8</span>) <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">return</span> d[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ml,md;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;ml&gt;&gt;md;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=ml;++i) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">add</span>(x,y,z);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=md;++i) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">add</span>(y,x,-z);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) <span class="built_in">add</span>(i+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> sp=<span class="built_in">spfa</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sp&lt;=<span class="number">-1</span>) cout&lt;&lt;sp;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">spfa</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="AT2434-JOI-公园-JOI-Park"><a href="#AT2434-JOI-公园-JOI-Park" class="headerlink" title="AT2434 JOI 公园 (JOI Park)"></a><a href="https://www.luogu.com.cn/problem/AT2434">AT2434 JOI 公园 (JOI Park)</a></h3><p>这道题是带有一点模拟性质的最短路，跑dijkstra后将每条边的优先级赋值为更大的点的距离，排序后枚举模拟，注意要换行，不然AtCoder会WA</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">8e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,c;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N],e[N],tot,d[N],v[N],sum;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,e,mx;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mx&lt;res.mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ed[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=head[x],e[tot]=z,head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">999999999999999</span>;</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">        v[x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+e[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[y]=d[x]+e[i];</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mp</span>(-d[y],y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),c=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ed[i]=&#123;<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>()&#125;,<span class="built_in">add</span>(ed[i].u,ed[i].v,ed[i].e),<span class="built_in">add</span>(ed[i].v,ed[i].u,ed[i].e),sum+=ed[i].e;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ed[i].mx=<span class="built_in">max</span>(d[ed[i].u],d[ed[i].v]);</span><br><span class="line">    <span class="built_in">sort</span>(ed+<span class="number">1</span>,ed+m+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans=sum;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum-=ed[i].e;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,ed[i].mx*c+sum);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P3478-POI2008-STA-Station"><a href="#P3478-POI2008-STA-Station" class="headerlink" title="P3478 [POI2008] STA-Station"></a><a href="https://www.luogu.com.cn/problem/P3478">P3478 [POI2008] STA-Station</a></h3><p>换根DP板子题，具体可以看这个<a href="https://violeteternal.github.io/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-tree/">树型dp </a>和这个<a href="https://www.luogu.com.cn/blog/sflsrick/note-how-to-change-root#">[学习笔记]换根dp</a></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> sta[<span class="number">35</span>],top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sta[top++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">putchar</span>(sta[--top]+<span class="number">48</span>); </span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,c;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N],tot,d[N],f[N],dep[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(y,x);</span><br><span class="line">        d[x]+=d[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line">        f[y]=f[x]<span class="number">-2</span>*d[y]+n;</span><br><span class="line">        <span class="built_in">dfs2</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[<span class="number">1</span>]+=d[i];</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(f[ans]&lt;f[i]) ans=i;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="CF149D-Coloring-Brackets"><a href="#CF149D-Coloring-Brackets" class="headerlink" title="CF149D Coloring Brackets"></a><a href="https://www.luogu.com.cn/problem/CF149D">CF149D Coloring Brackets</a></h3><p>不会做，先咕着吧</p><h3 id="P8452-「SWTR-8」15B03"><a href="#P8452-「SWTR-8」15B03" class="headerlink" title="P8452 「SWTR-8」15B03"></a><a href="https://www.luogu.com.cn/problem/P8452">P8452 「SWTR-8」15B03</a></h3><p>神仙构造题，<del>是时候贺题解了</del></p><p>80pts 运用贪心，如样例，隔一个空放一张桌子</p><p>剩下二十分，我已找到一种绝妙的方法，但<del>(我太懒)</del>这里空白太小写不下，所以可以去<a href="https://www.luogu.com.cn/blog/461366/p8452-swtr-815b03-post#">这里</a></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> sta[<span class="number">35</span>],top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sta[top++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">putchar</span>(sta[--top]+<span class="number">48</span>); </span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,m,s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s=<span class="built_in">read</span>();</span><br><span class="line">    T=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">        cout&lt;&lt;n*m-((n+<span class="number">1</span>)/<span class="number">2</span>)*((m+<span class="number">1</span>)/<span class="number">2</span>)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>&amp;&amp;m&lt;<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0.0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j+=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x=i,y=j;</span><br><span class="line">                <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;i&gt;n/<span class="number">2</span>) x++;</span><br><span class="line">                <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;j&gt;m/<span class="number">2</span>) y++;<span class="comment">//调整坐标</span></span><br><span class="line">                <span class="comment">// hypot(a - b, c - d) = sqrt((a - b) * (a - b) + (c - d) * (c - d)) </span></span><br><span class="line">                <span class="type">double</span> d=<span class="built_in">hypot</span>(x<span class="number">-1</span>,y<span class="number">-1</span>);</span><br><span class="line">                d=<span class="built_in">max</span>(d,<span class="built_in">hypot</span>(x<span class="number">-1</span>,y-m));</span><br><span class="line">                d=<span class="built_in">max</span>(d,<span class="built_in">hypot</span>(x-n,y<span class="number">-1</span>));</span><br><span class="line">                d=<span class="built_in">max</span>(d,<span class="built_in">hypot</span>(x-n,y-m));</span><br><span class="line">                ans+=d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.9lf\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="AT4530-Coins"><a href="#AT4530-Coins" class="headerlink" title="AT4530 Coins"></a><a href="https://www.luogu.com.cn/problem/AT4530">AT4530 Coins</a></h3><p>没错，<del>在看了题解之后</del>我发现这是一道DP</p><p>这题设$dp[i][j]$表示前$i$个元素有$j$个向上的概率。只需要枚举当 前硬币是向上还是向下即可，与背包类似。</p><p>转移方程为：$ dp[i][j]=dp[i−1][j−1]×p_i+dp[i−1][j]×(1−p_i)$</p><p>计算完毕后，枚举有多少枚硬币向上就做完了。</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j]*(<span class="number">1</span>-a[i])+(j&gt;<span class="number">0</span>?f[i<span class="number">-1</span>][j<span class="number">-1</span>]*a[i]:<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(i&gt;n-i) ans+=f[n][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9lf&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="CF1387B1-Village-Minimum"><a href="#CF1387B1-Village-Minimum" class="headerlink" title="CF1387B1 Village (Minimum)"></a><a href="https://www.luogu.com.cn/problem/CF1387B1">CF1387B1 Village (Minimum)</a></h3><p>不会，先咕着</p><h3 id="AT2642-ARC076A-Reconciled"><a href="#AT2642-ARC076A-Reconciled" class="headerlink" title="AT2642 [ARC076A] Reconciled?"></a><a href="https://www.luogu.com.cn/problem/AT2642">AT2642 [ARC076A] Reconciled?</a></h3><p>鉴于猴子和狗必须间隔，所以$abs(m-n)&lt;=1$,然后就是排列</p><details>     <summary>AC code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> jc[N]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(n-m)&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e5</span>;++i) jc[i]=i*jc[i<span class="number">-1</span>]%mod;</span><br><span class="line">    cout&lt;&lt;jc[m]*jc[n]*(n==m?<span class="number">2</span>:<span class="number">1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="SP1684-FREQUENT-Frequent-values"><a href="#SP1684-FREQUENT-Frequent-values" class="headerlink" title="SP1684 FREQUENT - Frequent values"></a><a href="https://www.luogu.com.cn/problem/SP1684">SP1684 FREQUENT - Frequent values</a></h3><p>我们看到这个题就会想到莫队<del>？？？</del>，<del>于是把<a href="https://www.luogu.com.cn/problem/AT1219">[AT1219] 歴史の研究</a>拿过来改一下就A了</del>，但绿题怎么能用回滚莫队呢，<del>用普通莫队就可以了,我们用一个数组记录每个数出现次数的次数</del>，经过审题后，我们发现$a$序列是非降的，所以相同的数必定连续，于是可以预处理每个数字的出现次数，用RMQ合并</p><details>     <summary>AC code（回滚莫队）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">2e5</span>+<span class="number">5</span>,maxn=<span class="number">2e5</span>+<span class="number">5</span>,N=<span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> n,Q,t,t1;</span><br><span class="line"><span class="type">int</span> belong[maxm],a[maxm],b[maxm],R[maxn],cnt[maxm],cnt1[maxm],ans[maxm];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query&amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?r&lt;x.r:l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt[x+N];</span><br><span class="line">res=<span class="built_in">max</span>(res,cnt[x+N]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[x+N];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt1[x+N];</span><br><span class="line">res=<span class="built_in">max</span>(res,cnt1[x+N]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del1</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt1[x+N];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;Q;</span><br><span class="line">        t=<span class="built_in">sqrt</span>(n*n/Q);</span><br><span class="line">        t1=(n<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t1;++i) R[i]=i*t;</span><br><span class="line">        R[t1]=n;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[i]=a[i],belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line">        <span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> res,res1,last=<span class="number">0</span>,l=<span class="number">1</span>,r=<span class="number">0</span>,ll;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(belong[q[i].l]==belong[q[i].r])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) <span class="built_in">add1</span>(a[j],ans[q[i].id]);</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) <span class="built_in">del1</span>(a[j]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(belong[q[i].l]!=last)</span><br><span class="line">            &#123;</span><br><span class="line">                last=belong[q[i].l];</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=l;j&lt;=r;++j) <span class="built_in">del</span>(a[j]);</span><br><span class="line">                l=R[last]+<span class="number">1</span>,r=l<span class="number">-1</span>;</span><br><span class="line">                ll=l;</span><br><span class="line">                res=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(a[++r],res);</span><br><span class="line">            res1=res;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(a[--l],res1);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;ll) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">            ans[q[i].id]=res1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>     <summary>AC code（RMQ）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> st[N][<span class="number">20</span>],dp[N],num[N];</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rmq</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">st[i][<span class="number">0</span>]=dp[i];</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">log</span>((<span class="type">double</span>)(n+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">st[i][j]=<span class="built_in">max</span>(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line"><span class="type">int</span> k=<span class="built_in">log</span>((<span class="type">double</span>)(r-l+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2.0</span>);    </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;    </span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF&amp;&amp;n)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>)</span><br><span class="line">dp[i]=(num[i]==num[i<span class="number">-1</span>]?dp[i<span class="number">-1</span>]+<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rmq</span>();</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="type">int</span> c=a;</span><br><span class="line"><span class="keyword">while</span>(c&lt;=b&amp;&amp;num[c]==num[c<span class="number">-1</span>]) c++;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(<span class="built_in">Query</span>(c,b),c-a)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="AT4319-ABC120D-Decayed-Bridges"><a href="#AT4319-ABC120D-Decayed-Bridges" class="headerlink" title="AT4319 [ABC120D] Decayed Bridges"></a><a href="https://www.luogu.com.cn/problem/AT4319">AT4319 [ABC120D] Decayed Bridges</a></h3><p>一道很水的题，类似于<a href="https://www.luogu.com.cn/problem/P1197">P1197 [JSOI2008] 星球大战</a>，鉴于删边不好操作，我们倒序操作，将其改为加边，对两个联通块而言，减少的贡献是两者大小之积，用并查集维护即可</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="type">int</span> f[N],s[N];</span><br><span class="line"><span class="type">int</span> ans[N],res;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i,s[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;e[i].x&gt;&gt;e[i].y;</span><br><span class="line">    res=(n<span class="number">-1</span>)*n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=m;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=res;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(e[i].x),y=<span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span>(x!=y)</span><br><span class="line">        &#123;</span><br><span class="line">            res-=s[x]*s[y];</span><br><span class="line">            f[x]=y,s[y]+=s[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="SP18185-GIVEAWAY-Give-Away"><a href="#SP18185-GIVEAWAY-Give-Away" class="headerlink" title="SP18185 GIVEAWAY - Give Away"></a><a href="https://www.luogu.com.cn/problem/SP18185">SP18185 GIVEAWAY - Give Away</a></h3><p>分块裸题，题解中有用树套树的巨佬，我就<del>无耻地</del>copy过来</p><details>    <summary>AC Code（分块）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e6</span>+<span class="number">5</span>,maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxm],b[maxm],L[maxn],R[maxn],belong[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">so</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a+L[k],a+R[k]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=belong[x];</span><br><span class="line">    b[x]=v;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=L[p];i&lt;=R[p];++i) a[i]=b[i];</span><br><span class="line">    <span class="built_in">so</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p=belong[x],q=belong[y];</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=x;i&lt;=y;++i) <span class="keyword">if</span>(b[i]&gt;=v) ++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=x;i&lt;=R[p];++i) <span class="keyword">if</span>(b[i]&gt;=v) ++res;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=L[q];i&lt;=y;++i) <span class="keyword">if</span>(b[i]&gt;=v) ++res;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=p+<span class="number">1</span>;i&lt;q;++i)</span><br><span class="line">&#123;</span><br><span class="line">res+=R[i]+<span class="number">1</span>-(<span class="built_in">lower_bound</span>(a+L[i],a+R[i]+<span class="number">1</span>,v)-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> t1=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="type">int</span> t=(n<span class="number">-1</span>)/t1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i)L[i]=(i<span class="number">-1</span>)*t1+<span class="number">1</span>,R[i]=i*t1;</span><br><span class="line">R[t]=n;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[i]=a[i],belong[i]=(i<span class="number">-1</span>)/t1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i) <span class="built_in">so</span>(i);</span><br><span class="line"><span class="type">int</span> opt,x,y,z;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>) cin&gt;&gt;z,cout&lt;&lt;<span class="built_in">ask</span>(x,y,z)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details>    <summary>AC Code（树套树）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">500010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> alpha = <span class="number">0.75</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">scapeGoat</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        node *parent; <span class="comment">// 父节点指针</span></span><br><span class="line">        node *child[<span class="number">2</span>]; <span class="comment">// child[0]为左子结点的指针，child[1]为右子结点的指针。</span></span><br><span class="line">        <span class="type">int</span> value, count, size, cover; <span class="comment">// 数据，结点个数，size为有效结点的数量（记录count），cover为总结点的数量（全视为1）</span></span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> _value) &#123;</span><br><span class="line">        value = _value;</span><br><span class="line">        parent = child[<span class="number">0</span>] = child[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        size = cover = count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">node *root;</span><br><span class="line"><span class="type">int</span> deletedCount;</span><br><span class="line"><span class="built_in">scapeGoat</span>() &#123;</span><br><span class="line">    root = <span class="literal">NULL</span>;</span><br><span class="line">    deletedCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">scapeGoat</span>() &#123;</span><br><span class="line">    <span class="built_in">destroy</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">        <span class="built_in">destroy</span>(current-&gt;child[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">destroy</span>(current-&gt;child[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">delete</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">maintain</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123; <span class="comment">// 可能传入的是一个空指针</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;size = current-&gt;count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;child[i]) &#123;</span><br><span class="line">            current-&gt;size += current-&gt;child[i]-&gt;size; <span class="comment">// 加上左右子树的size</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;cover = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;child[i]) &#123;</span><br><span class="line">            current-&gt;cover += current-&gt;child[i]-&gt;cover; <span class="comment">// 加上左右子树的cover</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">getType</span><span class="params">(node *current)</span> </span>&#123; <span class="comment">// 获得结点是左结点还是右结点，0左1右</span></span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span> || current-&gt;parent == <span class="literal">NULL</span>) &#123; <span class="comment">// 传入空指针；根结点没有父亲，特判一下</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 下标放-1会报错，放个0就好了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current-&gt;parent-&gt;child[<span class="number">1</span>] == current; <span class="comment">// 父亲的右子结点 是不是 自己</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">connect</span><span class="params">(node *parent, node *current, <span class="type">int</span> type)</span> </span>&#123; <span class="comment">// 父结点指针，当前结点指针，类型（0左1右）</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123; <span class="comment">// parent 可能为NULL</span></span><br><span class="line">        parent-&gt;child[type] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123; <span class="comment">// current 也可能为NULL</span></span><br><span class="line">        current-&gt;parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">isBad</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;child[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;child[i]-&gt;cover &gt; current-&gt;cover * alpha) &#123; <span class="comment">// 对后面的current-&gt;cover * alpha加5可以避免小规模的重构，在O0中能快几ms</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">travel</span><span class="params">(node *current, vector&lt;node *&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">travel</span>(current-&gt;child[<span class="number">0</span>], v);</span><br><span class="line">    <span class="keyword">if</span> (current-&gt;count) &#123; <span class="comment">// 结点存在，没被删</span></span><br><span class="line">        v.<span class="built_in">push_back</span>(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">travel</span>(current-&gt;child[<span class="number">1</span>], v);</span><br><span class="line">    <span class="keyword">if</span> (!current-&gt;count) &#123; <span class="comment">// 被删了，物理上删除</span></span><br><span class="line">        deletedCount --; <span class="comment">// 标记删除的结点少了一个</span></span><br><span class="line">        <span class="keyword">delete</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node * <span class="title">divide</span><span class="params">(vector&lt;node *&gt; &amp;v, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> middle = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    node *current = v[middle];</span><br><span class="line">    <span class="built_in">connect</span>(current, <span class="built_in">divide</span>(v, left, middle), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">connect</span>(current, <span class="built_in">divide</span>(v, middle + <span class="number">1</span>, right), <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">maintain</span>(current);</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reBuild</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> type = <span class="built_in">getType</span>(current);</span><br><span class="line">    node *parent = current-&gt;parent;</span><br><span class="line">    <span class="type">static</span> vector&lt;node *&gt; v; <span class="comment">// 避免反复申请、释放内存，快了30ms</span></span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">travel</span>(current, v);</span><br><span class="line">    node *newTree = <span class="built_in">divide</span>(v, <span class="number">0</span>, v.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">connect</span>(parent, newTree, type);</span><br><span class="line">    <span class="keyword">if</span> (root == current) &#123; <span class="comment">// 根节点更新</span></span><br><span class="line">        root = newTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">balance</span><span class="params">(node *current)</span> </span>&#123; <span class="comment">// 一路更新，暴力重构最顶端的坏结点</span></span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deletedCount &gt; root-&gt;cover / <span class="number">2</span>) &#123; <span class="comment">// 懒更新结点太多了，整棵树重构</span></span><br><span class="line">        <span class="built_in">reBuild</span>(root);</span><br><span class="line">        deletedCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node *badNode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">maintain</span>(current);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isBad</span>(current)) &#123;</span><br><span class="line">            badNode = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;parent) &#123;</span><br><span class="line">            current = current-&gt;parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (badNode) &#123;</span><br><span class="line">        <span class="built_in">reBuild</span>(badNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">insert</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">node</span>(value);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    node *current = root;</span><br><span class="line">    node *parent = current-&gt;parent;</span><br><span class="line">    <span class="type">int</span> type; <span class="comment">// 类型</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123; <span class="comment">// 和查找一模一样</span></span><br><span class="line">        <span class="keyword">if</span> (current-&gt;value &lt; value) &#123;</span><br><span class="line">            parent = current;</span><br><span class="line">            current = current-&gt;child[<span class="number">1</span>];</span><br><span class="line">            type = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current-&gt;value &gt; value) &#123;</span><br><span class="line">            parent = current;</span><br><span class="line">            current = current-&gt;child[<span class="number">0</span>];</span><br><span class="line">            type = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 已经有相同结点了，将其count++即可。</span></span><br><span class="line">            <span class="keyword">if</span> (!current-&gt;count) &#123; <span class="comment">// 被删除的结点在没有重构之前回来了</span></span><br><span class="line">                deletedCount --;</span><br><span class="line">            &#125;</span><br><span class="line">            current-&gt;count ++;</span><br><span class="line">            <span class="built_in">balance</span>(current);</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    current = <span class="keyword">new</span> <span class="built_in">node</span>(value);</span><br><span class="line">    <span class="built_in">connect</span>(parent, current, type);</span><br><span class="line">    <span class="built_in">balance</span>(current);</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">NULL</span> || !current-&gt;count) &#123; <span class="comment">// 已经被删除了就不要再删了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;count --;</span><br><span class="line">    <span class="keyword">if</span> (!current-&gt;count) &#123;</span><br><span class="line">        deletedCount ++; <span class="comment">// 删没了一个结点，懒更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">balance</span>(current); <span class="comment">// 更新size等信息 + 平衡</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    node *current = root; <span class="comment">// 从根结点开始搜索</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;value &lt; value) &#123;</span><br><span class="line">            current = current-&gt;child[<span class="number">1</span>]; <span class="comment">// 小了，往大了走</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current-&gt;value &gt; value) &#123;</span><br><span class="line">            current = current-&gt;child[<span class="number">0</span>]; <span class="comment">// 大了，往小了走</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不大也不小不就是找到了吗？</span></span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 找不到结点，退出。（找到得到结点的话会在while循环就退出）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rankOfNode</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123; <span class="comment">// 即使查询的值不在树中，也能查。</span></span><br><span class="line">    <span class="comment">// 这里传入的value为被查询排名的结点的value</span></span><br><span class="line">    node *current = root; <span class="comment">// 从根结点开始搜索</span></span><br><span class="line">    <span class="type">int</span> leftSize = <span class="number">1</span>; <span class="comment">// 左面的结点个数。提前将自己的大小1加上，你就想最左侧结点左面啥也没有但是排名为1</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;value &gt;= value) &#123; <span class="comment">// 玄学。即使找到了结点， 也还是会往左走到NULL结点后退出，走左子树不加，不影响结果。</span></span><br><span class="line">            current = current-&gt;child[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;child[<span class="number">0</span>]) &#123;</span><br><span class="line">                leftSize += current-&gt;child[<span class="number">0</span>]-&gt;size;</span><br><span class="line">            &#125;</span><br><span class="line">            leftSize += current-&gt;count;</span><br><span class="line">            current = current-&gt;child[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leftSize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> a[MAX_N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    scapeGoat node[MAX_N];</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> _n) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> c)</span> </span>&#123; <span class="comment">// 大于等于c的有多少</span></span><br><span class="line">        <span class="type">int</span> oriIndex = index; <span class="comment">// 原先的index</span></span><br><span class="line">        <span class="type">int</span> lessThanC = <span class="number">0</span>; <span class="comment">// 比c小的有多少</span></span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            lessThanC += node[index].<span class="built_in">rankOfNode</span>(c) - <span class="number">1</span>;</span><br><span class="line">            index -= <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oriIndex - lessThanC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= n) &#123;</span><br><span class="line">            node[index].<span class="built_in">insert</span>(value);</span><br><span class="line">            index += <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = index; <span class="comment">// 记录原来的位置</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt;= n) &#123;</span><br><span class="line">            node[index].<span class="built_in">remove</span>(node[index].<span class="built_in">find</span>(a[p])); <span class="comment">// 删掉老的</span></span><br><span class="line">            node[index].<span class="built_in">insert</span>(value); <span class="comment">// 插入新的</span></span><br><span class="line">            index += <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        a[p] = value; <span class="comment">// 在存放所有数据的a中同样进行更改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q, temp, op, l, r, c, p, b;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">BIT <span class="title">tree</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        tree.<span class="built_in">insert</span>(i, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">                cout &lt;&lt; tree.<span class="built_in">sum</span>(r, c) - tree.<span class="built_in">sum</span>(l - <span class="number">1</span>, c) &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cin &gt;&gt; p &gt;&gt; b;</span><br><span class="line">                tree.<span class="built_in">change</span>(p, b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="P2002-消息扩散"><a href="#P2002-消息扩散" class="headerlink" title="P2002 消息扩散"></a><a href="https://www.luogu.com.cn/problem/P2002">P2002 消息扩散</a></h3><p>跟tarjan有关，先咕着</p><p>update 2022.11.14 补个代码</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,tot,res;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N];</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],t;</span><br><span class="line"><span class="type">int</span> st[N],top;</span><br><span class="line"><span class="type">int</span> c[N],co;</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ne[++tot]=head[x],head[x]=tot,to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++t;</span><br><span class="line">st[++top]=x;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y=to[i]]) <span class="built_in">tarjan</span>(y),low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!c[y]) low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++co;</span><br><span class="line"><span class="keyword">while</span>(st[top+<span class="number">1</span>]!=x) c[st[top--]]=co;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(m--) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> y,j=head[i];j;j=ne[j])<span class="keyword">if</span>(c[i]!=c[y=to[j]]) ++deg[c[y]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=co;++i)<span class="keyword">if</span>(!deg[i]) ++res;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="SP28305-ADAINDEX-Ada-and-Indexing"><a href="#SP28305-ADAINDEX-Ada-and-Indexing" class="headerlink" title="SP28305 ADAINDEX - Ada and Indexing"></a><a href="https://www.luogu.com.cn/problem/SP28305">SP28305 ADAINDEX - Ada and Indexing</a></h3><p>Trie 板子题</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>],v[N],n,q,tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;s[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][c]) son[p][c]=++tot;</span><br><span class="line">        p=son[p][c];</span><br><span class="line">        ++v[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;s[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p=son[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;s,<span class="built_in">ins</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i) cin&gt;&gt;s,cout&lt;&lt;<span class="built_in">ask</span>(s)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="SP1026-FAVDICE-Favorite-Dice"><a href="#SP1026-FAVDICE-Favorite-Dice" class="headerlink" title="SP1026 FAVDICE - Favorite Dice"></a><a href="https://www.luogu.com.cn/problem/SP1026">SP1026 FAVDICE - Favorite Dice</a></h3><p>简单的期望题</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ans+=(<span class="type">double</span>)<span class="number">1</span>/i;</span><br><span class="line">        ans*=n;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P7715-「EZEC-10」Shape"><a href="#P7715-「EZEC-10」Shape" class="headerlink" title="P7715 「EZEC-10」Shape"></a><a href="https://www.luogu.com.cn/problem/P7715">P7715 「EZEC-10」Shape</a></h3><p>一道见过多遍的题，不会，先咕着</p><h3 id="SP1805-HISTOGRA-Largest-Rectangle-in-a-Histogram"><a href="#SP1805-HISTOGRA-Largest-Rectangle-in-a-Histogram" class="headerlink" title="SP1805 HISTOGRA - Largest Rectangle in a Histogram"></a><a href="https://www.luogu.com.cn/problem/SP1805">SP1805 HISTOGRA - Largest Rectangle in a Histogram</a></h3><p>单调栈板子题</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,w[N],cnt,x,ans,h[N],a[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)    cin&gt;&gt;a[i];</span><br><span class="line">        a[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(h[cnt]&gt;a[i]) res+=w[cnt],ans=<span class="built_in">max</span>(ans,res*h[cnt]),--cnt;</span><br><span class="line">            w[++cnt]=<span class="number">1</span>+res,h[cnt]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="CF61D-Eternal-Victory"><a href="#CF61D-Eternal-Victory" class="headerlink" title="CF61D Eternal Victory"></a><a href="https://www.luogu.com.cn/problem/CF61D">CF61D Eternal Victory</a></h3><p>一道比较有意思的题，读题可知这n座城市构成一棵树，而每个城市都要走到和任意确定终点说明每条链要经过两遍，只有一条含1号点的只经过一遍，所以dfs就行了</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,head[N],to[N&lt;&lt;<span class="number">1</span>],ne[N&lt;&lt;<span class="number">1</span>],e[N&lt;&lt;<span class="number">1</span>],tot,sum,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=head[x],e[tot]=z,head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,z);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=head[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=to[i];</span><br><span class="line">        <span class="keyword">if</span>(u==y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(u,x,z+e[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">add</span>(x,y,z),<span class="built_in">add</span>(y,x,z),sum+=z;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;sum*<span class="number">2</span>-ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P1613-跑路"><a href="#P1613-跑路" class="headerlink" title="P1613 跑路"></a><a href="https://www.luogu.com.cn/problem/P1613">P1613 跑路</a></h3><p>一道好题，我们用倍增的思想，用$f[i][j][k]表示i到j$之间是否有一条长度为$2^{k}$的边</p><p>再跑最短路就行了</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">55</span>][<span class="number">55</span>][<span class="number">65</span>],n,m;</span><br><span class="line"><span class="type">int</span> d[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;x&gt;&gt;y,f[x][y][<span class="number">0</span>]=d[x][y]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">64</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> p=<span class="number">1</span>;p&lt;=n;++p)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(f[j][k][i<span class="number">-1</span>]&amp;&amp;f[k][p][i<span class="number">-1</span>]) f[j][p][i]=d[j][p]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) d[i][j]=<span class="built_in">min</span>(d[i][k]+d[k][j],d[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;d[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="AT2665-AGC017B-Moderate-Differences"><a href="#AT2665-AGC017B-Moderate-Differences" class="headerlink" title="AT2665 [AGC017B] Moderate Differences"></a><a href="https://www.luogu.com.cn/problem/AT2665">AT2665 [AGC017B] Moderate Differences</a></h3><p>不会，先咕着,QwQ</p><h3 id="P1284-三角形牧场"><a href="#P1284-三角形牧场" class="headerlink" title="P1284 三角形牧场"></a><a href="https://www.luogu.com.cn/problem/P1284">P1284 三角形牧场</a></h3><p>做不起的DP，用$f[i][j][k]$表示前$i$块木板拼成的三角形两边长分别为$j，k$,</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">45</span>,L=<span class="number">805</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[N];</span><br><span class="line"><span class="type">int</span> dp[L][L],s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x+y&gt;z&amp;&amp;x+z&gt;y&amp;&amp;y+z&gt;x)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">mj</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> xx=x,yy=y,zz=z;</span><br><span class="line">    <span class="type">double</span> p=(xx+yy+zz)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(p*(p-xx)*(p-yy)*(p-zz));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],s+=a[i];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=s&gt;&gt;<span class="number">1</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=s&gt;&gt;<span class="number">1</span>;k&gt;=<span class="number">0</span>;--k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j-a[i]&gt;=<span class="number">0</span>) dp[j][k]|=dp[j-a[i]][k];</span><br><span class="line">                <span class="keyword">if</span>(k-a[i]&gt;=<span class="number">0</span>) dp[j][k]|=dp[j][k-a[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> ans=<span class="number">-0.01</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=s/<span class="number">2</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=s/<span class="number">2</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dp[i][j])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">check</span>(i,j,s-i-j)) <span class="keyword">continue</span>;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,<span class="built_in">mj</span>(i,j,s-i-j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)(ans*<span class="number">100</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="CF1475F-Unusual-Matrix"><a href="#CF1475F-Unusual-Matrix" class="headerlink" title="CF1475F Unusual Matrix"></a><a href="https://www.luogu.com.cn/problem/CF1475F">CF1475F Unusual Matrix</a></h3><p>一道贪心题，我们将题目中的两个矩阵中的元素分别异或，题目就转化为能否使这个矩阵全为0，对每一行单独判断是否和第一行相同或相反</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> n,a[N][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) a[i][j]=s[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) a[i][j]^=s[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=a[i][<span class="number">1</span>]^a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">2</span>;j&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]^a[<span class="number">1</span>][j]^k)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P1687-机器人小Q"><a href="#P1687-机器人小Q" class="headerlink" title="P1687 机器人小Q"></a><a href="https://www.luogu.com.cn/problem/P1687">P1687 机器人小Q</a></h3><p>与<a href="https://www.luogu.com.cn/problem/P3052">P3052</a>相似，相较之下比较好想的DP</p><p>ps:我可能用了假内存，MLE，改成滚动数组了</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][N],g[<span class="number">2</span>][N];</span><br><span class="line"><span class="type">int</span> n,k,a[N],nn;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;nn&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=nn;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">119</span>) a[++n]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;You can&#x27;t do it.&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i) f[<span class="number">0</span>][i]=f[<span class="number">1</span>][i]=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;++j) f[i&amp;<span class="number">1</span>][j]=<span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i&amp;<span class="number">1</span>][j]=f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j],g[i&amp;<span class="number">1</span>][j]=g[i+<span class="number">1</span>&amp;<span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(g[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]&gt;=a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[i&amp;<span class="number">1</span>][j]&gt;f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]) f[i&amp;<span class="number">1</span>][j]=f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>],g[i&amp;<span class="number">1</span>][j]=g[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]-a[i];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(f[i&amp;<span class="number">1</span>][j]==f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]) g[i&amp;<span class="number">1</span>][j]=<span class="built_in">max</span>(g[i&amp;<span class="number">1</span>][j],g[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]-a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[i&amp;<span class="number">1</span>][j]&gt;f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">1</span>) f[i&amp;<span class="number">1</span>][j]=f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">1</span>,g[i&amp;<span class="number">1</span>][j]=<span class="number">119</span>-a[i];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(f[i&amp;<span class="number">1</span>][j]==f[i+<span class="number">1</span>&amp;<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">1</span>) g[i&amp;<span class="number">1</span>][j]=<span class="built_in">max</span>(g[i&amp;<span class="number">1</span>][j],<span class="number">119</span>-a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n&amp;<span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="UVA12467-Secret-Word"><a href="#UVA12467-Secret-Word" class="headerlink" title="UVA12467 Secret Word"></a><a href="https://www.luogu.com.cn/problem/UVA12467">UVA12467 Secret Word</a></h3><p>将S倒过来kmp匹配就行了，记录匹配最大长度</p><details>    <summary>AC COde</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> s[N],s1[N];</span><br><span class="line"><span class="type">int</span> ne[N],n,res;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">        n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) s1[i]=s[n-i+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(s[j+<span class="number">1</span>]!=s[i]&amp;&amp;j) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(s[j+<span class="number">1</span>]==s[i]) ++j;</span><br><span class="line">            ne[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        res=j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(s[j+<span class="number">1</span>]!=s1[i]&amp;&amp;j) j=ne[j];</span><br><span class="line">            <span class="keyword">if</span>(s[j+<span class="number">1</span>]==s1[i]) ++j;</span><br><span class="line">            res=<span class="built_in">max</span>(res,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=res;i;--i) cout&lt;&lt;s[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="AT4756-ABC126E-1-or-2"><a href="#AT4756-ABC126E-1-or-2" class="headerlink" title="AT4756 [ABC126E] 1 or 2"></a><a href="https://www.luogu.com.cn/problem/AT4756">AT4756 [ABC126E] 1 or 2</a></h3><p>并查集维护关系</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> f[N],res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        x=<span class="built_in">find</span>(x),y=<span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        f[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(f[i]==i) ++res;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="SP39-PIGBANK-Piggy-Bank"><a href="#SP39-PIGBANK-Piggy-Bank" class="headerlink" title="SP39 PIGBANK - Piggy-Bank"></a><a href="https://www.luogu.com.cn/problem/SP39">SP39 PIGBANK - Piggy-Bank</a></h3><p>完全背包裸题</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> T,n,m;</span><br><span class="line"><span class="type">int</span> f[<span class="number">10005</span>],w[N],v[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;n;</span><br><span class="line">m=y-x,f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j) f[j]=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> j=w[i];j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line">f[j]=<span class="built_in">min</span>(f[j],f[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[m]==<span class="number">1e9</span>) cout&lt;&lt;<span class="string">&quot;This is impossible.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;The minimum amount of money in the piggy-bank is &quot;</span>&lt;&lt;f[m]&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="AT3947-AGC022B-GCD-Sequence"><a href="#AT3947-AGC022B-GCD-Sequence" class="headerlink" title="AT3947 [AGC022B] GCD Sequence"></a><a href="https://www.luogu.com.cn/problem/AT3947">AT3947 [AGC022B] GCD Sequence</a></h3><p>又是神(du)仙(liu)构造题，先咕着吧</p><h3 id="P5026-Lycanthropy"><a href="#P5026-Lycanthropy" class="headerlink" title="P5026 Lycanthropy"></a><a href="https://www.luogu.com.cn/problem/P5026">P5026 Lycanthropy</a></h3><p>差分好题</p><p>由于只查询一次，先差分，最后做前缀和就好了</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> aa[<span class="number">2100000</span>],bb[<span class="number">2100000</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> isdigit(x) ((x)&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;(x)&lt;=<span class="string">&#x27;9&#x27;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,flag=<span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)flag=<span class="number">-1</span>;</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;</span><br><span class="line">        a=(a&lt;&lt;<span class="number">1</span>)+(a&lt;&lt;<span class="number">3</span>)+c<span class="number">-48</span>;</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> *a=aa+<span class="number">1000000</span>,*b=bb+<span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> v=<span class="built_in">read</span>(),x=<span class="built_in">read</span>();</span><br><span class="line">        a[x<span class="number">-3</span>*v+<span class="number">1</span>]++;</span><br><span class="line">        a[x<span class="number">-2</span>*v+<span class="number">1</span>]-=<span class="number">2</span>;</span><br><span class="line">        a[x+<span class="number">1</span>]+=<span class="number">2</span>;</span><br><span class="line">        a[x+<span class="number">2</span>*v+<span class="number">1</span>]-=<span class="number">2</span>;</span><br><span class="line">        a[x+<span class="number">3</span>*v+<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">-40000</span>;i&lt;=m+<span class="number">40000</span>;++i)a[i]+=a[i<span class="number">-1</span>],b[i]+=b[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P4868-Preprefix-sum"><a href="#P4868-Preprefix-sum" class="headerlink" title="P4868 Preprefix sum"></a><a href="https://www.luogu.com.cn/problem/P4868">P4868 Preprefix sum</a></h3><p>又到了<code>OIer</code>优良传统，<del>丧心病狂</del>的推柿子时间</p><p>$S_i= {\textstyle \sum_{k=1}^{i}}a_k$</p><p>$SS_i$=$ {\textstyle \sum_{i=1}^{n}}S_i$=$(n+1){\textstyle \sum_{i=1}^{n}}a_i$-${\textstyle \sum_{i=1}^{n}}i*a_i$</p><p>$ps:LaTex真sb$</p><p>接着拿两个树状数组，一个维护${\textstyle \sum_{i=1}^{n}}a_i$,另一个维护${\textstyle \sum_{i=1}^{n}}i*a_i$就行了</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,y;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> ans,len;</span><br><span class="line"><span class="type">int</span> a[N],c1[N&lt;&lt;<span class="number">1</span>],c2[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch;<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch=<span class="built_in">getchar</span>()))</span><br><span class="line">&#123;(ch==<span class="string">&#x27;-&#x27;</span>)&amp;&amp;(f=-f);&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=(N&lt;&lt;<span class="number">1</span>);i+=<span class="built_in">lowbit</span>(i))c1[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=(N&lt;&lt;<span class="number">1</span>);i+=<span class="built_in">lowbit</span>(i))c2[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))res+=c1[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask2</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))res+=c2[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i],<span class="built_in">add1</span>(i,a[i]),<span class="built_in">add2</span>(i,a[i]*i);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)cout&lt;&lt;((x+<span class="number">1</span>)*<span class="built_in">ask1</span>(x)-<span class="built_in">ask2</span>(x))&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cin&gt;&gt;y,<span class="built_in">add1</span>(x,y-a[x]),<span class="built_in">add2</span>(x,(y-a[x])*x),a[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="Knight-Tournament"><a href="#Knight-Tournament" class="headerlink" title="Knight Tournament"></a><a href="https://www.luogu.com.cn/problem/CF356A">Knight Tournament</a></h3><p>此题是明显的倒推</p><p>每次区间推平</p><p>最后收尾就交给Chotholly吧</p><p>我永远喜欢珂朵莉</p><details>    <summary>AC Code</summary>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Chtholly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> v;</span><br><span class="line"><span class="built_in">Chtholly</span>(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">-1</span>,<span class="type">int</span> c=<span class="number">0</span>):<span class="built_in">l</span>(a),<span class="built_in">r</span>(b),<span class="built_in">v</span>(c)&#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Chtholly &amp;res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> l&lt;res.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Chtholly&gt;s;</span><br><span class="line"><span class="keyword">inline</span> set&lt;Chtholly&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;Chtholly&gt;::iterator it=s.<span class="built_in">lower_bound</span>(<span class="built_in">Chtholly</span>(x));</span><br><span class="line"><span class="keyword">if</span>(it!=s.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==x) <span class="keyword">return</span> it;</span><br><span class="line">--it;</span><br><span class="line">Chtholly t=*it;</span><br><span class="line">s.<span class="built_in">erase</span>(it);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">Chtholly</span>(t.l,x<span class="number">-1</span>,t.v));</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">insert</span>(<span class="built_in">Chtholly</span>(x,t.r,t.v)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;Chtholly&gt;::iterator it2=<span class="built_in">split</span>(r+<span class="number">1</span>),it1=<span class="built_in">split</span>(l);</span><br><span class="line">s.<span class="built_in">erase</span>(it1,it2);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">Chtholly</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;Chtholly&gt;::iterator it2=<span class="built_in">split</span>(r+<span class="number">1</span>),it1=<span class="built_in">split</span>(l);</span><br><span class="line"><span class="keyword">for</span>(;it1!=it2;++it1) it1-&gt;v+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">Chtholly</span>(<span class="number">1</span>,n));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m;i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=c[i]) <span class="built_in">assign</span>(a[i],c[i]<span class="number">-1</span>,c[i]);</span><br><span class="line"><span class="keyword">if</span>(b[i]!=c[i]) <span class="built_in">assign</span>(c[i]+<span class="number">1</span>,b[i],c[i]);</span><br><span class="line">&#125;</span><br><span class="line">set&lt;Chtholly&gt;::iterator it2=<span class="built_in">split</span>(n+<span class="number">1</span>),it1=<span class="built_in">split</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(;it1!=it2;++it1)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=it1-&gt;l;i&lt;=it1-&gt;r;++i) cout&lt;&lt;it1-&gt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="蓝题"><a href="#蓝题" class="headerlink" title="蓝题"></a>蓝题</h2><h3 id="P4748-CERC2017-Justified-Jungle"><a href="#P4748-CERC2017-Justified-Jungle" class="headerlink" title="P4748 [CERC2017]Justified Jungle"></a><a href="https://www.luogu.com.cn/problem/P4748">P4748 [CERC2017]Justified Jungle</a></h3><p><del>出师不利，开局就看题解</del></p><p>一道挺好的思维题</p><p>考虑能删k条边，则分成了k+1个联通块，每块的大小为u=n/(k+1),(如果有余数则一定不满足)</p><p>考虑删去边(f[x],x)，则分出一个大小为s[x]的联通块，则必须满足<code>u|s[x]</code></p><p>所以记录s[x]的个数，对一个u满足u的倍数的个数和为k+1，则是可满足的</p><p>下面是喜闻乐见的代码</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ne[N&lt;&lt;<span class="number">1</span>],head[N],to[N&lt;&lt;<span class="number">1</span>],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s[N],n,cnt[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa) <span class="built_in">dfs</span>(y,x),s[x]+=s[y];</span><br><span class="line">++cnt[s[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n%x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,u=n/x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=u;i&lt;=n;i+=u) res+=cnt[i];</span><br><span class="line"><span class="keyword">return</span> res==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i+<span class="number">1</span>)) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P2564-SCOI2009-生日礼物"><a href="#P2564-SCOI2009-生日礼物" class="headerlink" title="P2564 [SCOI2009]生日礼物"></a><a href="https://www.luogu.com.cn/problem/P2564">P2564 [SCOI2009]生日礼物</a></h3><p><del>Ex.<a href="https://www.luogu.com.cn/problem/P1638">P1638 逛画展</a></del></p><p>我们发现此题与P1638最大的不同是一个位置上可能有多个珠子</p><p><del>好难搞啊</del></p><p>但是好像同样位置的话先后顺序对答案没有影响</p><p><del>建议评黄</del></p><p><del>附上双倍经验<a href="https://www.luogu.com.cn/problem/P3029">P3029 [USACO11NOV]Cow Lineup S</a></del></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,v;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node res)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;res.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="type">int</span> n,m,tot,T;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">65</span>],k,ans=<span class="number">2147483647</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--) cin&gt;&gt;a[++tot].x,a[tot].v=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;r&lt;=n;++r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(++cnt[a[r].v]==<span class="number">1</span>) ++k;</span><br><span class="line"><span class="keyword">while</span>(cnt[a[l].v]&gt;<span class="number">1</span>&amp;&amp;l&lt;r) --cnt[a[l++].v];</span><br><span class="line"><span class="keyword">if</span>(k==m) ans=<span class="built_in">min</span>(a[r].x-a[l].x,ans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P4427-BJOI2018-求和"><a href="#P4427-BJOI2018-求和" class="headerlink" title="P4427 [BJOI2018]求和"></a><a href="https://www.luogu.com.cn/problem/P4427">P4427 [BJOI2018]求和</a></h3><p><del>渐入佳境</del></p><p>本来一看，区间k次幂和，<del>珂朵莉树？</del></p><p>后来发现$k&lt;=50$ ，可以预处理每个点的k次幂</p><p>再看标签，前缀和</p><p>树上前缀和后差分，比较板</p><p>时间复杂度$O(50n+mlogn)$</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> ne[N&lt;&lt;<span class="number">1</span>],head[N],to[N&lt;&lt;<span class="number">1</span>],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>],tin[N],tout[N],idx,dep[N]=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> g[N][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[x]=dep[fa]+<span class="number">1</span>,f[x][<span class="number">0</span>]=fa;</span><br><span class="line">tin[x]=++idx;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;f[x][i];++i) f[x][i+<span class="number">1</span>]=f[f[x][i]][i];</span><br><span class="line"><span class="type">int</span> res=dep[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;++i) g[x][i]=(g[fa][i]+res)%mod,(res*=dep[x])%=mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa) <span class="built_in">dfs</span>(y,x);</span><br><span class="line">tout[x]=++idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> tin[x]&lt;=tin[y]&amp;&amp;tout[x]&gt;=tout[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(x,y)) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(y,x)) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(f[x][i]&amp;&amp;!<span class="built_in">pd</span>(f[x][i],y)) x=f[x][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">lca</span>(x,y),v=g[x][z]+g[y][z]-g[k][z]-g[f[k][<span class="number">0</span>]][z];</span><br><span class="line">cout&lt;&lt;(v%mod+mod)%mod&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P1456-Monkey-King"><a href="#P1456-Monkey-King" class="headerlink" title="P1456 Monkey King"></a><a href="https://www.luogu.com.cn/problem/P1456">P1456 Monkey King</a></h3><p>左偏树板子题，<del>但我不会</del></p><p>写了个$O(nlog^{2}n)$的启发式合并</p><p>左偏树可以做到$O(nlogn)$</p><details>    <summary>AC Code(启发式合并)</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt;q[N];</span><br><span class="line"><span class="type">int</span> f[N],n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!q[i].<span class="built_in">empty</span>()) q[i].<span class="built_in">pop</span>();</span><br><span class="line">cin&gt;&gt;x,f[i]=i,q[i].<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">x=<span class="built_in">find</span>(x),y=<span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k1=q[x].<span class="built_in">size</span>(),k2=q[y].<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> v1=q[x].<span class="built_in">top</span>()/<span class="number">2</span>,v2=q[y].<span class="built_in">top</span>()/<span class="number">2</span>;</span><br><span class="line">q[x].<span class="built_in">pop</span>(),q[y].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(k1&lt;k2) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">while</span>(!q[y].<span class="built_in">empty</span>()) q[x].<span class="built_in">push</span>(q[y].<span class="built_in">top</span>()),q[y].<span class="built_in">pop</span>();</span><br><span class="line">q[x].<span class="built_in">push</span>(v1),q[x].<span class="built_in">push</span>(v2),f[y]=x;</span><br><span class="line">cout&lt;&lt;q[x].<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P2796-Facer的程序"><a href="#P2796-Facer的程序" class="headerlink" title="P2796 Facer的程序"></a><a href="https://www.luogu.com.cn/problem/P2796">P2796 Facer的程序</a></h3><p>看到计数问题 <del>再加上窝觉得可能推不出式子</del></p><p>考虑DP，我们发现给的数据满足一棵树，那应该是树形DP</p><p>分析题意，我们发现要求的是树上有多少联通块</p><p>我们设以<code>x</code>为子树的联通块数量为<code>f[x]</code>对于一个<code>x</code>，他的一个子节点<code>v</code>可以取的方案数为<code>f[v]+1</code>，所以$\large{}f[x]=\Large\prod\limits_{v\text{是x的子节点}}(f[v]+1)$</p><p>如果<code>x</code>为叶节点，则<code>f[x]=1</code>，答案就是$\sum\limits_{i=1}^nf[i]$</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> ne[N&lt;&lt;<span class="number">1</span>],head[N],to[N&lt;&lt;<span class="number">1</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N],ans,n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>((y=to[i])!=fa) <span class="built_in">dp</span>(y,x),(f[x]*=(<span class="number">1ll</span>*f[y]+<span class="number">1</span>))%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line"><span class="built_in">dp</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) (ans+=f[i])%=mod;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P3986-斐波那契数列"><a href="#P3986-斐波那契数列" class="headerlink" title="P3986 斐波那契数列"></a><a href="https://www.luogu.com.cn/problem/P3986">P3986 斐波那契数列</a></h3><p>是的，<del>万恶的</del>数学来了</p><p>先咕着</p><h3 id="感觉不错-Feel-Good"><a href="#感觉不错-Feel-Good" class="headerlink" title="感觉不错 Feel Good"></a><a href="https://www.luogu.com.cn/problem/UVA1619">感觉不错 Feel Good</a></h3><p>一道见过的单调栈好题，对每个数维护左右比他小的第一个数</p><p><del>UVA的格式怎么这么阴间啊</del> </p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N],l[N],r[N];</span><br><span class="line"><span class="type">int</span> st[N],top,n;</span><br><span class="line"><span class="type">int</span> ans,s[N];</span><br><span class="line"><span class="type">int</span> ansl,ansr,first=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[top=<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;a[st[top]]&gt;=a[i]) --top;</span><br><span class="line">l[i]=st[top]+<span class="number">1</span>;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[top=<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;a[st[top]]&gt;=a[i]) --top;</span><br><span class="line">r[i]=st[top]<span class="number">-1</span>;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=(<span class="type">int</span>)a[i]*(s[r[i]]-s[l[i]<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(ans&lt;k||(ans==k&amp;&amp;r[i]-l[i]&lt;ansr-ansl)) ans=k,ansl=l[i],ansr=r[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!first) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">first=<span class="number">0</span>,ans=<span class="number">0</span>,ansl=ansr=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]),s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="built_in">pre1</span>();</span><br><span class="line"><span class="built_in">pre2</span>();</span><br><span class="line"><span class="built_in">work</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n%lld %lld\n&quot;</span>,ans,ansl,ansr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="DZY-Loves-Fibonacci-Numbers"><a href="#DZY-Loves-Fibonacci-Numbers" class="headerlink" title="DZY Loves Fibonacci Numbers"></a><a href="https://www.luogu.com.cn/problem/CF446C">DZY Loves Fibonacci Numbers</a></h3><p>一道神仙题</p><p>本来想的是线段树开vector维护离L的下标，然后</p><p><img src="/images/CF446C.png"></p><p>只好借助题解的力量</p><p>然后发现此题不仅可以用线段树，还可以定期重构</p><p>当修改操作达到lim次时，用$O(n)$的时间重构序列</p><p>没有重构的部分暴力统计</p><p>放上代码</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">5</span>,mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> v[N],val[N];</span><br><span class="line"><span class="type">int</span> l[N],r[N],tot;</span><br><span class="line"><span class="type">int</span> n,m,lim;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;st[N],ed[N];</span><br><span class="line"><span class="type">int</span> f[N]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">md</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;<span class="number">0</span>?x+mod:x&gt;mod?x-mod:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m,lim=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) f[i]=<span class="built_in">md</span>(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) s[i]=<span class="built_in">md</span>(f[i]+s[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;val[i],v[i]=<span class="built_in">md</span>(val[i]+v[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">st[l[i]].<span class="built_in">push_back</span>(i),</span><br><span class="line">ed[r[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=<span class="built_in">md</span>(a+b);</span><br><span class="line">val[i]=<span class="built_in">md</span>(val[i]+c);</span><br><span class="line">a=b,b=c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:st[i]) b=<span class="built_in">md</span>(b+<span class="number">1</span>),val[i]=<span class="built_in">md</span>(val[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:ed[i]) a=<span class="built_in">md</span>(a-f[r[x]-l[x]]),b=<span class="built_in">md</span>(b-f[r[x]-l[x]+<span class="number">1</span>]);</span><br><span class="line">v[i]=<span class="built_in">md</span>(v[i<span class="number">-1</span>]+val[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">st[l[i]].<span class="built_in">clear</span>(),</span><br><span class="line">ed[r[i]].<span class="built_in">clear</span>();</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="type">int</span> opt,x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">l[++tot]=x,r[tot]=y;</span><br><span class="line"><span class="keyword">if</span>(tot==lim) <span class="built_in">rebuild</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">md</span>(v[y]-v[x<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="built_in">max</span>(x,l[i]),R=<span class="built_in">min</span>(y,r[i]);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=R) ans=<span class="built_in">md</span>(ans+s[R-l[i]+<span class="number">1</span>]-s[L-l[i]]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>MLE Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">9</span>,N=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;add[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> s[N]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,len,v;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) s[i]=(s[i<span class="number">-1</span>]+s[i<span class="number">-2</span>])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i) (s[i]+=s[i<span class="number">-1</span>])%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].v=(t[k1].v+t[k2].v)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].l=l,t[k].r=r,t[k].len=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> (<span class="type">void</span>)(cin&gt;&gt;t[k].v);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid);</span><br><span class="line"><span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ad</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(t[k].v+=s[x+t[k].len<span class="number">-1</span>]-s[x<span class="number">-1</span>])%=mod;</span><br><span class="line">add[k].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=add[k].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x;++i) <span class="built_in">ad</span>(k1,add[k][i]),<span class="built_in">ad</span>(k2,add[k][i]+t[k1].len);</span><br><span class="line">add[k].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l&gt;=l&amp;&amp;t[k].r&lt;=r) <span class="keyword">return</span> <span class="built_in">ad</span>(k,t[k].l-l+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">push</span>(k);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k1].r) <span class="built_in">change</span>(k1,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;=t[k2].l) <span class="built_in">change</span>(k2,l,r);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l&gt;=l&amp;&amp;t[k].r&lt;=r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="built_in">push</span>(k);</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[k1].r) res+=<span class="built_in">ask</span>(k1,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;=t[k2].l) (res+=<span class="built_in">ask</span>(k2,l,r))%=mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> opt,l,r;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">change</span>(<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(<span class="built_in">ask</span>(<span class="number">1</span>,l,r)%mod+mod)%mod&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="ABC256G-Black-and-White-Stones"><a href="#ABC256G-Black-and-White-Stones" class="headerlink" title="[ABC256G] Black and White Stones"></a><a href="https://www.luogu.com.cn/problem/AT_abc256_g">[ABC256G] Black and White Stones</a></h3><p>不会，先咕着</p><h3 id="P7297-USACO21JAN-Telephone-G"><a href="#P7297-USACO21JAN-Telephone-G" class="headerlink" title="P7297 [USACO21JAN] Telephone G"></a><a href="https://www.luogu.com.cn/problem/P7297">P7297 [USACO21JAN] Telephone G</a></h3><p>分层图最短路好题</p><p>第$k$行代表品种为$k$的牛能传递出去</p><p>看代码吧</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>,NN=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> head[N],ne[N],to[N],e[N],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> a[NN];</span><br><span class="line"><span class="type">char</span> s[<span class="number">55</span>][NN];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=y,ne[tot]=head[x],e[tot]=z,head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*n+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k+<span class="number">1</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;++j) <span class="built_in">add</span>(<span class="built_in">id</span>(i,j),<span class="built_in">id</span>(i,j+<span class="number">1</span>),<span class="number">1</span>),<span class="built_in">add</span>(<span class="built_in">id</span>(i,j+<span class="number">1</span>),<span class="built_in">id</span>(i,j),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(i,<span class="built_in">id</span>(a[i]+<span class="number">1</span>,i),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) </span><br><span class="line"><span class="keyword">if</span>(s[i][a[j]]==<span class="string">&#x27;1&#x27;</span>) <span class="built_in">add</span>(<span class="built_in">id</span>(i+<span class="number">1</span>,j),j,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push_back</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+e[i])</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i];</span><br><span class="line"><span class="keyword">if</span>(e[i]) q.<span class="built_in">push_back</span>(y);</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push_front</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i) cin&gt;&gt;s[i]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;(d[n]==<span class="number">0x3f3f3f3f</span>?<span class="number">-1</span>:d[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="CF33C-Wonderful-Randomized-Sum"><a href="#CF33C-Wonderful-Randomized-Sum" class="headerlink" title="CF33C - Wonderful Randomized Sum"></a><a href="https://www.luogu.com.cn/problem/SP7507">CF33C - Wonderful Randomized Sum</a></h3><p>水题，我们发现两次取反如果有相交部分便相当于不变</p><p>设前面取反的数字和为$x$，后面为$y$，数列总和为$sum,z=sum-x-y$</p><p>取反后$sum’=sum-x-y+(-x)+(-y)=2z-sum$</p><p>因为$z$为最大连续字段和，所以这题就$O(n)$做完了</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,x,sum,res,ans,T;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">ans=res=sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">cin&gt;&gt;x,res=<span class="built_in">max</span>(<span class="number">0</span>,res+x),ans=<span class="built_in">max</span>(ans,res),sum+=x;</span><br><span class="line">cout&lt;&lt;ans*<span class="number">2</span>-sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P2698-USACO12MAR-Flowerpot-S"><a href="#P2698-USACO12MAR-Flowerpot-S" class="headerlink" title="P2698 [USACO12MAR]Flowerpot S"></a><a href="https://www.luogu.com.cn/problem/P2698">P2698 [USACO12MAR]Flowerpot S</a></h3><p>先咕着</p><h3 id="The-Battle-of-Chibi"><a href="#The-Battle-of-Chibi" class="headerlink" title="The Battle of Chibi"></a><a href="https://www.luogu.com.cn/problem/UVA12983">The Battle of Chibi</a></h3><p>暴力DP很好写 $dp[i][j]={\textstyle \sum_{k=1}^{i-1}} (a[k]&lt;a[i])*dp[k][j-1]$</p><p>但时间复杂度是$O(n^{2}m)$</p><p>考虑数据结构优化</p><p>用个树状数组能做到$O(nmlogn)$</p><p>贴个代码</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[N],v,c[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) (c[x]+=v)%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) (res+=c[x])%=mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N][N],T,te,num[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(++te&lt;=T)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][<span class="number">1</span>]=<span class="number">1</span>,cin&gt;&gt;a[i],num[i]=a[i];</span><br><span class="line"><span class="built_in">sort</span>(num+<span class="number">1</span>,num+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">unique</span>(num+<span class="number">1</span>,num+n+<span class="number">1</span>)-num<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(num+<span class="number">1</span>,num+M+<span class="number">1</span>,a[i])-num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][j]=<span class="built_in">ask</span>(a[i]<span class="number">-1</span>),<span class="built_in">add</span>(a[i],f[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) (ans+=f[i][m])%=mod;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;te&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="SUMMUL-Sum-of-products"><a href="#SUMMUL-Sum-of-products" class="headerlink" title="SUMMUL - Sum of products"></a><a href="https://www.luogu.com.cn/problem/SP6286">SUMMUL - Sum of products</a></h3><p>咕着，人太菜了</p><h3 id="NGM2-Another-Game-With-Numbers"><a href="#NGM2-Another-Game-With-Numbers" class="headerlink" title="NGM2 - Another Game With Numbers"></a><a href="https://www.luogu.com.cn/problem/SP6285">NGM2 - Another Game With Numbers</a></h3><p>容斥原理板子题</p><details>    <summary>AC Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n,ans;</span><br><span class="line"><span class="type">int</span> a[<span class="number">20</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y?<span class="built_in">gcd</span>(y,x%y):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*y/<span class="built_in">gcd</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;m&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">tot=<span class="number">1</span>&lt;&lt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;tot;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>,f=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>) f*=<span class="number">-1</span>,res=<span class="built_in">lcm</span>(res,a[j]);</span><br><span class="line">ans+=m/res*f;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;m-ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="Blood-Cousins"><a href="#Blood-Cousins" class="headerlink" title="Blood Cousins"></a><a href="https://www.luogu.com.cn/problem/CF208E">Blood Cousins</a></h3><p>一道好的数据结构题</p><p>我们考虑一个$v$的$p$级表亲就是他的$p$级祖先的$p$级子孙数量$-1$</p><p>由于同级子孙的深度相同，我们用主席树维护一个节点的子孙深度集合</p><p>好像还能dsu，但太菜了，还不会</p><details>    <summary>AC Code</summary>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line"><span class="type">int</span> id[N],nid[N],sz[N],idx,n,m;</span><br><span class="line"><span class="type">int</span> root[N],tot,dep[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id[x]=++idx,nid[idx]=x,sz[x]=<span class="number">1</span>,dep[x]=dep[f[x][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;f[x][i];++i) f[x][i+<span class="number">1</span>]=f[f[x][i]][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> y:g[x]) <span class="built_in">dfs</span>(y),sz[x]+=sz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(y&gt;=(<span class="number">1</span>&lt;&lt;i)) x=f[x][i],y-=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k=++tot]=t[p];</span><br><span class="line">t[k].v+=v;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">ins</span>(t[k].lc,t[p].lc,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ins</span>(t[k].rc,t[p].rc,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">ins</span>(root[i],root[i<span class="number">-1</span>],<span class="number">1</span>,n,dep[nid[i]],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[k].v-t[p].v;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask</span>(t[k].lc,t[p].lc,l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">ask</span>(t[k].rc,t[p].rc,mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y=<span class="built_in">find</span>(x,y);</span><br><span class="line"><span class="keyword">return</span> y?<span class="built_in">ask</span>(root[id[y]+sz[y]<span class="number">-1</span>],root[id[y]<span class="number">-1</span>],<span class="number">1</span>,n,dep[x])<span class="number">-1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;f[i][<span class="number">0</span>],<span class="built_in">add</span>(f[i][<span class="number">0</span>],i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(!f[i][<span class="number">0</span>]) <span class="built_in">dfs</span>(i);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(x,y)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="P6011-SCOI2006-动态最值"><a href="#P6011-SCOI2006-动态最值" class="headerlink" title="P6011 [SCOI2006]动态最值"></a><a href="https://www.luogu.com.cn/problem/P6011">P6011 [SCOI2006]动态最值</a></h3><p>线段树进阶题，考虑定位的不是下标而是子树大小</p><p>改天写个Splay</p><details>    <summary>AC Code</summary>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,cnt;</span><br><span class="line"><span class="type">int</span> v1,v2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">tree</span><span class="params">(<span class="type">int</span> _x=<span class="number">0</span>,<span class="type">int</span> _y=<span class="number">0</span>)</span></span>&#123;l=_x,r=_y;&#125;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].v1=<span class="built_in">max</span>(t[k1].v1,t[k2].v1);</span><br><span class="line">t[k].v2=<span class="built_in">min</span>(t[k1].v2,t[k2].v2);</span><br><span class="line">t[k].cnt=t[k1].cnt+t[k2].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k]=<span class="built_in">tree</span>(l,r);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>(<span class="type">void</span>)(cin&gt;&gt;t[k].v1,t[k].v2=t[k].v1,t[k].cnt=<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(k1,l,mid);<span class="built_in">build</span>(k2,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==t[k].r) <span class="keyword">return</span>(<span class="type">void</span>)(t[k].v1=-INF,t[k].v2=INF,t[k].cnt=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=t[k1].cnt) <span class="built_in">change</span>(k1,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(k2,x-t[k1].cnt);</span><br><span class="line"><span class="built_in">up</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> v1,v2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">1</span>&amp;&amp;r==t[k].cnt)  <span class="keyword">return</span> (<span class="type">void</span>)(v1=<span class="built_in">max</span>(v1,t[k].v1),v2=<span class="built_in">min</span>(v2,t[k].v2));</span><br><span class="line"><span class="keyword">if</span>(r&lt;=t[k1].cnt) <span class="built_in">ask</span>(k1,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;t[k1].cnt) <span class="built_in">ask</span>(k2,l-t[k1].cnt,r-t[k1].cnt);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">ask</span>(k1,l,t[k1].cnt),<span class="built_in">ask</span>(k2,<span class="number">1</span>,r-t[k1].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> opt,l,r;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;l;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">change</span>(<span class="number">1</span>,l);</span><br><span class="line"><span class="keyword">else</span> cin&gt;&gt;r,v1=-INF,v2=INF,<span class="built_in">ask</span>(<span class="number">1</span>,l,r),cout&lt;&lt;v2&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;v1&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="RACETIME-Race-Against-Tim"><a href="#RACETIME-Race-Against-Tim" class="headerlink" title="RACETIME - Race Against Tim"></a><a href="https://www.luogu.com.cn/problem/SP3261">RACETIME - Race Against Tim</a></h3><p><del>话说这个题是不是$n$倍经验</del></p><p>做法较多，有时间$O(n\sqrt{n}logn)$，空间$O(n)$的分块，时空都是$O(n\sqrt{n})$的分块</p><p>时空都是$O(nlog^{2}n)$的树套树，时间$O(n^{\frac{5}{3}})$，空间$O(n)$的带修莫队</p><p>然后我发现树套树代码比分块短，emm</p><details>    <summary>AC Code(分块)</summary>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,SN=<span class="number">800</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> L[SN],R[SN];</span><br><span class="line"><span class="type">int</span> b[N],a[N];</span><br><span class="line"><span class="type">int</span> block,belong[N],num,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[x]=val;</span><br><span class="line"><span class="type">int</span> p=belong[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[p];i&lt;=R[p];++i) b[i]=a[i];</span><br><span class="line"><span class="built_in">sort</span>(b+L[p],b+R[p]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=belong[l],q=belong[r];</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=val) ++ans;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=R[p];++i)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=val) ++ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[q];i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=val) ++ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p+<span class="number">1</span>;i&lt;q;++i)</span><br><span class="line">ans+=<span class="built_in">upper_bound</span>(b+L[i],b+R[i]+<span class="number">1</span>,val)-b-L[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">block=<span class="built_in">sqrt</span>(n),num=(n<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[i]=a[i],belong[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i) L[i]=R[i<span class="number">-1</span>]+<span class="number">1</span>,R[i]=i*block;</span><br><span class="line">R[num]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i) <span class="built_in">sort</span>(b+L[i],b+R[i]+<span class="number">1</span>);</span><br><span class="line"><span class="type">char</span> opt;</span><br><span class="line"><span class="type">int</span> l,r,x;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">cout&lt;&lt;<span class="built_in">ask</span>(l,r,x)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>AC Code(树套树)</summary>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 (t[k].lc)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 (t[k].rc)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lc,rc,v;</span><br><span class="line">&#125;t[N*<span class="number">550</span>];</span><br><span class="line"><span class="type">int</span> root[N],tot,a[N],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k) k=++tot;</span><br><span class="line">t[k].v+=v;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(k1,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(k2,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!k||l==r) <span class="keyword">return</span> t[k].v;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask</span>(k1,l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> t[k1].v+<span class="built_in">ask</span>(k2,mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line"><span class="built_in">change</span>(root[x],<span class="number">0</span>,INF,y,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x))</span><br><span class="line">res+=<span class="built_in">ask</span>(root[x],<span class="number">0</span>,INF,v);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y,v;</span><br><span class="line"><span class="type">char</span> opt;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],<span class="built_in">add</span>(i,a[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">&#x27;C&#x27;</span>) cin&gt;&gt;v,cout&lt;&lt;<span class="built_in">query</span>(y,v)-<span class="built_in">query</span>(x<span class="number">-1</span>,v)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(x,a[x],<span class="number">-1</span>),a[x]=y,<span class="built_in">add</span>(x,a[x],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="MDIGITS-Counting-Digits"><a href="#MDIGITS-Counting-Digits" class="headerlink" title="MDIGITS - Counting Digits"></a><a href="https://www.luogu.com.cn/problem/SP3928">MDIGITS - Counting Digits</a></h3><p>数位DP板子，但我不会</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题反思2022.8.16 ~ 8.19</title>
      <link href="//OI/%E5%81%9A%E9%A2%98%E5%8F%8D%E6%80%9D2022-8-16-8-19/"/>
      <url>//OI/%E5%81%9A%E9%A2%98%E5%8F%8D%E6%80%9D2022-8-16-8-19/</url>
      
        <content type="html"><![CDATA[<p>被吊打了</p><span id="more"></span><h2 id="CSP2021-95pts-0pts-0pts-40pts-135pts-rk-n"><a href="#CSP2021-95pts-0pts-0pts-40pts-135pts-rk-n" class="headerlink" title="CSP2021(95pts+0pts+0pts+40pts=135pts)($rk$  $n$)"></a>CSP2021(95pts+0pts+0pts+40pts=135pts)($rk$  $n$)</h2><p>T1 水题 线段树上二分(求前缀和时注意上限是n)或贪心(使用优先队列)</p><p>T2 状态较多的区间DP</p><p>$f[l][r][0,1,2,3,4,5]$为$l$到$r$区间不同形式的数量</p><p>1代表S 2代表A 3代表SA 4代表AS 5代表ASA</p><p>T3 四指针扫描法,从$a[1]$对应数的位置前后扫,如果和外围指针对应就移动</p><p>T4 用dinic跑最大流（最小割）可得60pts,正解还不会,似乎是在对偶图上跑最短路并区间DP</p><p>贺题解后得分:100pts+100pts+100pts+0pts=300pts</p><h2 id="NOIP2021-100pts-0pts-12pts-0pts-112pts-rk-n"><a href="#NOIP2021-100pts-0pts-12pts-0pts-112pts-rk-n" class="headerlink" title="NOIP2021(100pts+0pts+12pts+0pts=112pts)($rk$  $n$)"></a>NOIP2021(100pts+0pts+12pts+0pts=112pts)($rk$  $n$)</h2><p>T1 预处理/埃氏筛</p><p>T2 DP $f$[$i$][$j$][$k$][$p$] 表示前$i$个数中选了$j$个,有$k$个1,此时进位了$p$个1的方案数,刷表法,组合计数预处理,预处理$n$次幂</p><p>T3 推出答案公式为$n$*(∑$a_i$)^2-∑($a_i$^2)交换差分数组,推(猜)出单谷性质(可以打暴力验证),DP,将差分数组排序,$f[i][j]$表示前i个数中和的平方为j时平方和的最大值,从第i个数插入前面和后面中取最大值,填表法,并要使用滚动数组优化空间</p><p>T4 骗不到分</p><p>贺题解后得分:100pts+100pts+100pts+0pts=300pts</p><h2 id="NOIP2020-64pts-4pts-0pts-0pts-68pts-rk-n"><a href="#NOIP2020-64pts-4pts-0pts-0pts-68pts-rk-n" class="headerlink" title="NOIP2020(64pts+4pts+0pts+0pts=68pts)($rk$  $n$)"></a>NOIP2020(64pts+4pts+0pts+0pts=68pts)($rk$  $n$)</h2><p>T1 $a$/$b$+$c$/$d$=(a<em>d+b</em>c)/(b*d),注意约分和高精,或者__$int128$</p><p>T2 $kmp$预处理$ne$数组,求每个AB的循环,预处理前缀和后缀出现为奇数的数量,用数组记录A数量的数量,类似于某些莫队题的记录,对每个可能的C累加</p><p>T3 很妙的构造题,虽然我只看懂了一篇题解,Dzhao写的分治,个人觉得较为详细</p><p>T4 dfs+cout&lt;&lt;-1 骗分</p><p>贺题解后得分:100pts+100pts+0pts+0pts=200pts</p><h2 id="最近看的DP"><a href="#最近看的DP" class="headerlink" title="最近看的DP"></a>最近看的DP</h2><p>1.关路灯 蓝题中的基础题,比合唱队形还简单一点,只要想到数组开三维和DP就很容易,适合初学者</p><p>2.CSP-2019 Emiya家今天的饭(我绝对不会告诉你我贺了题解)<br>我这种蒟蒻觉得比较难,此题是套容斥原理的计数DP,直接求合法方案有难度,于是我们将其转化成总方案数-不合法方案数,</p><p>$f[i][j]$表示前$i$列中选了$j$个数的方案数(总方案),枚举超过一半的列,$g[i][j][k]$表示前$i$行中此列选了$j$个数,其他列选了$k$个数,最后记录$j&gt;k$的方案数,空间可以用滚动数组优化至($n^2$),但时间是($mn^3$)的</p><p>我们考虑优化,然后我们发现我们只关心$j和k$的大小关系,并不在乎其具体大小,我们可以仿照lyd的算法进阶中的Jury Compromise(陪审团)此题,将第三维删去,用$j-k$作为第二维,不过要将第二维下标平移$n$,时间复杂度为($mn^2$)</p><p>总结:CSP,NOIP反正全是DP,像我这种根本想不出方程的人就只能去世,准备爆零-&gt;退役-&gt;去世一条龙</p><p>update 2022.11.24<br>我错了，图论才是恶心的远古势力</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新博客</title>
      <link href="//uncategorized/%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
      <url>//uncategorized/%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Hello,World</p><span id="more"></span><p>在经历多次尝试，并在$Eternal$和$KevinLive$巨佬的帮助下，我<del>成功地</del>建起了这个$blog$，以后估计会在这儿更一些<del>奇奇怪怪</del>的东西吧</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
