<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日记</title>
      <link href="//%E6%97%A5%E8%AE%B0/%E6%97%A5%E8%AE%B0/"/>
      <url>//%E6%97%A5%E8%AE%B0/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你猜猜" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eca2c0aa7f4a26977624b2095fc1d4297b5b27f0e3b563998a01be7042ccfe23">e0b64c9f75e922280ddadaada83b1a612c6d4e84b4c30045d0e831f03e8d335202efb5b4d6579cd99a2fa03c696210e8d43449f536156639c5f56d48e16d473659e63f0b963c070d5b2afc8367e1997e69bf8b3e7970b64cb0e737470bffe7bd19d10d6340197aeddee6eb2bff6c93c8ada069a7307b0fb9df2a86f2135c0532a6d5295d27ec7a6e933f694d66064d61c017a31948737a27e6a84181f5bebd12b45b9977f77211cd5ca858ada3e11ebed390946489955b2e08d6856cc7f82e03b80589cbbc23e414e19956fae597415236378c28f4a388883c4cd018aea4ea9fee2e7eb4ad81d2ed1e38f2ac729b24d7a6354f6feaeb9a838b2a483a3cee3dece7a81ceea3c13c82237822c59f07728d1e81527c83d4046370dd4605faf9142e4f94469057ff37c36d2e7c224d82306ef94ef16e159320f498ff25573aeb63ff</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我喜欢女生的名字</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="//%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>//%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>写这个主要因为我勤奋<del>闲的没事干</del>，就总结一下</p><span id="more"></span><h2 id="1-队列"><a href="#1-队列" class="headerlink" title="1.队列"></a>1.队列</h2><h4 id="1-队列（queue）是一种具有「先进入队列的元素一定先出队列」性质的表。由于该性质，队列通常也被称为先进先出（first-in-first-out）表，简称-FIFO-表。-–OI-wiki"><a href="#1-队列（queue）是一种具有「先进入队列的元素一定先出队列」性质的表。由于该性质，队列通常也被称为先进先出（first-in-first-out）表，简称-FIFO-表。-–OI-wiki" class="headerlink" title="1.队列（queue）是一种具有「先进入队列的元素一定先出队列」性质的表。由于该性质，队列通常也被称为先进先出（first in first out）表，简称 FIFO 表。 –OI-wiki"></a>1.队列（queue）是一种具有「先进入队列的元素一定先出队列」性质的表。由于该性质，队列通常也被称为先进先出（first in first out）表，简称 FIFO 表。 –OI-wiki</h4><p>空间比较紧就手写循环队列，不然在$O2$下STL大概和手写差不多</p><h3 id="例题1-NOIP2004-提高组-合并果子-加强版"><a href="#例题1-NOIP2004-提高组-合并果子-加强版" class="headerlink" title="例题1.[NOIP2004 提高组] 合并果子 加强版"></a>例题1.<a href="https://www.luogu.com.cn/problem/P6033">[NOIP2004 提高组] 合并果子 加强版</a></h3><p>这道题数据范围相当大，只能用$O(n)$的算法，我们注意到$a_i$$&lt;=$$1e5$,于是可以先桶排，然后我们用贪心策略，每次取出两个最小的值合并，我们用<del>简单的</del>证明可以发现合并的值具有单调性，于是我们可以用一个队列存合并的值</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,a[maxm];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line">queue&lt;<span class="type">long</span> <span class="type">long</span>&gt;q1,q2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;<span class="type">char</span> s=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(s&lt;<span class="string">&#x27;0&#x27;</span>||s&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(s==<span class="string">&#x27;-&#x27;</span>)s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(s&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">&#x27;0&#x27;</span>;s=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">++a[<span class="built_in">read</span>()];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e5</span>;++i)<span class="keyword">while</span>(a[i]) --a[i],q1.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="type">int</span> k,k2;</span><br><span class="line"><span class="keyword">while</span>(--n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((!q1.<span class="built_in">empty</span>()&amp;&amp;q1.<span class="built_in">front</span>()&lt;=q2.<span class="built_in">front</span>())||q2.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">k=q1.<span class="built_in">front</span>();</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k=q2.<span class="built_in">front</span>();</span><br><span class="line">q2.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((!q1.<span class="built_in">empty</span>()&amp;&amp;q1.<span class="built_in">front</span>()&lt;=q2.<span class="built_in">front</span>())||q2.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">k2=q1.<span class="built_in">front</span>();</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k2=q2.<span class="built_in">front</span>();</span><br><span class="line">q2.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">ans+=k+k2;</span><br><span class="line">q2.<span class="built_in">push</span>(k+k2);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>####  2.优先队列<h3 id="例题2-P2827-NOIP2016-提高组-蚯蚓"><a href="#例题2-P2827-NOIP2016-提高组-蚯蚓" class="headerlink" title="例题2.P2827 [NOIP2016 提高组] 蚯蚓"></a>例题2.<a href="https://www.luogu.com.cn/problem/P2827">P2827 [NOIP2016 提高组] 蚯蚓</a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机100题(绿)</title>
      <link href="//%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E9%9A%8F%E6%9C%BA100%E9%A2%98/"/>
      <url>//%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E9%9A%8F%E6%9C%BA100%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>争取CSP前刷完<del>三分之一</del></p><span id="more"></span><p><del>顺便</del>宣传一下我的<a href="https://www.luogu.com.cn/training/216730#information">题单</a></p><h2 id="1-P2736-USACO3-4-“破锣摇滚”乐队-Raucous-Rockers"><a href="#1-P2736-USACO3-4-“破锣摇滚”乐队-Raucous-Rockers" class="headerlink" title="1.P2736 [USACO3.4]“破锣摇滚”乐队 Raucous Rockers"></a>1.<a href="https://www.luogu.com.cn/problem/P2736">P2736 [USACO3.4]“破锣摇滚”乐队 Raucous Rockers</a></h2><p>一道刷过的水题,但因为<del>懒</del>赶时间，我就<del>厚颜无耻</del>地<del>假装·</del>AC了<br>看数据范围<del>和标签</del>，我们可以知道<del>（猜出）</del>这是一道状压DP<del>（搜索）</del>题，然后就几乎是<del>(贺）</del>板子</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k1 k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> k2 k&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,t,m,a[<span class="number">25</span>],ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> res,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,k);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>,y,res,k);</span><br><span class="line"><span class="keyword">if</span>(res&gt;=a[x])<span class="built_in">dfs</span>(x+<span class="number">1</span>,y,res-a[x],k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y&lt;m&amp;&amp;t&gt;=a[x]) <span class="built_in">dfs</span>(x+<span class="number">1</span>,y+<span class="number">1</span>,t-a[x],k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;t&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="2-P4878-USACO05DEC-Layout-G"><a href="#2-P4878-USACO05DEC-Layout-G" class="headerlink" title="2.P4878 [USACO05DEC]Layout G"></a>2.<a href="https://www.luogu.com.cn/problem/P4878">P4878 [USACO05DEC]Layout G</a></h2><p>看题<del>和题解</del>，我们可以清楚地知道这是一道差分约束的板子题，然后敲板子<del>（从<a href="https://www.luogu.com.cn/problem/P1993">P1993</a>中拷过来)</del>就结束了<br>注意要加个超级源判断是否联通</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">8e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[maxm],ne[maxm],f[maxm],e[maxm],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> v[maxm],c[maxm],d[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=f[x],f[x]=tot,e[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    d[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        v[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(++c[x]==n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=f[x],y;i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[x]+e[i]&lt;d[y=to[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                d[y]=d[x]+e[i];</span><br><span class="line">                <span class="keyword">if</span>(!v[y]) q.<span class="built_in">push</span>(y),v[y]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[n]&gt;<span class="number">1e8</span>) <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">return</span> d[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ml,md;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;ml&gt;&gt;md;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=ml;++i) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">add</span>(x,y,z);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=md;++i) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">add</span>(y,x,-z);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) <span class="built_in">add</span>(i+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> sp=<span class="built_in">spfa</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sp&lt;=<span class="number">-1</span>) cout&lt;&lt;sp;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">spfa</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="3-AT2434-JOI-公园-JOI-Park"><a href="#3-AT2434-JOI-公园-JOI-Park" class="headerlink" title="3.AT2434 JOI 公园 (JOI Park)"></a>3.<a href="https://www.luogu.com.cn/problem/AT2434">AT2434 JOI 公园 (JOI Park)</a></h2><p>这道题是带有一点模拟性质的最短路，跑dijkstra后将每条边的优先级赋值为更大的点的距离，排序后枚举模拟，注意要换行，不然lj AtCoder会WA</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">8e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,c;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N],e[N],tot,d[N],v[N],sum;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,e,mx;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;res)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mx&lt;res.mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ed[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=head[x],e[tot]=z,head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) d[i]=<span class="number">999999999999999</span>;</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">        v[x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[y=to[i]]&gt;d[x]+e[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[y]=d[x]+e[i];</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mp</span>(-d[y],y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),c=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ed[i]=&#123;<span class="built_in">read</span>(),<span class="built_in">read</span>(),<span class="built_in">read</span>()&#125;,<span class="built_in">add</span>(ed[i].u,ed[i].v,ed[i].e),<span class="built_in">add</span>(ed[i].v,ed[i].u,ed[i].e),sum+=ed[i].e;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ed[i].mx=<span class="built_in">max</span>(d[ed[i].u],d[ed[i].v]);</span><br><span class="line">    <span class="built_in">sort</span>(ed+<span class="number">1</span>,ed+m+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans=sum;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum-=ed[i].e;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,ed[i].mx*c+sum);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="4-P3478-POI2008-STA-Station"><a href="#4-P3478-POI2008-STA-Station" class="headerlink" title="4.P3478 [POI2008] STA-Station"></a>4.<a href="https://www.luogu.com.cn/problem/P3478">P3478 [POI2008] STA-Station</a></h2><p>换根DP板子题，具体可以看这个<a href="https://violeteternal.github.io/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-tree/">树型dp </a>和这个<a href="https://www.luogu.com.cn/blog/sflsrick/note-how-to-change-root#">[学习笔记]换根dp</a></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> sta[<span class="number">35</span>],top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sta[top++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">putchar</span>(sta[--top]+<span class="number">48</span>); </span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,c;</span><br><span class="line"><span class="type">int</span> head[N],to[N],ne[N],tot,d[N],f[N],dep[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y,ne[tot]=head[x],head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(y,x);</span><br><span class="line">        d[x]+=d[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> y,i=head[x];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((y=to[i])==fa) <span class="keyword">continue</span>;</span><br><span class="line">        f[y]=f[x]<span class="number">-2</span>*d[y]+n;</span><br><span class="line">        <span class="built_in">dfs2</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),<span class="built_in">add</span>(x,y),<span class="built_in">add</span>(y,x);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[<span class="number">1</span>]+=d[i];</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(f[ans]&lt;f[i]) ans=i;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="5-CF149D-Coloring-Brackets"><a href="#5-CF149D-Coloring-Brackets" class="headerlink" title="5.CF149D Coloring Brackets"></a>5.<a href="https://www.luogu.com.cn/problem/CF149D">CF149D Coloring Brackets</a></h2><p>不会做，先咕着吧</p><h2 id="6-P8452-「SWTR-8」15B03"><a href="#6-P8452-「SWTR-8」15B03" class="headerlink" title="6.P8452 「SWTR-8」15B03"></a>6.<a href="https://www.luogu.com.cn/problem/P8452">P8452 「SWTR-8」15B03</a></h2><p>神仙构造题，是时候贺题解了</p><p>80pts 运用贪心，如样例，隔一个空放一张桌子</p><p>剩下二十分，我已找到一种绝妙的方法，但<del>(我太懒)</del>这里空白太小写不下，所以可以去<a href="https://www.luogu.com.cn/blog/461366/p8452-swtr-815b03-post#">这里</a></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c<span class="number">-48</span>,c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> sta[<span class="number">35</span>],top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sta[top++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">putchar</span>(sta[--top]+<span class="number">48</span>); </span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,m,s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s=<span class="built_in">read</span>();</span><br><span class="line">    T=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">        cout&lt;&lt;n*m-((n+<span class="number">1</span>)/<span class="number">2</span>)*((m+<span class="number">1</span>)/<span class="number">2</span>)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>&amp;&amp;m&lt;<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0.0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j+=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x=i,y=j;</span><br><span class="line">                <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;i&gt;n/<span class="number">2</span>) x++;</span><br><span class="line">                <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;j&gt;m/<span class="number">2</span>) y++;<span class="comment">//调整坐标</span></span><br><span class="line">                <span class="comment">// hypot(a - b, c - d) = sqrt((a - b) * (a - b) + (c - d) * (c - d)) </span></span><br><span class="line">                <span class="type">double</span> d=<span class="built_in">hypot</span>(x<span class="number">-1</span>,y<span class="number">-1</span>);</span><br><span class="line">                d=<span class="built_in">max</span>(d,<span class="built_in">hypot</span>(x<span class="number">-1</span>,y-m));</span><br><span class="line">                d=<span class="built_in">max</span>(d,<span class="built_in">hypot</span>(x-n,y<span class="number">-1</span>));</span><br><span class="line">                d=<span class="built_in">max</span>(d,<span class="built_in">hypot</span>(x-n,y-m));</span><br><span class="line">                ans+=d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.9lf\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="7-AT4530-Coins"><a href="#7-AT4530-Coins" class="headerlink" title="7.AT4530 Coins"></a>7.<a href="https://www.luogu.com.cn/problem/AT4530">AT4530 Coins</a></h2><p>没错，<del>在看了题解之后</del>我发现这是一道DP</p><p>这题很简单，设dp[i][j]表示前i个元素有j个向上的概率。只需要枚举当 前硬币是向上还是向下即可，与背包类似。</p><p>转移方程为： dp[i][j]=dp[i−1][j−1]×$p_i$+dp[i−1][j]×(1−$p_i$)</p><p>计算完毕后，枚举有多少枚硬币向上就做完了。</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j]*(<span class="number">1</span>-a[i])+(j&gt;<span class="number">0</span>?f[i<span class="number">-1</span>][j<span class="number">-1</span>]*a[i]:<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(i&gt;n-i) ans+=f[n][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9lf&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="8-CF1387B1-Village-Minimum"><a href="#8-CF1387B1-Village-Minimum" class="headerlink" title="8.CF1387B1 Village (Minimum)"></a>8.<a href="https://www.luogu.com.cn/problem/CF1387B1">CF1387B1 Village (Minimum)</a></h2><p>不会，先咕着</p><h2 id="9-AT2642-ARC076A-Reconciled"><a href="#9-AT2642-ARC076A-Reconciled" class="headerlink" title="9.AT2642 [ARC076A] Reconciled?"></a>9.<a href="https://www.luogu.com.cn/problem/AT2642">AT2642 [ARC076A] Reconciled?</a></h2><p>鉴于猴子和狗必须间隔，所以$abs(m-n)&lt;=1$,然后就是排列</p><details>     <summary>AC code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> jc[N]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(n-m)&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e5</span>;++i) jc[i]=i*jc[i<span class="number">-1</span>]%mod;</span><br><span class="line">    cout&lt;&lt;jc[m]*jc[n]*(n==m?<span class="number">2</span>:<span class="number">1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="10-SP1684-FREQUENT-Frequent-values"><a href="#10-SP1684-FREQUENT-Frequent-values" class="headerlink" title="10.SP1684 FREQUENT - Frequent values"></a>10.<a href="https://www.luogu.com.cn/problem/SP1684">SP1684 FREQUENT - Frequent values</a></h2><p>我们看到这个题就会想到莫队<del>？？？</del>，<del>于是把<a href="https://www.luogu.com.cn/problem/AT1219">[AT1219] 歴史の研究</a>拿过来改一下就A了</del>，但绿题怎么能用回滚莫队呢，<del>用普通莫队就可以了,我们用一个数组记录每个数出现次数的次数</del>，经过审题后，我们发现$a$序列是非降的，所以相同的数必定连续，于是可以预处理每个数字的出现次数，用RMQ合并</p><details>     <summary>AC code（回滚莫队）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">2e5</span>+<span class="number">5</span>,maxn=<span class="number">2e5</span>+<span class="number">5</span>,N=<span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> n,Q,t,t1;</span><br><span class="line"><span class="type">int</span> belong[maxm],a[maxm],b[maxm],R[maxn],cnt[maxm],cnt1[maxm],ans[maxm];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query&amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> belong[l]==belong[x.l]?r&lt;x.r:l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt[x+N];</span><br><span class="line">res=<span class="built_in">max</span>(res,cnt[x+N]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[x+N];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt1[x+N];</span><br><span class="line">res=<span class="built_in">max</span>(res,cnt1[x+N]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del1</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt1[x+N];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;Q;</span><br><span class="line">        t=<span class="built_in">sqrt</span>(n*n/Q);</span><br><span class="line">        t1=(n<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t1;++i) R[i]=i*t;</span><br><span class="line">        R[t1]=n;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[i]=a[i],belong[i]=(i<span class="number">-1</span>)/t+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> M=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+M+<span class="number">1</span>,a[i])-b;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cin&gt;&gt;q[i].l&gt;&gt;q[i].r,q[i].id=i;</span><br><span class="line">        <span class="built_in">sort</span>(q+<span class="number">1</span>,q+Q+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> res,res1,last=<span class="number">0</span>,l=<span class="number">1</span>,r=<span class="number">0</span>,ll;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(belong[q[i].l]==belong[q[i].r])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) <span class="built_in">add1</span>(a[j],ans[q[i].id]);</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=q[i].l;j&lt;=q[i].r;++j) <span class="built_in">del1</span>(a[j]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(belong[q[i].l]!=last)</span><br><span class="line">            &#123;</span><br><span class="line">                last=belong[q[i].l];</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=l;j&lt;=r;++j) <span class="built_in">del</span>(a[j]);</span><br><span class="line">                l=R[last]+<span class="number">1</span>,r=l<span class="number">-1</span>;</span><br><span class="line">                ll=l;</span><br><span class="line">                res=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(a[++r],res);</span><br><span class="line">            res1=res;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(a[--l],res1);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;ll) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">            ans[q[i].id]=res1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>     <summary>AC code（RMQ）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> st[N][<span class="number">20</span>],dp[N],num[N];</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rmq</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">st[i][<span class="number">0</span>]=dp[i];</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">log</span>((<span class="type">double</span>)(n+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">st[i][j]=<span class="built_in">max</span>(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line"><span class="type">int</span> k=<span class="built_in">log</span>((<span class="type">double</span>)(r-l+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2.0</span>);    </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;    </span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF&amp;&amp;n)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>)</span><br><span class="line">dp[i]=(num[i]==num[i<span class="number">-1</span>]?dp[i<span class="number">-1</span>]+<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rmq</span>();</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="type">int</span> c=a;</span><br><span class="line"><span class="keyword">while</span>(c&lt;=b&amp;&amp;num[c]==num[c<span class="number">-1</span>]) c++;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(<span class="built_in">Query</span>(c,b),c-a)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="11-AT4319-ABC120D-Decayed-Bridges"><a href="#11-AT4319-ABC120D-Decayed-Bridges" class="headerlink" title="11.AT4319 [ABC120D] Decayed Bridges"></a>11.<a href="https://www.luogu.com.cn/problem/AT4319">AT4319 [ABC120D] Decayed Bridges</a></h2><p>一道很水的题，类似于<a href="https://www.luogu.com.cn/problem/P1197">P1197 [JSOI2008] 星球大战</a>，鉴于删边不好操作，我们倒序操作，将其改为加边，对两个联通块而言，减少的贡献是两者大小之积，用并查集维护即可</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="type">int</span> f[N],s[N];</span><br><span class="line"><span class="type">int</span> ans[N],res;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i,s[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cin&gt;&gt;e[i].x&gt;&gt;e[i].y;</span><br><span class="line">    res=(n<span class="number">-1</span>)*n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=m;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=res;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(e[i].x),y=<span class="built_in">find</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span>(x!=y)</span><br><span class="line">        &#123;</span><br><span class="line">            res-=s[x]*s[y];</span><br><span class="line">            f[x]=y,s[y]+=s[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="12-SP18185-GIVEAWAY-Give-Away"><a href="#12-SP18185-GIVEAWAY-Give-Away" class="headerlink" title="12.SP18185 GIVEAWAY - Give Away"></a>12.<a href="https://www.luogu.com.cn/problem/SP18185">SP18185 GIVEAWAY - Give Away</a></h2><p>分块裸题，题解中有用树套树的巨佬，我就<del>无耻地</del>copy过来</p><details>    <summary>AC Code（分块）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e6</span>+<span class="number">5</span>,maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxm],b[maxm],L[maxn],R[maxn],belong[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">so</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a+L[k],a+R[k]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=belong[x];</span><br><span class="line">    b[x]=v;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=L[p];i&lt;=R[p];++i) a[i]=b[i];</span><br><span class="line">    <span class="built_in">so</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p=belong[x],q=belong[y];</span><br><span class="line"><span class="keyword">if</span>(p==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=x;i&lt;=y;++i) <span class="keyword">if</span>(b[i]&gt;=v) ++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=x;i&lt;=R[p];++i) <span class="keyword">if</span>(b[i]&gt;=v) ++res;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=L[q];i&lt;=y;++i) <span class="keyword">if</span>(b[i]&gt;=v) ++res;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=p+<span class="number">1</span>;i&lt;q;++i)</span><br><span class="line">&#123;</span><br><span class="line">res+=R[i]+<span class="number">1</span>-(<span class="built_in">lower_bound</span>(a+L[i],a+R[i]+<span class="number">1</span>,v)-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> t1=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="type">int</span> t=(n<span class="number">-1</span>)/t1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i)L[i]=(i<span class="number">-1</span>)*t1+<span class="number">1</span>,R[i]=i*t1;</span><br><span class="line">R[t]=n;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],b[i]=a[i],belong[i]=(i<span class="number">-1</span>)/t1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i) <span class="built_in">so</span>(i);</span><br><span class="line"><span class="type">int</span> opt,x,y,z;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;opt&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>) cin&gt;&gt;z,cout&lt;&lt;<span class="built_in">ask</span>(x,y,z)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details>    <summary>AC Code（树套树）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">500010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> alpha = <span class="number">0.75</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">scapeGoat</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        node *parent; <span class="comment">// 父节点指针</span></span><br><span class="line">        node *child[<span class="number">2</span>]; <span class="comment">// child[0]为左子结点的指针，child[1]为右子结点的指针。</span></span><br><span class="line">        <span class="type">int</span> value, count, size, cover; <span class="comment">// 数据，结点个数，size为有效结点的数量（记录count），cover为总结点的数量（全视为1）</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> _value) &#123;</span><br><span class="line">            value = _value;</span><br><span class="line">            parent = child[<span class="number">0</span>] = child[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">            size = cover = count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    node *root;</span><br><span class="line">    <span class="type">int</span> deletedCount;</span><br><span class="line">    <span class="built_in">scapeGoat</span>() &#123;</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">        deletedCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">scapeGoat</span>() &#123;</span><br><span class="line">        <span class="built_in">destroy</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current) &#123;</span><br><span class="line">            <span class="built_in">destroy</span>(current-&gt;child[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">destroy</span>(current-&gt;child[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">delete</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">maintain</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123; <span class="comment">// 可能传入的是一个空指针</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;size = current-&gt;count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;child[i]) &#123;</span><br><span class="line">                current-&gt;size += current-&gt;child[i]-&gt;size; <span class="comment">// 加上左右子树的size</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;cover = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;child[i]) &#123;</span><br><span class="line">                current-&gt;cover += current-&gt;child[i]-&gt;cover; <span class="comment">// 加上左右子树的cover</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">getType</span><span class="params">(node *current)</span> </span>&#123; <span class="comment">// 获得结点是左结点还是右结点，0左1右</span></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span> || current-&gt;parent == <span class="literal">NULL</span>) &#123; <span class="comment">// 传入空指针；根结点没有父亲，特判一下</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 下标放-1会报错，放个0就好了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current-&gt;parent-&gt;child[<span class="number">1</span>] == current; <span class="comment">// 父亲的右子结点 是不是 自己</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">connect</span><span class="params">(node *parent, node *current, <span class="type">int</span> type)</span> </span>&#123; <span class="comment">// 父结点指针，当前结点指针，类型（0左1右）</span></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123; <span class="comment">// parent 可能为NULL</span></span><br><span class="line">            parent-&gt;child[type] = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (current) &#123; <span class="comment">// current 也可能为NULL</span></span><br><span class="line">            current-&gt;parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">isBad</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;child[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current-&gt;child[i]-&gt;cover &gt; current-&gt;cover * alpha) &#123; <span class="comment">// 对后面的current-&gt;cover * alpha加5可以避免小规模的重构，在O0中能快几ms</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">travel</span><span class="params">(node *current, vector&lt;node *&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">travel</span>(current-&gt;child[<span class="number">0</span>], v);</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;count) &#123; <span class="comment">// 结点存在，没被删</span></span><br><span class="line">            v.<span class="built_in">push_back</span>(current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">travel</span>(current-&gt;child[<span class="number">1</span>], v);</span><br><span class="line">        <span class="keyword">if</span> (!current-&gt;count) &#123; <span class="comment">// 被删了，物理上删除</span></span><br><span class="line">            deletedCount --; <span class="comment">// 标记删除的结点少了一个</span></span><br><span class="line">            <span class="keyword">delete</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node * <span class="title">divide</span><span class="params">(vector&lt;node *&gt; &amp;v, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> middle = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        node *current = v[middle];</span><br><span class="line">        <span class="built_in">connect</span>(current, <span class="built_in">divide</span>(v, left, middle), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(current, <span class="built_in">divide</span>(v, middle + <span class="number">1</span>, right), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">maintain</span>(current);</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reBuild</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> type = <span class="built_in">getType</span>(current);</span><br><span class="line">        node *parent = current-&gt;parent;</span><br><span class="line">        <span class="type">static</span> vector&lt;node *&gt; v; <span class="comment">// 避免反复申请、释放内存，快了30ms</span></span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">travel</span>(current, v);</span><br><span class="line">        node *newTree = <span class="built_in">divide</span>(v, <span class="number">0</span>, v.<span class="built_in">size</span>());</span><br><span class="line">        <span class="built_in">connect</span>(parent, newTree, type);</span><br><span class="line">        <span class="keyword">if</span> (root == current) &#123; <span class="comment">// 根节点更新</span></span><br><span class="line">            root = newTree;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">balance</span><span class="params">(node *current)</span> </span>&#123; <span class="comment">// 一路更新，暴力重构最顶端的坏结点</span></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (deletedCount &gt; root-&gt;cover / <span class="number">2</span>) &#123; <span class="comment">// 懒更新结点太多了，整棵树重构</span></span><br><span class="line">            <span class="built_in">reBuild</span>(root);</span><br><span class="line">            deletedCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node *badNode = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">maintain</span>(current);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isBad</span>(current)) &#123;</span><br><span class="line">                badNode = current;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;parent) &#123;</span><br><span class="line">                current = current-&gt;parent;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (badNode) &#123;</span><br><span class="line">            <span class="built_in">reBuild</span>(badNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node* <span class="title">insert</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> <span class="built_in">node</span>(value);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        node *current = root;</span><br><span class="line">        node *parent = current-&gt;parent;</span><br><span class="line">        <span class="type">int</span> type; <span class="comment">// 类型</span></span><br><span class="line">        <span class="keyword">while</span> (current) &#123; <span class="comment">// 和查找一模一样</span></span><br><span class="line">            <span class="keyword">if</span> (current-&gt;value &lt; value) &#123;</span><br><span class="line">                parent = current;</span><br><span class="line">                current = current-&gt;child[<span class="number">1</span>];</span><br><span class="line">                type = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current-&gt;value &gt; value) &#123;</span><br><span class="line">                parent = current;</span><br><span class="line">                current = current-&gt;child[<span class="number">0</span>];</span><br><span class="line">                type = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 已经有相同结点了，将其count++即可。</span></span><br><span class="line">                <span class="keyword">if</span> (!current-&gt;count) &#123; <span class="comment">// 被删除的结点在没有重构之前回来了</span></span><br><span class="line">                    deletedCount --;</span><br><span class="line">                &#125;</span><br><span class="line">                current-&gt;count ++;</span><br><span class="line">                <span class="built_in">balance</span>(current);</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        current = <span class="keyword">new</span> <span class="built_in">node</span>(value);</span><br><span class="line">        <span class="built_in">connect</span>(parent, current, type);</span><br><span class="line">        <span class="built_in">balance</span>(current);</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(node *current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">NULL</span> || !current-&gt;count) &#123; <span class="comment">// 已经被删除了就不要再删了</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;count --;</span><br><span class="line">        <span class="keyword">if</span> (!current-&gt;count) &#123;</span><br><span class="line">            deletedCount ++; <span class="comment">// 删没了一个结点，懒更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">balance</span>(current); <span class="comment">// 更新size等信息 + 平衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node* <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        node *current = root; <span class="comment">// 从根结点开始搜索</span></span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;value &lt; value) &#123;</span><br><span class="line">                current = current-&gt;child[<span class="number">1</span>]; <span class="comment">// 小了，往大了走</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current-&gt;value &gt; value) &#123;</span><br><span class="line">                current = current-&gt;child[<span class="number">0</span>]; <span class="comment">// 大了，往小了走</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不大也不小不就是找到了吗？</span></span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 找不到结点，退出。（找到得到结点的话会在while循环就退出）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rankOfNode</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123; <span class="comment">// 即使查询的值不在树中，也能查。</span></span><br><span class="line">        <span class="comment">// 这里传入的value为被查询排名的结点的value</span></span><br><span class="line">        node *current = root; <span class="comment">// 从根结点开始搜索</span></span><br><span class="line">        <span class="type">int</span> leftSize = <span class="number">1</span>; <span class="comment">// 左面的结点个数。提前将自己的大小1加上，你就想最左侧结点左面啥也没有但是排名为1</span></span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;value &gt;= value) &#123; <span class="comment">// 玄学。即使找到了结点， 也还是会往左走到NULL结点后退出，走左子树不加，不影响结果。</span></span><br><span class="line">                current = current-&gt;child[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (current-&gt;child[<span class="number">0</span>]) &#123;</span><br><span class="line">                    leftSize += current-&gt;child[<span class="number">0</span>]-&gt;size;</span><br><span class="line">                &#125;</span><br><span class="line">                leftSize += current-&gt;count;</span><br><span class="line">                current = current-&gt;child[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 树状数组（套替罪羊）</span></span><br><span class="line"><span class="type">int</span> a[MAX_N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    scapeGoat node[MAX_N];</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> _n) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> c)</span> </span>&#123; <span class="comment">// 大于等于c的有多少</span></span><br><span class="line">        <span class="type">int</span> oriIndex = index; <span class="comment">// 原先的index</span></span><br><span class="line">        <span class="type">int</span> lessThanC = <span class="number">0</span>; <span class="comment">// 比c小的有多少</span></span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            lessThanC += node[index].<span class="built_in">rankOfNode</span>(c) - <span class="number">1</span>;</span><br><span class="line">            index -= <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oriIndex - lessThanC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= n) &#123;</span><br><span class="line">            node[index].<span class="built_in">insert</span>(value);</span><br><span class="line">            index += <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = index; <span class="comment">// 记录原来的位置</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt;= n) &#123;</span><br><span class="line">            node[index].<span class="built_in">remove</span>(node[index].<span class="built_in">find</span>(a[p])); <span class="comment">// 删掉老的</span></span><br><span class="line">            node[index].<span class="built_in">insert</span>(value); <span class="comment">// 插入新的</span></span><br><span class="line">            index += <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        a[p] = value; <span class="comment">// 在存放所有数据的a中同样进行更改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q, temp, op, l, r, c, p, b;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">BIT <span class="title">tree</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        tree.<span class="built_in">insert</span>(i, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">                cout &lt;&lt; tree.<span class="built_in">sum</span>(r, c) - tree.<span class="built_in">sum</span>(l - <span class="number">1</span>, c) &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cin &gt;&gt; p &gt;&gt; b;</span><br><span class="line">                tree.<span class="built_in">change</span>(p, b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 做题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题反思2022.8.16 ~ 8.19</title>
      <link href="//%E5%8F%8D%E6%80%9D/%E5%81%9A%E9%A2%98%E5%8F%8D%E6%80%9D2022-8-16-8-19/"/>
      <url>//%E5%8F%8D%E6%80%9D/%E5%81%9A%E9%A2%98%E5%8F%8D%E6%80%9D2022-8-16-8-19/</url>
      
        <content type="html"><![CDATA[<p>被吊打了</p><span id="more"></span><h2 id="CSP2021-95pts-0pts-0pts-40pts-135pts-rk-n"><a href="#CSP2021-95pts-0pts-0pts-40pts-135pts-rk-n" class="headerlink" title="CSP2021(95pts+0pts+0pts+40pts=135pts)($rk$  $n$)"></a>CSP2021(95pts+0pts+0pts+40pts=135pts)($rk$  $n$)</h2><p>T1 水题 线段树上二分(求前缀和时注意上限是n)或贪心(使用优先队列)</p><p>T2 状态较多的区间DP</p><p>f[$l$][$r$][$0$<del>$5$]为$l$</del>$r$不同形式的数量</p><p>$1代表S\ 2代表A\ 3代表SA\ 4代表AS\ 5代表ASA$</p><p>T3 四指针扫描法,从$a[1]$对应数的位置前后扫,如果和外围指针对应就移动</p><p>T4 用dinic跑最大流（最小割）可得60pts,正解还不会,似乎是在对偶图上跑最短路并区间DP</p><p>贺题解后得分:100pts+100pts+100pts+0pts=300pts</p><h2 id="NOIP2021-100pts-0pts-12pts-0pts-112pts-rk-n"><a href="#NOIP2021-100pts-0pts-12pts-0pts-112pts-rk-n" class="headerlink" title="NOIP2021(100pts+0pts+12pts+0pts=112pts)($rk$  $n$)"></a>NOIP2021(100pts+0pts+12pts+0pts=112pts)($rk$  $n$)</h2><p>T1 预处理/埃氏筛</p><p>T2 DP $f$[$i$][$j$][$k$][$p$] 表示前$i$个数中选了$j$个,有$k$个1,此时进位了$p$个1的方案数,刷表法,组合计数预处理,预处理$n$次幂</p><p>T3 推出答案公式为$n$*(∑$a_i$)^2-∑($a_i$^2)交换差分数组,推(猜)出单谷性质(可以打暴力验证),DP,将差分数组排序,$f[i][j]$表示前i个数中和的平方为j时平方和的最大值,从第i个数插入前面和后面中取最大值,填表法,并要使用滚动数组优化空间</p><p>T4 骗不到分</p><p>贺题解后得分:100pts+100pts+100pts+0pts=300pts</p><h2 id="NOIP2020-64pts-4pts-0pts-0pts-68pts-rk-n"><a href="#NOIP2020-64pts-4pts-0pts-0pts-68pts-rk-n" class="headerlink" title="NOIP2020(64pts+4pts+0pts+0pts=68pts)($rk$  $n$)"></a>NOIP2020(64pts+4pts+0pts+0pts=68pts)($rk$  $n$)</h2><p>T1 $a$/$b$+$c$/$d$=(a<em>d+b</em>c)/(b*d),注意约分和高精,或者__$int128$</p><p>T2 $kmp预处理ne数组$,求每个AB的循环,预处理前缀和后缀出现为奇数的数量,用数组记录A数量的数量,类似于某些莫队题的记录,对每个可能的C累加</p><p>T3 很妙的构造题,虽然我只看懂了一篇题解,Dzhao写的分治,个人觉得较为详细</p><p>T4 dfs+cout&lt;&lt;-1 骗分</p><p>贺题解后得分:100pts+100pts+0pts+0pts=200pts</p><h2 id="最近看的DP"><a href="#最近看的DP" class="headerlink" title="最近看的DP"></a>最近看的DP</h2><p>1.关路灯 蓝题中的基础题,比合唱队形还简单一点,只要想到数组开三维和DP就很容易,适合初学者</p><p>2.CSP-2019 Emiya家今天的饭(我绝对不会告诉你我贺了题解)<br>我这种蒟蒻觉得比较难,此题是套容斥原理的计数DP,直接求合法方案有难度,于是我们将其转化成总方案数-不合法方案数,</p><p>$f[i][j]$表示前$i$列中选了$j$个数的方案数(总方案),枚举超过一半的列,$g[i][j][k]$表示前$i$行中此列选了$j$个数,其他列选了$k$个数,最后记录$j&gt;k$的方案数,空间可以用滚动数组优化至($n^2$),但时间是($mn^3$)的</p><p>我们考虑优化,然后我们发现我们只关心$j和k$的大小关系,并不在乎其具体大小,我们可以仿照lyd的算法进阶中的Jury Compromise(陪审团)此题,将第三维删去,用$j-k$作为第二维,不过要将第二维下标平移$n$,时间复杂度为($mn^2$)</p><p>总结:CSP,NOIP反正全是DP,像我这种根本想不出方程的人就只能去世,准备爆零-&gt;退役-&gt;去世一条龙</p>]]></content>
      
      
      <categories>
          
          <category> 反思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新博客</title>
      <link href="//uncategorized/%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
      <url>//uncategorized/%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Hello,World</p><span id="more"></span><p>在经历多次尝试，并在_Eternal_和_Live_巨佬的帮助下，我<del>成功地</del>建起了这个blog，以后估计会在这儿更一些<del>奇奇怪怪</del>的东西吧</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
